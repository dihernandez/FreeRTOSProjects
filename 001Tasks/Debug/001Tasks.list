
001Tasks.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005718  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001d8  08005918  08005918  00015918  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005af0  08005af0  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08005af0  08005af0  00015af0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005af8  08005af8  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005af8  08005af8  00015af8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005afc  08005afc  00015afc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08005b00  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000ba24  20000074  08005b74  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  2000ba98  08005b74  0002ba98  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   000126bd  00000000  00000000  000200a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000276f  00000000  00000000  0003275f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001018  00000000  00000000  00034ed0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f20  00000000  00000000  00035ee8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003005d  00000000  00000000  00036e08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014223  00000000  00000000  00066e65  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001224e5  00000000  00000000  0007b088  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0019d56d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004b08  00000000  00000000  0019d5c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000074 	.word	0x20000074
 800021c:	00000000 	.word	0x00000000
 8000220:	08005900 	.word	0x08005900

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000078 	.word	0x20000078
 800023c:	08005900 	.word	0x08005900

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002f4:	f000 b974 	b.w	80005e0 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	4604      	mov	r4, r0
 8000318:	468e      	mov	lr, r1
 800031a:	2b00      	cmp	r3, #0
 800031c:	d14d      	bne.n	80003ba <__udivmoddi4+0xaa>
 800031e:	428a      	cmp	r2, r1
 8000320:	4694      	mov	ip, r2
 8000322:	d969      	bls.n	80003f8 <__udivmoddi4+0xe8>
 8000324:	fab2 f282 	clz	r2, r2
 8000328:	b152      	cbz	r2, 8000340 <__udivmoddi4+0x30>
 800032a:	fa01 f302 	lsl.w	r3, r1, r2
 800032e:	f1c2 0120 	rsb	r1, r2, #32
 8000332:	fa20 f101 	lsr.w	r1, r0, r1
 8000336:	fa0c fc02 	lsl.w	ip, ip, r2
 800033a:	ea41 0e03 	orr.w	lr, r1, r3
 800033e:	4094      	lsls	r4, r2
 8000340:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000344:	0c21      	lsrs	r1, r4, #16
 8000346:	fbbe f6f8 	udiv	r6, lr, r8
 800034a:	fa1f f78c 	uxth.w	r7, ip
 800034e:	fb08 e316 	mls	r3, r8, r6, lr
 8000352:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000356:	fb06 f107 	mul.w	r1, r6, r7
 800035a:	4299      	cmp	r1, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x64>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000366:	f080 811f 	bcs.w	80005a8 <__udivmoddi4+0x298>
 800036a:	4299      	cmp	r1, r3
 800036c:	f240 811c 	bls.w	80005a8 <__udivmoddi4+0x298>
 8000370:	3e02      	subs	r6, #2
 8000372:	4463      	add	r3, ip
 8000374:	1a5b      	subs	r3, r3, r1
 8000376:	b2a4      	uxth	r4, r4
 8000378:	fbb3 f0f8 	udiv	r0, r3, r8
 800037c:	fb08 3310 	mls	r3, r8, r0, r3
 8000380:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000384:	fb00 f707 	mul.w	r7, r0, r7
 8000388:	42a7      	cmp	r7, r4
 800038a:	d90a      	bls.n	80003a2 <__udivmoddi4+0x92>
 800038c:	eb1c 0404 	adds.w	r4, ip, r4
 8000390:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000394:	f080 810a 	bcs.w	80005ac <__udivmoddi4+0x29c>
 8000398:	42a7      	cmp	r7, r4
 800039a:	f240 8107 	bls.w	80005ac <__udivmoddi4+0x29c>
 800039e:	4464      	add	r4, ip
 80003a0:	3802      	subs	r0, #2
 80003a2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003a6:	1be4      	subs	r4, r4, r7
 80003a8:	2600      	movs	r6, #0
 80003aa:	b11d      	cbz	r5, 80003b4 <__udivmoddi4+0xa4>
 80003ac:	40d4      	lsrs	r4, r2
 80003ae:	2300      	movs	r3, #0
 80003b0:	e9c5 4300 	strd	r4, r3, [r5]
 80003b4:	4631      	mov	r1, r6
 80003b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d909      	bls.n	80003d2 <__udivmoddi4+0xc2>
 80003be:	2d00      	cmp	r5, #0
 80003c0:	f000 80ef 	beq.w	80005a2 <__udivmoddi4+0x292>
 80003c4:	2600      	movs	r6, #0
 80003c6:	e9c5 0100 	strd	r0, r1, [r5]
 80003ca:	4630      	mov	r0, r6
 80003cc:	4631      	mov	r1, r6
 80003ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003d2:	fab3 f683 	clz	r6, r3
 80003d6:	2e00      	cmp	r6, #0
 80003d8:	d14a      	bne.n	8000470 <__udivmoddi4+0x160>
 80003da:	428b      	cmp	r3, r1
 80003dc:	d302      	bcc.n	80003e4 <__udivmoddi4+0xd4>
 80003de:	4282      	cmp	r2, r0
 80003e0:	f200 80f9 	bhi.w	80005d6 <__udivmoddi4+0x2c6>
 80003e4:	1a84      	subs	r4, r0, r2
 80003e6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ea:	2001      	movs	r0, #1
 80003ec:	469e      	mov	lr, r3
 80003ee:	2d00      	cmp	r5, #0
 80003f0:	d0e0      	beq.n	80003b4 <__udivmoddi4+0xa4>
 80003f2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003f6:	e7dd      	b.n	80003b4 <__udivmoddi4+0xa4>
 80003f8:	b902      	cbnz	r2, 80003fc <__udivmoddi4+0xec>
 80003fa:	deff      	udf	#255	; 0xff
 80003fc:	fab2 f282 	clz	r2, r2
 8000400:	2a00      	cmp	r2, #0
 8000402:	f040 8092 	bne.w	800052a <__udivmoddi4+0x21a>
 8000406:	eba1 010c 	sub.w	r1, r1, ip
 800040a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800040e:	fa1f fe8c 	uxth.w	lr, ip
 8000412:	2601      	movs	r6, #1
 8000414:	0c20      	lsrs	r0, r4, #16
 8000416:	fbb1 f3f7 	udiv	r3, r1, r7
 800041a:	fb07 1113 	mls	r1, r7, r3, r1
 800041e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000422:	fb0e f003 	mul.w	r0, lr, r3
 8000426:	4288      	cmp	r0, r1
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x12c>
 800042a:	eb1c 0101 	adds.w	r1, ip, r1
 800042e:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x12a>
 8000434:	4288      	cmp	r0, r1
 8000436:	f200 80cb 	bhi.w	80005d0 <__udivmoddi4+0x2c0>
 800043a:	4643      	mov	r3, r8
 800043c:	1a09      	subs	r1, r1, r0
 800043e:	b2a4      	uxth	r4, r4
 8000440:	fbb1 f0f7 	udiv	r0, r1, r7
 8000444:	fb07 1110 	mls	r1, r7, r0, r1
 8000448:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800044c:	fb0e fe00 	mul.w	lr, lr, r0
 8000450:	45a6      	cmp	lr, r4
 8000452:	d908      	bls.n	8000466 <__udivmoddi4+0x156>
 8000454:	eb1c 0404 	adds.w	r4, ip, r4
 8000458:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800045c:	d202      	bcs.n	8000464 <__udivmoddi4+0x154>
 800045e:	45a6      	cmp	lr, r4
 8000460:	f200 80bb 	bhi.w	80005da <__udivmoddi4+0x2ca>
 8000464:	4608      	mov	r0, r1
 8000466:	eba4 040e 	sub.w	r4, r4, lr
 800046a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800046e:	e79c      	b.n	80003aa <__udivmoddi4+0x9a>
 8000470:	f1c6 0720 	rsb	r7, r6, #32
 8000474:	40b3      	lsls	r3, r6
 8000476:	fa22 fc07 	lsr.w	ip, r2, r7
 800047a:	ea4c 0c03 	orr.w	ip, ip, r3
 800047e:	fa20 f407 	lsr.w	r4, r0, r7
 8000482:	fa01 f306 	lsl.w	r3, r1, r6
 8000486:	431c      	orrs	r4, r3
 8000488:	40f9      	lsrs	r1, r7
 800048a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800048e:	fa00 f306 	lsl.w	r3, r0, r6
 8000492:	fbb1 f8f9 	udiv	r8, r1, r9
 8000496:	0c20      	lsrs	r0, r4, #16
 8000498:	fa1f fe8c 	uxth.w	lr, ip
 800049c:	fb09 1118 	mls	r1, r9, r8, r1
 80004a0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004a4:	fb08 f00e 	mul.w	r0, r8, lr
 80004a8:	4288      	cmp	r0, r1
 80004aa:	fa02 f206 	lsl.w	r2, r2, r6
 80004ae:	d90b      	bls.n	80004c8 <__udivmoddi4+0x1b8>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80004b8:	f080 8088 	bcs.w	80005cc <__udivmoddi4+0x2bc>
 80004bc:	4288      	cmp	r0, r1
 80004be:	f240 8085 	bls.w	80005cc <__udivmoddi4+0x2bc>
 80004c2:	f1a8 0802 	sub.w	r8, r8, #2
 80004c6:	4461      	add	r1, ip
 80004c8:	1a09      	subs	r1, r1, r0
 80004ca:	b2a4      	uxth	r4, r4
 80004cc:	fbb1 f0f9 	udiv	r0, r1, r9
 80004d0:	fb09 1110 	mls	r1, r9, r0, r1
 80004d4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004d8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004dc:	458e      	cmp	lr, r1
 80004de:	d908      	bls.n	80004f2 <__udivmoddi4+0x1e2>
 80004e0:	eb1c 0101 	adds.w	r1, ip, r1
 80004e4:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80004e8:	d26c      	bcs.n	80005c4 <__udivmoddi4+0x2b4>
 80004ea:	458e      	cmp	lr, r1
 80004ec:	d96a      	bls.n	80005c4 <__udivmoddi4+0x2b4>
 80004ee:	3802      	subs	r0, #2
 80004f0:	4461      	add	r1, ip
 80004f2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004f6:	fba0 9402 	umull	r9, r4, r0, r2
 80004fa:	eba1 010e 	sub.w	r1, r1, lr
 80004fe:	42a1      	cmp	r1, r4
 8000500:	46c8      	mov	r8, r9
 8000502:	46a6      	mov	lr, r4
 8000504:	d356      	bcc.n	80005b4 <__udivmoddi4+0x2a4>
 8000506:	d053      	beq.n	80005b0 <__udivmoddi4+0x2a0>
 8000508:	b15d      	cbz	r5, 8000522 <__udivmoddi4+0x212>
 800050a:	ebb3 0208 	subs.w	r2, r3, r8
 800050e:	eb61 010e 	sbc.w	r1, r1, lr
 8000512:	fa01 f707 	lsl.w	r7, r1, r7
 8000516:	fa22 f306 	lsr.w	r3, r2, r6
 800051a:	40f1      	lsrs	r1, r6
 800051c:	431f      	orrs	r7, r3
 800051e:	e9c5 7100 	strd	r7, r1, [r5]
 8000522:	2600      	movs	r6, #0
 8000524:	4631      	mov	r1, r6
 8000526:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800052a:	f1c2 0320 	rsb	r3, r2, #32
 800052e:	40d8      	lsrs	r0, r3
 8000530:	fa0c fc02 	lsl.w	ip, ip, r2
 8000534:	fa21 f303 	lsr.w	r3, r1, r3
 8000538:	4091      	lsls	r1, r2
 800053a:	4301      	orrs	r1, r0
 800053c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000540:	fa1f fe8c 	uxth.w	lr, ip
 8000544:	fbb3 f0f7 	udiv	r0, r3, r7
 8000548:	fb07 3610 	mls	r6, r7, r0, r3
 800054c:	0c0b      	lsrs	r3, r1, #16
 800054e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000552:	fb00 f60e 	mul.w	r6, r0, lr
 8000556:	429e      	cmp	r6, r3
 8000558:	fa04 f402 	lsl.w	r4, r4, r2
 800055c:	d908      	bls.n	8000570 <__udivmoddi4+0x260>
 800055e:	eb1c 0303 	adds.w	r3, ip, r3
 8000562:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000566:	d22f      	bcs.n	80005c8 <__udivmoddi4+0x2b8>
 8000568:	429e      	cmp	r6, r3
 800056a:	d92d      	bls.n	80005c8 <__udivmoddi4+0x2b8>
 800056c:	3802      	subs	r0, #2
 800056e:	4463      	add	r3, ip
 8000570:	1b9b      	subs	r3, r3, r6
 8000572:	b289      	uxth	r1, r1
 8000574:	fbb3 f6f7 	udiv	r6, r3, r7
 8000578:	fb07 3316 	mls	r3, r7, r6, r3
 800057c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000580:	fb06 f30e 	mul.w	r3, r6, lr
 8000584:	428b      	cmp	r3, r1
 8000586:	d908      	bls.n	800059a <__udivmoddi4+0x28a>
 8000588:	eb1c 0101 	adds.w	r1, ip, r1
 800058c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000590:	d216      	bcs.n	80005c0 <__udivmoddi4+0x2b0>
 8000592:	428b      	cmp	r3, r1
 8000594:	d914      	bls.n	80005c0 <__udivmoddi4+0x2b0>
 8000596:	3e02      	subs	r6, #2
 8000598:	4461      	add	r1, ip
 800059a:	1ac9      	subs	r1, r1, r3
 800059c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005a0:	e738      	b.n	8000414 <__udivmoddi4+0x104>
 80005a2:	462e      	mov	r6, r5
 80005a4:	4628      	mov	r0, r5
 80005a6:	e705      	b.n	80003b4 <__udivmoddi4+0xa4>
 80005a8:	4606      	mov	r6, r0
 80005aa:	e6e3      	b.n	8000374 <__udivmoddi4+0x64>
 80005ac:	4618      	mov	r0, r3
 80005ae:	e6f8      	b.n	80003a2 <__udivmoddi4+0x92>
 80005b0:	454b      	cmp	r3, r9
 80005b2:	d2a9      	bcs.n	8000508 <__udivmoddi4+0x1f8>
 80005b4:	ebb9 0802 	subs.w	r8, r9, r2
 80005b8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005bc:	3801      	subs	r0, #1
 80005be:	e7a3      	b.n	8000508 <__udivmoddi4+0x1f8>
 80005c0:	4646      	mov	r6, r8
 80005c2:	e7ea      	b.n	800059a <__udivmoddi4+0x28a>
 80005c4:	4620      	mov	r0, r4
 80005c6:	e794      	b.n	80004f2 <__udivmoddi4+0x1e2>
 80005c8:	4640      	mov	r0, r8
 80005ca:	e7d1      	b.n	8000570 <__udivmoddi4+0x260>
 80005cc:	46d0      	mov	r8, sl
 80005ce:	e77b      	b.n	80004c8 <__udivmoddi4+0x1b8>
 80005d0:	3b02      	subs	r3, #2
 80005d2:	4461      	add	r1, ip
 80005d4:	e732      	b.n	800043c <__udivmoddi4+0x12c>
 80005d6:	4630      	mov	r0, r6
 80005d8:	e709      	b.n	80003ee <__udivmoddi4+0xde>
 80005da:	4464      	add	r4, ip
 80005dc:	3802      	subs	r0, #2
 80005de:	e742      	b.n	8000466 <__udivmoddi4+0x156>

080005e0 <__aeabi_idiv0>:
 80005e0:	4770      	bx	lr
 80005e2:	bf00      	nop

080005e4 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 80005e4:	b480      	push	{r7}
 80005e6:	b083      	sub	sp, #12
 80005e8:	af00      	add	r7, sp, #0
 80005ea:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80005ec:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80005f0:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 80005f4:	f003 0301 	and.w	r3, r3, #1
 80005f8:	2b00      	cmp	r3, #0
 80005fa:	d013      	beq.n	8000624 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80005fc:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000600:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8000604:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000608:	2b00      	cmp	r3, #0
 800060a:	d00b      	beq.n	8000624 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 800060c:	e000      	b.n	8000610 <ITM_SendChar+0x2c>
    {
      __NOP();
 800060e:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000610:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000614:	681b      	ldr	r3, [r3, #0]
 8000616:	2b00      	cmp	r3, #0
 8000618:	d0f9      	beq.n	800060e <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 800061a:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800061e:	687a      	ldr	r2, [r7, #4]
 8000620:	b2d2      	uxtb	r2, r2
 8000622:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000624:	687b      	ldr	r3, [r7, #4]
}
 8000626:	4618      	mov	r0, r3
 8000628:	370c      	adds	r7, #12
 800062a:	46bd      	mov	sp, r7
 800062c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000630:	4770      	bx	lr
	...

08000634 <vAssertCalled>:
static void MX_GPIO_Init(void);
static void MX_USART1_UART_Init(void);
/* USER CODE BEGIN PFP */

void vAssertCalled( uint32_t ulLine, const char *pcFile )
{
 8000634:	b580      	push	{r7, lr}
 8000636:	b084      	sub	sp, #16
 8000638:	af00      	add	r7, sp, #0
 800063a:	6078      	str	r0, [r7, #4]
 800063c:	6039      	str	r1, [r7, #0]
    // Print the file name and line number where the assert occurred
    printf("ASSERTION FAILED: File %s, line %lu\n", pcFile, ulLine);
 800063e:	687a      	ldr	r2, [r7, #4]
 8000640:	6839      	ldr	r1, [r7, #0]
 8000642:	4808      	ldr	r0, [pc, #32]	; (8000664 <vAssertCalled+0x30>)
 8000644:	f004 f94a 	bl	80048dc <iprintf>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 8000648:	f04f 0340 	mov.w	r3, #64	; 0x40
 800064c:	b672      	cpsid	i
 800064e:	f383 8811 	msr	BASEPRI, r3
 8000652:	f3bf 8f6f 	isb	sy
 8000656:	f3bf 8f4f 	dsb	sy
 800065a:	b662      	cpsie	i
 800065c:	60fb      	str	r3, [r7, #12]
            "	isb														\n"\
            "	dsb														\n"\
            "	cpsie i													\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 800065e:	bf00      	nop

    // You might add additional error handling or debugging code here
    taskDISABLE_INTERRUPTS();

    // Loop indefinitely or perform any necessary cleanup
    while(1)
 8000660:	e7fe      	b.n	8000660 <vAssertCalled+0x2c>
 8000662:	bf00      	nop
 8000664:	08005918 	.word	0x08005918

08000668 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	b088      	sub	sp, #32
 800066c:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */
  TaskHandle_t task1_handle;
  TaskHandle_t task2_handle;
  BaseType_t status;
  char _a[1] = {'A'};
 800066e:	2341      	movs	r3, #65	; 0x41
 8000670:	713b      	strb	r3, [r7, #4]
  char *pt_a = _a;
 8000672:	1d3b      	adds	r3, r7, #4
 8000674:	617b      	str	r3, [r7, #20]
  printf("Hello\n");
 8000676:	481b      	ldr	r0, [pc, #108]	; (80006e4 <main+0x7c>)
 8000678:	f004 f9b6 	bl	80049e8 <puts>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800067c:	f000 ff2d 	bl	80014da <HAL_Init>

  //uart1_txt_init();
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000680:	f000 f840 	bl	8000704 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000684:	f000 f8d8 	bl	8000838 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000688:	f000 f8a6 	bl	80007d8 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  status = xTaskCreate(task1_handler, "Task-1", 200, "Hello world from Task-1", 2, &task1_handle);
 800068c:	f107 030c 	add.w	r3, r7, #12
 8000690:	9301      	str	r3, [sp, #4]
 8000692:	2302      	movs	r3, #2
 8000694:	9300      	str	r3, [sp, #0]
 8000696:	4b14      	ldr	r3, [pc, #80]	; (80006e8 <main+0x80>)
 8000698:	22c8      	movs	r2, #200	; 0xc8
 800069a:	4914      	ldr	r1, [pc, #80]	; (80006ec <main+0x84>)
 800069c:	4814      	ldr	r0, [pc, #80]	; (80006f0 <main+0x88>)
 800069e:	f003 faa1 	bl	8003be4 <xTaskCreate>
 80006a2:	6138      	str	r0, [r7, #16]
  configASSERT(status == pdPASS);
 80006a4:	693b      	ldr	r3, [r7, #16]
 80006a6:	2b01      	cmp	r3, #1
 80006a8:	d003      	beq.n	80006b2 <main+0x4a>
 80006aa:	4912      	ldr	r1, [pc, #72]	; (80006f4 <main+0x8c>)
 80006ac:	207f      	movs	r0, #127	; 0x7f
 80006ae:	f7ff ffc1 	bl	8000634 <vAssertCalled>

  status = xTaskCreate(task2_handler, "Task-2", 200, "Hello world from Task-2", 2, &task2_handle);
 80006b2:	f107 0308 	add.w	r3, r7, #8
 80006b6:	9301      	str	r3, [sp, #4]
 80006b8:	2302      	movs	r3, #2
 80006ba:	9300      	str	r3, [sp, #0]
 80006bc:	4b0e      	ldr	r3, [pc, #56]	; (80006f8 <main+0x90>)
 80006be:	22c8      	movs	r2, #200	; 0xc8
 80006c0:	490e      	ldr	r1, [pc, #56]	; (80006fc <main+0x94>)
 80006c2:	480f      	ldr	r0, [pc, #60]	; (8000700 <main+0x98>)
 80006c4:	f003 fa8e 	bl	8003be4 <xTaskCreate>
 80006c8:	6138      	str	r0, [r7, #16]
  configASSERT(status == pdPASS);
 80006ca:	693b      	ldr	r3, [r7, #16]
 80006cc:	2b01      	cmp	r3, #1
 80006ce:	d003      	beq.n	80006d8 <main+0x70>
 80006d0:	4908      	ldr	r1, [pc, #32]	; (80006f4 <main+0x8c>)
 80006d2:	2082      	movs	r0, #130	; 0x82
 80006d4:	f7ff ffae 	bl	8000634 <vAssertCalled>
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  //printf("Hello from main function\n\r");
	  ITM_SendChar(*pt_a);
 80006d8:	697b      	ldr	r3, [r7, #20]
 80006da:	781b      	ldrb	r3, [r3, #0]
 80006dc:	4618      	mov	r0, r3
 80006de:	f7ff ff81 	bl	80005e4 <ITM_SendChar>
 80006e2:	e7f9      	b.n	80006d8 <main+0x70>
 80006e4:	08005940 	.word	0x08005940
 80006e8:	08005948 	.word	0x08005948
 80006ec:	08005960 	.word	0x08005960
 80006f0:	080010d5 	.word	0x080010d5
 80006f4:	08005968 	.word	0x08005968
 80006f8:	0800597c 	.word	0x0800597c
 80006fc:	08005994 	.word	0x08005994
 8000700:	080010e5 	.word	0x080010e5

08000704 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	b094      	sub	sp, #80	; 0x50
 8000708:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800070a:	f107 031c 	add.w	r3, r7, #28
 800070e:	2234      	movs	r2, #52	; 0x34
 8000710:	2100      	movs	r1, #0
 8000712:	4618      	mov	r0, r3
 8000714:	f004 f8da 	bl	80048cc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000718:	f107 0308 	add.w	r3, r7, #8
 800071c:	2200      	movs	r2, #0
 800071e:	601a      	str	r2, [r3, #0]
 8000720:	605a      	str	r2, [r3, #4]
 8000722:	609a      	str	r2, [r3, #8]
 8000724:	60da      	str	r2, [r3, #12]
 8000726:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000728:	4b29      	ldr	r3, [pc, #164]	; (80007d0 <SystemClock_Config+0xcc>)
 800072a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800072c:	4a28      	ldr	r2, [pc, #160]	; (80007d0 <SystemClock_Config+0xcc>)
 800072e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000732:	6413      	str	r3, [r2, #64]	; 0x40
 8000734:	4b26      	ldr	r3, [pc, #152]	; (80007d0 <SystemClock_Config+0xcc>)
 8000736:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000738:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800073c:	607b      	str	r3, [r7, #4]
 800073e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000740:	4b24      	ldr	r3, [pc, #144]	; (80007d4 <SystemClock_Config+0xd0>)
 8000742:	681b      	ldr	r3, [r3, #0]
 8000744:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000748:	4a22      	ldr	r2, [pc, #136]	; (80007d4 <SystemClock_Config+0xd0>)
 800074a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800074e:	6013      	str	r3, [r2, #0]
 8000750:	4b20      	ldr	r3, [pc, #128]	; (80007d4 <SystemClock_Config+0xd0>)
 8000752:	681b      	ldr	r3, [r3, #0]
 8000754:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000758:	603b      	str	r3, [r7, #0]
 800075a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800075c:	2302      	movs	r3, #2
 800075e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000760:	2301      	movs	r3, #1
 8000762:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000764:	2310      	movs	r3, #16
 8000766:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000768:	2302      	movs	r3, #2
 800076a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800076c:	2300      	movs	r3, #0
 800076e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000770:	2308      	movs	r3, #8
 8000772:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 192;
 8000774:	23c0      	movs	r3, #192	; 0xc0
 8000776:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000778:	2304      	movs	r3, #4
 800077a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800077c:	2304      	movs	r3, #4
 800077e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000780:	2302      	movs	r3, #2
 8000782:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000784:	f107 031c 	add.w	r3, r7, #28
 8000788:	4618      	mov	r0, r3
 800078a:	f001 f97b 	bl	8001a84 <HAL_RCC_OscConfig>
 800078e:	4603      	mov	r3, r0
 8000790:	2b00      	cmp	r3, #0
 8000792:	d001      	beq.n	8000798 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000794:	f000 fcc0 	bl	8001118 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000798:	230f      	movs	r3, #15
 800079a:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800079c:	2302      	movs	r3, #2
 800079e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007a0:	2300      	movs	r3, #0
 80007a2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80007a4:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80007a8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80007aa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007ae:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80007b0:	f107 0308 	add.w	r3, r7, #8
 80007b4:	2103      	movs	r1, #3
 80007b6:	4618      	mov	r0, r3
 80007b8:	f001 fc12 	bl	8001fe0 <HAL_RCC_ClockConfig>
 80007bc:	4603      	mov	r3, r0
 80007be:	2b00      	cmp	r3, #0
 80007c0:	d001      	beq.n	80007c6 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80007c2:	f000 fca9 	bl	8001118 <Error_Handler>
  }
}
 80007c6:	bf00      	nop
 80007c8:	3750      	adds	r7, #80	; 0x50
 80007ca:	46bd      	mov	sp, r7
 80007cc:	bd80      	pop	{r7, pc}
 80007ce:	bf00      	nop
 80007d0:	40023800 	.word	0x40023800
 80007d4:	40007000 	.word	0x40007000

080007d8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80007dc:	4b14      	ldr	r3, [pc, #80]	; (8000830 <MX_USART1_UART_Init+0x58>)
 80007de:	4a15      	ldr	r2, [pc, #84]	; (8000834 <MX_USART1_UART_Init+0x5c>)
 80007e0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80007e2:	4b13      	ldr	r3, [pc, #76]	; (8000830 <MX_USART1_UART_Init+0x58>)
 80007e4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80007e8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80007ea:	4b11      	ldr	r3, [pc, #68]	; (8000830 <MX_USART1_UART_Init+0x58>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80007f0:	4b0f      	ldr	r3, [pc, #60]	; (8000830 <MX_USART1_UART_Init+0x58>)
 80007f2:	2200      	movs	r2, #0
 80007f4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80007f6:	4b0e      	ldr	r3, [pc, #56]	; (8000830 <MX_USART1_UART_Init+0x58>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80007fc:	4b0c      	ldr	r3, [pc, #48]	; (8000830 <MX_USART1_UART_Init+0x58>)
 80007fe:	220c      	movs	r2, #12
 8000800:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000802:	4b0b      	ldr	r3, [pc, #44]	; (8000830 <MX_USART1_UART_Init+0x58>)
 8000804:	2200      	movs	r2, #0
 8000806:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000808:	4b09      	ldr	r3, [pc, #36]	; (8000830 <MX_USART1_UART_Init+0x58>)
 800080a:	2200      	movs	r2, #0
 800080c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800080e:	4b08      	ldr	r3, [pc, #32]	; (8000830 <MX_USART1_UART_Init+0x58>)
 8000810:	2200      	movs	r2, #0
 8000812:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000814:	4b06      	ldr	r3, [pc, #24]	; (8000830 <MX_USART1_UART_Init+0x58>)
 8000816:	2200      	movs	r2, #0
 8000818:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800081a:	4805      	ldr	r0, [pc, #20]	; (8000830 <MX_USART1_UART_Init+0x58>)
 800081c:	f002 fd00 	bl	8003220 <HAL_UART_Init>
 8000820:	4603      	mov	r3, r0
 8000822:	2b00      	cmp	r3, #0
 8000824:	d001      	beq.n	800082a <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000826:	f000 fc77 	bl	8001118 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800082a:	bf00      	nop
 800082c:	bd80      	pop	{r7, pc}
 800082e:	bf00      	nop
 8000830:	20000090 	.word	0x20000090
 8000834:	40011000 	.word	0x40011000

08000838 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	b090      	sub	sp, #64	; 0x40
 800083c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800083e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000842:	2200      	movs	r2, #0
 8000844:	601a      	str	r2, [r3, #0]
 8000846:	605a      	str	r2, [r3, #4]
 8000848:	609a      	str	r2, [r3, #8]
 800084a:	60da      	str	r2, [r3, #12]
 800084c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800084e:	4bac      	ldr	r3, [pc, #688]	; (8000b00 <MX_GPIO_Init+0x2c8>)
 8000850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000852:	4aab      	ldr	r2, [pc, #684]	; (8000b00 <MX_GPIO_Init+0x2c8>)
 8000854:	f043 0310 	orr.w	r3, r3, #16
 8000858:	6313      	str	r3, [r2, #48]	; 0x30
 800085a:	4ba9      	ldr	r3, [pc, #676]	; (8000b00 <MX_GPIO_Init+0x2c8>)
 800085c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800085e:	f003 0310 	and.w	r3, r3, #16
 8000862:	62bb      	str	r3, [r7, #40]	; 0x28
 8000864:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000866:	4ba6      	ldr	r3, [pc, #664]	; (8000b00 <MX_GPIO_Init+0x2c8>)
 8000868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800086a:	4aa5      	ldr	r2, [pc, #660]	; (8000b00 <MX_GPIO_Init+0x2c8>)
 800086c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000870:	6313      	str	r3, [r2, #48]	; 0x30
 8000872:	4ba3      	ldr	r3, [pc, #652]	; (8000b00 <MX_GPIO_Init+0x2c8>)
 8000874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000876:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800087a:	627b      	str	r3, [r7, #36]	; 0x24
 800087c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800087e:	4ba0      	ldr	r3, [pc, #640]	; (8000b00 <MX_GPIO_Init+0x2c8>)
 8000880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000882:	4a9f      	ldr	r2, [pc, #636]	; (8000b00 <MX_GPIO_Init+0x2c8>)
 8000884:	f043 0302 	orr.w	r3, r3, #2
 8000888:	6313      	str	r3, [r2, #48]	; 0x30
 800088a:	4b9d      	ldr	r3, [pc, #628]	; (8000b00 <MX_GPIO_Init+0x2c8>)
 800088c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800088e:	f003 0302 	and.w	r3, r3, #2
 8000892:	623b      	str	r3, [r7, #32]
 8000894:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000896:	4b9a      	ldr	r3, [pc, #616]	; (8000b00 <MX_GPIO_Init+0x2c8>)
 8000898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800089a:	4a99      	ldr	r2, [pc, #612]	; (8000b00 <MX_GPIO_Init+0x2c8>)
 800089c:	f043 0308 	orr.w	r3, r3, #8
 80008a0:	6313      	str	r3, [r2, #48]	; 0x30
 80008a2:	4b97      	ldr	r3, [pc, #604]	; (8000b00 <MX_GPIO_Init+0x2c8>)
 80008a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008a6:	f003 0308 	and.w	r3, r3, #8
 80008aa:	61fb      	str	r3, [r7, #28]
 80008ac:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008ae:	4b94      	ldr	r3, [pc, #592]	; (8000b00 <MX_GPIO_Init+0x2c8>)
 80008b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008b2:	4a93      	ldr	r2, [pc, #588]	; (8000b00 <MX_GPIO_Init+0x2c8>)
 80008b4:	f043 0304 	orr.w	r3, r3, #4
 80008b8:	6313      	str	r3, [r2, #48]	; 0x30
 80008ba:	4b91      	ldr	r3, [pc, #580]	; (8000b00 <MX_GPIO_Init+0x2c8>)
 80008bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008be:	f003 0304 	and.w	r3, r3, #4
 80008c2:	61bb      	str	r3, [r7, #24]
 80008c4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008c6:	4b8e      	ldr	r3, [pc, #568]	; (8000b00 <MX_GPIO_Init+0x2c8>)
 80008c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ca:	4a8d      	ldr	r2, [pc, #564]	; (8000b00 <MX_GPIO_Init+0x2c8>)
 80008cc:	f043 0301 	orr.w	r3, r3, #1
 80008d0:	6313      	str	r3, [r2, #48]	; 0x30
 80008d2:	4b8b      	ldr	r3, [pc, #556]	; (8000b00 <MX_GPIO_Init+0x2c8>)
 80008d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008d6:	f003 0301 	and.w	r3, r3, #1
 80008da:	617b      	str	r3, [r7, #20]
 80008dc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 80008de:	4b88      	ldr	r3, [pc, #544]	; (8000b00 <MX_GPIO_Init+0x2c8>)
 80008e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008e2:	4a87      	ldr	r2, [pc, #540]	; (8000b00 <MX_GPIO_Init+0x2c8>)
 80008e4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80008e8:	6313      	str	r3, [r2, #48]	; 0x30
 80008ea:	4b85      	ldr	r3, [pc, #532]	; (8000b00 <MX_GPIO_Init+0x2c8>)
 80008ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ee:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80008f2:	613b      	str	r3, [r7, #16]
 80008f4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 80008f6:	4b82      	ldr	r3, [pc, #520]	; (8000b00 <MX_GPIO_Init+0x2c8>)
 80008f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008fa:	4a81      	ldr	r2, [pc, #516]	; (8000b00 <MX_GPIO_Init+0x2c8>)
 80008fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000900:	6313      	str	r3, [r2, #48]	; 0x30
 8000902:	4b7f      	ldr	r3, [pc, #508]	; (8000b00 <MX_GPIO_Init+0x2c8>)
 8000904:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000906:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800090a:	60fb      	str	r3, [r7, #12]
 800090c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 800090e:	4b7c      	ldr	r3, [pc, #496]	; (8000b00 <MX_GPIO_Init+0x2c8>)
 8000910:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000912:	4a7b      	ldr	r2, [pc, #492]	; (8000b00 <MX_GPIO_Init+0x2c8>)
 8000914:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000918:	6313      	str	r3, [r2, #48]	; 0x30
 800091a:	4b79      	ldr	r3, [pc, #484]	; (8000b00 <MX_GPIO_Init+0x2c8>)
 800091c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800091e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000922:	60bb      	str	r3, [r7, #8]
 8000924:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000926:	4b76      	ldr	r3, [pc, #472]	; (8000b00 <MX_GPIO_Init+0x2c8>)
 8000928:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800092a:	4a75      	ldr	r2, [pc, #468]	; (8000b00 <MX_GPIO_Init+0x2c8>)
 800092c:	f043 0320 	orr.w	r3, r3, #32
 8000930:	6313      	str	r3, [r2, #48]	; 0x30
 8000932:	4b73      	ldr	r3, [pc, #460]	; (8000b00 <MX_GPIO_Init+0x2c8>)
 8000934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000936:	f003 0320 	and.w	r3, r3, #32
 800093a:	607b      	str	r3, [r7, #4]
 800093c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800093e:	4b70      	ldr	r3, [pc, #448]	; (8000b00 <MX_GPIO_Init+0x2c8>)
 8000940:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000942:	4a6f      	ldr	r2, [pc, #444]	; (8000b00 <MX_GPIO_Init+0x2c8>)
 8000944:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000948:	6313      	str	r3, [r2, #48]	; 0x30
 800094a:	4b6d      	ldr	r3, [pc, #436]	; (8000b00 <MX_GPIO_Init+0x2c8>)
 800094c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800094e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000952:	603b      	str	r3, [r7, #0]
 8000954:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOJ, LD_USER1_Pin|LD_USER2_Pin, GPIO_PIN_RESET);
 8000956:	2200      	movs	r2, #0
 8000958:	f242 0120 	movw	r1, #8224	; 0x2020
 800095c:	4869      	ldr	r0, [pc, #420]	; (8000b04 <MX_GPIO_Init+0x2cc>)
 800095e:	f001 f877 	bl	8001a50 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : SAI1_FSA_Pin SAI1_SDB_Pin SAI1_SCKA_Pin SAI1_SDA_Pin */
  GPIO_InitStruct.Pin = SAI1_FSA_Pin|SAI1_SDB_Pin|SAI1_SCKA_Pin|SAI1_SDA_Pin;
 8000962:	2378      	movs	r3, #120	; 0x78
 8000964:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000966:	2302      	movs	r3, #2
 8000968:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800096a:	2300      	movs	r3, #0
 800096c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800096e:	2300      	movs	r3, #0
 8000970:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 8000972:	2306      	movs	r3, #6
 8000974:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000976:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800097a:	4619      	mov	r1, r3
 800097c:	4862      	ldr	r0, [pc, #392]	; (8000b08 <MX_GPIO_Init+0x2d0>)
 800097e:	f000 febb 	bl	80016f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : QSPI_D2_Pin */
  GPIO_InitStruct.Pin = QSPI_D2_Pin;
 8000982:	2304      	movs	r3, #4
 8000984:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000986:	2302      	movs	r3, #2
 8000988:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800098a:	2300      	movs	r3, #0
 800098c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800098e:	2303      	movs	r3, #3
 8000990:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8000992:	2309      	movs	r3, #9
 8000994:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(QSPI_D2_GPIO_Port, &GPIO_InitStruct);
 8000996:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800099a:	4619      	mov	r1, r3
 800099c:	485a      	ldr	r0, [pc, #360]	; (8000b08 <MX_GPIO_Init+0x2d0>)
 800099e:	f000 feab 	bl	80016f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TXD1_Pin RMII_TXD0_Pin RMII_TX_EN_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin|RMII_TXD0_Pin|RMII_TX_EN_Pin;
 80009a2:	f44f 43d0 	mov.w	r3, #26624	; 0x6800
 80009a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009a8:	2302      	movs	r3, #2
 80009aa:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ac:	2300      	movs	r3, #0
 80009ae:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009b0:	2303      	movs	r3, #3
 80009b2:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80009b4:	230b      	movs	r3, #11
 80009b6:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80009b8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80009bc:	4619      	mov	r1, r3
 80009be:	4853      	ldr	r0, [pc, #332]	; (8000b0c <MX_GPIO_Init+0x2d4>)
 80009c0:	f000 fe9a 	bl	80016f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_NBL1_Pin FMC_NBL0_Pin FMC_D5_Pin FMC_D6_Pin
                           FMC_D8_Pin FMC_D11_Pin FMC_D4_Pin FMC_D7_Pin
                           FMC_D9_Pin FMC_D12_Pin FMC_D10_Pin */
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|FMC_D5_Pin|FMC_D6_Pin
 80009c4:	f64f 7383 	movw	r3, #65411	; 0xff83
 80009c8:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |FMC_D8_Pin|FMC_D11_Pin|FMC_D4_Pin|FMC_D7_Pin
                          |FMC_D9_Pin|FMC_D12_Pin|FMC_D10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009ca:	2302      	movs	r3, #2
 80009cc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ce:	2300      	movs	r3, #0
 80009d0:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009d2:	2303      	movs	r3, #3
 80009d4:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80009d6:	230c      	movs	r3, #12
 80009d8:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80009da:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80009de:	4619      	mov	r1, r3
 80009e0:	4849      	ldr	r0, [pc, #292]	; (8000b08 <MX_GPIO_Init+0x2d0>)
 80009e2:	f000 fe89 	bl	80016f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_SCL_D15_Pin ARDUINO_SDA_D14_Pin */
  GPIO_InitStruct.Pin = ARDUINO_SCL_D15_Pin|ARDUINO_SDA_D14_Pin;
 80009e6:	f44f 7340 	mov.w	r3, #768	; 0x300
 80009ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80009ec:	2312      	movs	r3, #18
 80009ee:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f0:	2300      	movs	r3, #0
 80009f2:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009f4:	2300      	movs	r3, #0
 80009f6:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80009f8:	2304      	movs	r3, #4
 80009fa:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009fc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000a00:	4619      	mov	r1, r3
 8000a02:	4843      	ldr	r0, [pc, #268]	; (8000b10 <MX_GPIO_Init+0x2d8>)
 8000a04:	f000 fe78 	bl	80016f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_D7_Pin ULPI_D6_Pin ULPI_D5_Pin ULPI_D3_Pin
                           ULPI_D2_Pin ULPI_D1_Pin ULPI_D4_Pin */
  GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D6_Pin|ULPI_D5_Pin|ULPI_D3_Pin
 8000a08:	f643 4323 	movw	r3, #15395	; 0x3c23
 8000a0c:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |ULPI_D2_Pin|ULPI_D1_Pin|ULPI_D4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a0e:	2302      	movs	r3, #2
 8000a10:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a12:	2300      	movs	r3, #0
 8000a14:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a16:	2303      	movs	r3, #3
 8000a18:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8000a1a:	230a      	movs	r3, #10
 8000a1c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a1e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000a22:	4619      	mov	r1, r3
 8000a24:	483a      	ldr	r0, [pc, #232]	; (8000b10 <MX_GPIO_Init+0x2d8>)
 8000a26:	f000 fe67 	bl	80016f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : uSD_D3_Pin uSD_D2_Pin */
  GPIO_InitStruct.Pin = uSD_D3_Pin|uSD_D2_Pin;
 8000a2a:	2318      	movs	r3, #24
 8000a2c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a2e:	2302      	movs	r3, #2
 8000a30:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a32:	2300      	movs	r3, #0
 8000a34:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a36:	2303      	movs	r3, #3
 8000a38:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SDMMC2;
 8000a3a:	230a      	movs	r3, #10
 8000a3c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a3e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000a42:	4619      	mov	r1, r3
 8000a44:	4832      	ldr	r0, [pc, #200]	; (8000b10 <MX_GPIO_Init+0x2d8>)
 8000a46:	f000 fe57 	bl	80016f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : uSD_CMD_Pin uSD_CLK_Pin */
  GPIO_InitStruct.Pin = uSD_CMD_Pin|uSD_CLK_Pin;
 8000a4a:	23c0      	movs	r3, #192	; 0xc0
 8000a4c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a4e:	2302      	movs	r3, #2
 8000a50:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a52:	2300      	movs	r3, #0
 8000a54:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a56:	2303      	movs	r3, #3
 8000a58:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_SDMMC2;
 8000a5a:	230b      	movs	r3, #11
 8000a5c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a5e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000a62:	4619      	mov	r1, r3
 8000a64:	482b      	ldr	r0, [pc, #172]	; (8000b14 <MX_GPIO_Init+0x2dc>)
 8000a66:	f000 fe47 	bl	80016f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : WIFI_RX_Pin */
  GPIO_InitStruct.Pin = WIFI_RX_Pin;
 8000a6a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a6e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a70:	2302      	movs	r3, #2
 8000a72:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a74:	2300      	movs	r3, #0
 8000a76:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a78:	2303      	movs	r3, #3
 8000a7a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8000a7c:	2308      	movs	r3, #8
 8000a7e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(WIFI_RX_GPIO_Port, &GPIO_InitStruct);
 8000a80:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000a84:	4619      	mov	r1, r3
 8000a86:	4824      	ldr	r0, [pc, #144]	; (8000b18 <MX_GPIO_Init+0x2e0>)
 8000a88:	f000 fe36 	bl	80016f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : CEC_Pin */
  GPIO_InitStruct.Pin = CEC_Pin;
 8000a8c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000a90:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a92:	2312      	movs	r3, #18
 8000a94:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a96:	2300      	movs	r3, #0
 8000a98:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF4_CEC;
 8000a9e:	2304      	movs	r3, #4
 8000aa0:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(CEC_GPIO_Port, &GPIO_InitStruct);
 8000aa2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000aa6:	4619      	mov	r1, r3
 8000aa8:	481c      	ldr	r0, [pc, #112]	; (8000b1c <MX_GPIO_Init+0x2e4>)
 8000aaa:	f000 fe25 	bl	80016f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : AUDIO_SDA_Pin */
  GPIO_InitStruct.Pin = AUDIO_SDA_Pin;
 8000aae:	2380      	movs	r3, #128	; 0x80
 8000ab0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000ab2:	2312      	movs	r3, #18
 8000ab4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000aba:	2303      	movs	r3, #3
 8000abc:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_I2C4;
 8000abe:	230b      	movs	r3, #11
 8000ac0:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(AUDIO_SDA_GPIO_Port, &GPIO_InitStruct);
 8000ac2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000ac6:	4619      	mov	r1, r3
 8000ac8:	4811      	ldr	r0, [pc, #68]	; (8000b10 <MX_GPIO_Init+0x2d8>)
 8000aca:	f000 fe15 	bl	80016f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : QSPI_NCS_Pin */
  GPIO_InitStruct.Pin = QSPI_NCS_Pin;
 8000ace:	2340      	movs	r3, #64	; 0x40
 8000ad0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ad2:	2302      	movs	r3, #2
 8000ad4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ada:	2303      	movs	r3, #3
 8000adc:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8000ade:	230a      	movs	r3, #10
 8000ae0:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(QSPI_NCS_GPIO_Port, &GPIO_InitStruct);
 8000ae2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000ae6:	4619      	mov	r1, r3
 8000ae8:	4809      	ldr	r0, [pc, #36]	; (8000b10 <MX_GPIO_Init+0x2d8>)
 8000aea:	f000 fe05 	bl	80016f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_SDNCAS_Pin FMC_SDCLK_Pin FMC_A11_Pin FMC_A12_Pin
                           FMC_A10_Pin FMC_BA1_Pin FMC_BA0_Pin */
  GPIO_InitStruct.Pin = FMC_SDNCAS_Pin|FMC_SDCLK_Pin|FMC_A11_Pin|FMC_A12_Pin
 8000aee:	f248 1337 	movw	r3, #33079	; 0x8137
 8000af2:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |FMC_A10_Pin|FMC_BA1_Pin|FMC_BA0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000af4:	2302      	movs	r3, #2
 8000af6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af8:	2300      	movs	r3, #0
 8000afa:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000afc:	2303      	movs	r3, #3
 8000afe:	e00f      	b.n	8000b20 <MX_GPIO_Init+0x2e8>
 8000b00:	40023800 	.word	0x40023800
 8000b04:	40022400 	.word	0x40022400
 8000b08:	40021000 	.word	0x40021000
 8000b0c:	40021800 	.word	0x40021800
 8000b10:	40020400 	.word	0x40020400
 8000b14:	40020c00 	.word	0x40020c00
 8000b18:	40020800 	.word	0x40020800
 8000b1c:	40020000 	.word	0x40020000
 8000b20:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000b22:	230c      	movs	r3, #12
 8000b24:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000b26:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000b2a:	4619      	mov	r1, r3
 8000b2c:	48bc      	ldr	r0, [pc, #752]	; (8000e20 <MX_GPIO_Init+0x5e8>)
 8000b2e:	f000 fde3 	bl	80016f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD_USER1_Pin LD_USER2_Pin */
  GPIO_InitStruct.Pin = LD_USER1_Pin|LD_USER2_Pin;
 8000b32:	f242 0320 	movw	r3, #8224	; 0x2020
 8000b36:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b38:	2301      	movs	r3, #1
 8000b3a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b40:	2300      	movs	r3, #0
 8000b42:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8000b44:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000b48:	4619      	mov	r1, r3
 8000b4a:	48b6      	ldr	r0, [pc, #728]	; (8000e24 <MX_GPIO_Init+0x5ec>)
 8000b4c:	f000 fdd4 	bl	80016f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : Audio_INT_Pin WIFI_RST_Pin DSI_RESET_Pin ARD_D8_Pin
                           ARD_D7_Pin ARD_D4_Pin ARD_D2_Pin */
  GPIO_InitStruct.Pin = Audio_INT_Pin|WIFI_RST_Pin|DSI_RESET_Pin|ARD_D8_Pin
 8000b50:	f24d 031b 	movw	r3, #53275	; 0xd01b
 8000b54:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |ARD_D7_Pin|ARD_D4_Pin|ARD_D2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b56:	2300      	movs	r3, #0
 8000b58:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8000b5e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000b62:	4619      	mov	r1, r3
 8000b64:	48af      	ldr	r0, [pc, #700]	; (8000e24 <MX_GPIO_Init+0x5ec>)
 8000b66:	f000 fdc7 	bl	80016f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_D2_Pin FMC_D3_Pin FMC_D1_Pin FMC_D15_Pin
                           FMC_D0_Pin FMC_D14_Pin FMC_D13_Pin */
  GPIO_InitStruct.Pin = FMC_D2_Pin|FMC_D3_Pin|FMC_D1_Pin|FMC_D15_Pin
 8000b6a:	f24c 7303 	movw	r3, #50947	; 0xc703
 8000b6e:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |FMC_D0_Pin|FMC_D14_Pin|FMC_D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b70:	2302      	movs	r3, #2
 8000b72:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b74:	2300      	movs	r3, #0
 8000b76:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b78:	2303      	movs	r3, #3
 8000b7a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000b7c:	230c      	movs	r3, #12
 8000b7e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b80:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000b84:	4619      	mov	r1, r3
 8000b86:	48a8      	ldr	r0, [pc, #672]	; (8000e28 <MX_GPIO_Init+0x5f0>)
 8000b88:	f000 fdb6 	bl	80016f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : DFSDM_DATIN5_Pin DFSDM_DATIN1_Pin */
  GPIO_InitStruct.Pin = DFSDM_DATIN5_Pin|DFSDM_DATIN1_Pin;
 8000b8c:	f640 0308 	movw	r3, #2056	; 0x808
 8000b90:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b92:	2302      	movs	r3, #2
 8000b94:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b96:	2300      	movs	r3, #0
 8000b98:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF3_DFSDM1;
 8000b9e:	2303      	movs	r3, #3
 8000ba0:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ba2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000ba6:	4619      	mov	r1, r3
 8000ba8:	48a0      	ldr	r0, [pc, #640]	; (8000e2c <MX_GPIO_Init+0x5f4>)
 8000baa:	f000 fda5 	bl	80016f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : QSPI_D1_Pin QSPI_D0_Pin */
  GPIO_InitStruct.Pin = QSPI_D1_Pin|QSPI_D0_Pin;
 8000bae:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000bb2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bb4:	2302      	movs	r3, #2
 8000bb6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb8:	2300      	movs	r3, #0
 8000bba:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bbc:	2303      	movs	r3, #3
 8000bbe:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8000bc0:	2309      	movs	r3, #9
 8000bc2:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000bc4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000bc8:	4619      	mov	r1, r3
 8000bca:	4898      	ldr	r0, [pc, #608]	; (8000e2c <MX_GPIO_Init+0x5f4>)
 8000bcc:	f000 fd94 	bl	80016f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D13_SCK_Pin */
  GPIO_InitStruct.Pin = ARD_D13_SCK_Pin;
 8000bd0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000bd4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bd6:	2302      	movs	r3, #2
 8000bd8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bda:	2300      	movs	r3, #0
 8000bdc:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bde:	2300      	movs	r3, #0
 8000be0:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000be2:	2305      	movs	r3, #5
 8000be4:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARD_D13_SCK_GPIO_Port, &GPIO_InitStruct);
 8000be6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000bea:	4619      	mov	r1, r3
 8000bec:	4890      	ldr	r0, [pc, #576]	; (8000e30 <MX_GPIO_Init+0x5f8>)
 8000bee:	f000 fd83 	bl	80016f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : NC4_Pin NC5_Pin uSD_Detect_Pin LCD_BL_CTRL_Pin */
  GPIO_InitStruct.Pin = NC4_Pin|NC5_Pin|uSD_Detect_Pin|LCD_BL_CTRL_Pin;
 8000bf2:	f44f 4351 	mov.w	r3, #53504	; 0xd100
 8000bf6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000c00:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000c04:	4619      	mov	r1, r3
 8000c06:	488b      	ldr	r0, [pc, #556]	; (8000e34 <MX_GPIO_Init+0x5fc>)
 8000c08:	f000 fd76 	bl	80016f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_NBL2_Pin D27_Pin D26_Pin FMC_NBL3_Pin
                           D29_Pin D31_Pin D28_Pin D25_Pin
                           D30_Pin D24_Pin */
  GPIO_InitStruct.Pin = FMC_NBL2_Pin|D27_Pin|D26_Pin|FMC_NBL3_Pin
 8000c0c:	f240 63ff 	movw	r3, #1791	; 0x6ff
 8000c10:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |D29_Pin|D31_Pin|D28_Pin|D25_Pin
                          |D30_Pin|D24_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c12:	2302      	movs	r3, #2
 8000c14:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c16:	2300      	movs	r3, #0
 8000c18:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c1a:	2303      	movs	r3, #3
 8000c1c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000c1e:	230c      	movs	r3, #12
 8000c20:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000c22:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000c26:	4619      	mov	r1, r3
 8000c28:	4882      	ldr	r0, [pc, #520]	; (8000e34 <MX_GPIO_Init+0x5fc>)
 8000c2a:	f000 fd65 	bl	80016f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : NC3_Pin NC2_Pin NC1_Pin NC8_Pin
                           NC7_Pin */
  GPIO_InitStruct.Pin = NC3_Pin|NC2_Pin|NC1_Pin|NC8_Pin
 8000c2e:	23f8      	movs	r3, #248	; 0xf8
 8000c30:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |NC7_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c32:	2300      	movs	r3, #0
 8000c34:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c36:	2300      	movs	r3, #0
 8000c38:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8000c3a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000c3e:	4619      	mov	r1, r3
 8000c40:	487d      	ldr	r0, [pc, #500]	; (8000e38 <MX_GPIO_Init+0x600>)
 8000c42:	f000 fd59 	bl	80016f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPDIF_RX_Pin */
  GPIO_InitStruct.Pin = SPDIF_RX_Pin;
 8000c46:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c4a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c4c:	2302      	movs	r3, #2
 8000c4e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c50:	2300      	movs	r3, #0
 8000c52:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c54:	2300      	movs	r3, #0
 8000c56:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF7_SPDIFRX;
 8000c58:	2307      	movs	r3, #7
 8000c5a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SPDIF_RX_GPIO_Port, &GPIO_InitStruct);
 8000c5c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000c60:	4619      	mov	r1, r3
 8000c62:	486f      	ldr	r0, [pc, #444]	; (8000e20 <MX_GPIO_Init+0x5e8>)
 8000c64:	f000 fd48 	bl	80016f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : uSD_D1_Pin uSD_D0_Pin */
  GPIO_InitStruct.Pin = uSD_D1_Pin|uSD_D0_Pin;
 8000c68:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000c6c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c6e:	2302      	movs	r3, #2
 8000c70:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c72:	2300      	movs	r3, #0
 8000c74:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c76:	2303      	movs	r3, #3
 8000c78:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_SDMMC2;
 8000c7a:	230b      	movs	r3, #11
 8000c7c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000c7e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000c82:	4619      	mov	r1, r3
 8000c84:	4866      	ldr	r0, [pc, #408]	; (8000e20 <MX_GPIO_Init+0x5e8>)
 8000c86:	f000 fd37 	bl	80016f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_RXER_Pin OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = RMII_RXER_Pin|OTG_FS_OverCurrent_Pin;
 8000c8a:	2330      	movs	r3, #48	; 0x30
 8000c8c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c8e:	2300      	movs	r3, #0
 8000c90:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c92:	2300      	movs	r3, #0
 8000c94:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c96:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000c9a:	4619      	mov	r1, r3
 8000c9c:	4862      	ldr	r0, [pc, #392]	; (8000e28 <MX_GPIO_Init+0x5f0>)
 8000c9e:	f000 fd2b 	bl	80016f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : DFSDM_CKOUT_Pin */
  GPIO_InitStruct.Pin = DFSDM_CKOUT_Pin;
 8000ca2:	2308      	movs	r3, #8
 8000ca4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ca6:	2302      	movs	r3, #2
 8000ca8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000caa:	2300      	movs	r3, #0
 8000cac:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cae:	2300      	movs	r3, #0
 8000cb0:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF3_DFSDM1;
 8000cb2:	2303      	movs	r3, #3
 8000cb4:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(DFSDM_CKOUT_GPIO_Port, &GPIO_InitStruct);
 8000cb6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000cba:	4619      	mov	r1, r3
 8000cbc:	485a      	ldr	r0, [pc, #360]	; (8000e28 <MX_GPIO_Init+0x5f0>)
 8000cbe:	f000 fd1b 	bl	80016f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI2_NSS_Pin */
  GPIO_InitStruct.Pin = SPI2_NSS_Pin;
 8000cc2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000cc6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cc8:	2302      	movs	r3, #2
 8000cca:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ccc:	2300      	movs	r3, #0
 8000cce:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cd0:	2303      	movs	r3, #3
 8000cd2:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000cd4:	2305      	movs	r3, #5
 8000cd6:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SPI2_NSS_GPIO_Port, &GPIO_InitStruct);
 8000cd8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000cdc:	4619      	mov	r1, r3
 8000cde:	4854      	ldr	r0, [pc, #336]	; (8000e30 <MX_GPIO_Init+0x5f8>)
 8000ce0:	f000 fd0a 	bl	80016f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000ce4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ce8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cea:	2302      	movs	r3, #2
 8000cec:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cee:	2300      	movs	r3, #0
 8000cf0:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000cf6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000cfa:	4619      	mov	r1, r3
 8000cfc:	484b      	ldr	r0, [pc, #300]	; (8000e2c <MX_GPIO_Init+0x5f4>)
 8000cfe:	f000 fcfb 	bl	80016f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : FMC_A0_Pin FMC_A1_Pin FMC_A2_Pin FMC_A3_Pin
                           FMC_A4_Pin FMC_A5_Pin FMC_A6_Pin FMC_A9_Pin
                           FMC_A7_Pin FMC_A8_Pin FMC_SDNRAS_Pin */
  GPIO_InitStruct.Pin = FMC_A0_Pin|FMC_A1_Pin|FMC_A2_Pin|FMC_A3_Pin
 8000d02:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8000d06:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |FMC_A4_Pin|FMC_A5_Pin|FMC_A6_Pin|FMC_A9_Pin
                          |FMC_A7_Pin|FMC_A8_Pin|FMC_SDNRAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d08:	2302      	movs	r3, #2
 8000d0a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d10:	2303      	movs	r3, #3
 8000d12:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000d14:	230c      	movs	r3, #12
 8000d16:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000d18:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000d1c:	4619      	mov	r1, r3
 8000d1e:	4847      	ldr	r0, [pc, #284]	; (8000e3c <MX_GPIO_Init+0x604>)
 8000d20:	f000 fcea 	bl	80016f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : WIFI_TX_Pin */
  GPIO_InitStruct.Pin = WIFI_TX_Pin;
 8000d24:	2304      	movs	r3, #4
 8000d26:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d28:	2302      	movs	r3, #2
 8000d2a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d30:	2303      	movs	r3, #3
 8000d32:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8000d34:	2308      	movs	r3, #8
 8000d36:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(WIFI_TX_GPIO_Port, &GPIO_InitStruct);
 8000d38:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000d3c:	4619      	mov	r1, r3
 8000d3e:	483a      	ldr	r0, [pc, #232]	; (8000e28 <MX_GPIO_Init+0x5f0>)
 8000d40:	f000 fcda 	bl	80016f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : D23_Pin D21_Pin D22_Pin FMC_SDNME_Pin
                           FMC_SDNE0_Pin FMC_SDCKE0_Pin D20_Pin FMC_D_7_Pin
                           FMC_D19_Pin FMC_D16_Pin FMC_D18_Pin */
  GPIO_InitStruct.Pin = D23_Pin|D21_Pin|D22_Pin|FMC_SDNME_Pin
 8000d44:	f64f 732c 	movw	r3, #65324	; 0xff2c
 8000d48:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |FMC_SDNE0_Pin|FMC_SDCKE0_Pin|D20_Pin|FMC_D_7_Pin
                          |FMC_D19_Pin|FMC_D16_Pin|FMC_D18_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d4a:	2302      	movs	r3, #2
 8000d4c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d4e:	2300      	movs	r3, #0
 8000d50:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d52:	2303      	movs	r3, #3
 8000d54:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000d56:	230c      	movs	r3, #12
 8000d58:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000d5a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000d5e:	4619      	mov	r1, r3
 8000d60:	4837      	ldr	r0, [pc, #220]	; (8000e40 <MX_GPIO_Init+0x608>)
 8000d62:	f000 fcc9 	bl	80016f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : ULPI_DIR_Pin */
  GPIO_InitStruct.Pin = ULPI_DIR_Pin;
 8000d66:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000d6a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d6c:	2302      	movs	r3, #2
 8000d6e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d70:	2300      	movs	r3, #0
 8000d72:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d74:	2303      	movs	r3, #3
 8000d76:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8000d78:	230a      	movs	r3, #10
 8000d7a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ULPI_DIR_GPIO_Port, &GPIO_InitStruct);
 8000d7c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000d80:	4619      	mov	r1, r3
 8000d82:	482c      	ldr	r0, [pc, #176]	; (8000e34 <MX_GPIO_Init+0x5fc>)
 8000d84:	f000 fcb8 	bl	80016f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : CEC_CLK_Pin */
  GPIO_InitStruct.Pin = CEC_CLK_Pin;
 8000d88:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000d8c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d8e:	2302      	movs	r3, #2
 8000d90:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d92:	2300      	movs	r3, #0
 8000d94:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d96:	2300      	movs	r3, #0
 8000d98:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(CEC_CLK_GPIO_Port, &GPIO_InitStruct);
 8000d9e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000da2:	4619      	mov	r1, r3
 8000da4:	4822      	ldr	r0, [pc, #136]	; (8000e30 <MX_GPIO_Init+0x5f8>)
 8000da6:	f000 fca7 	bl	80016f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_INT_Pin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 8000daa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000dae:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000db0:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000db4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000db6:	2300      	movs	r3, #0
 8000db8:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 8000dba:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000dbe:	4619      	mov	r1, r3
 8000dc0:	481c      	ldr	r0, [pc, #112]	; (8000e34 <MX_GPIO_Init+0x5fc>)
 8000dc2:	f000 fc99 	bl	80016f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D5_PWM_Pin */
  GPIO_InitStruct.Pin = ARD_D5_PWM_Pin;
 8000dc6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000dca:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dcc:	2302      	movs	r3, #2
 8000dce:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000dd8:	2302      	movs	r3, #2
 8000dda:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARD_D5_PWM_GPIO_Port, &GPIO_InitStruct);
 8000ddc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000de0:	4619      	mov	r1, r3
 8000de2:	4812      	ldr	r0, [pc, #72]	; (8000e2c <MX_GPIO_Init+0x5f4>)
 8000de4:	f000 fc88 	bl	80016f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D0_RX_Pin ARDUINO_TX_D1_Pin */
  GPIO_InitStruct.Pin = ARD_D0_RX_Pin|ARDUINO_TX_D1_Pin;
 8000de8:	23c0      	movs	r3, #192	; 0xc0
 8000dea:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dec:	2302      	movs	r3, #2
 8000dee:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000df0:	2300      	movs	r3, #0
 8000df2:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000df4:	2303      	movs	r3, #3
 8000df6:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8000df8:	2308      	movs	r3, #8
 8000dfa:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000dfc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e00:	4619      	mov	r1, r3
 8000e02:	480a      	ldr	r0, [pc, #40]	; (8000e2c <MX_GPIO_Init+0x5f4>)
 8000e04:	f000 fc78 	bl	80016f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : ULPI_NXT_Pin */
  GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 8000e08:	2310      	movs	r3, #16
 8000e0a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e0c:	2302      	movs	r3, #2
 8000e0e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e10:	2300      	movs	r3, #0
 8000e12:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e14:	2303      	movs	r3, #3
 8000e16:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8000e18:	230a      	movs	r3, #10
 8000e1a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000e1c:	e012      	b.n	8000e44 <MX_GPIO_Init+0x60c>
 8000e1e:	bf00      	nop
 8000e20:	40021800 	.word	0x40021800
 8000e24:	40022400 	.word	0x40022400
 8000e28:	40020c00 	.word	0x40020c00
 8000e2c:	40020800 	.word	0x40020800
 8000e30:	40020000 	.word	0x40020000
 8000e34:	40022000 	.word	0x40022000
 8000e38:	40022800 	.word	0x40022800
 8000e3c:	40021400 	.word	0x40021400
 8000e40:	40021c00 	.word	0x40021c00
  HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 8000e44:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e48:	4619      	mov	r1, r3
 8000e4a:	489a      	ldr	r0, [pc, #616]	; (80010b4 <MX_GPIO_Init+0x87c>)
 8000e4c:	f000 fc54 	bl	80016f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : SAI1_MCLKA_Pin */
  GPIO_InitStruct.Pin = SAI1_MCLKA_Pin;
 8000e50:	2380      	movs	r3, #128	; 0x80
 8000e52:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e54:	2302      	movs	r3, #2
 8000e56:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e58:	2300      	movs	r3, #0
 8000e5a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 8000e60:	2306      	movs	r3, #6
 8000e62:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SAI1_MCLKA_GPIO_Port, &GPIO_InitStruct);
 8000e64:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e68:	4619      	mov	r1, r3
 8000e6a:	4893      	ldr	r0, [pc, #588]	; (80010b8 <MX_GPIO_Init+0x880>)
 8000e6c:	f000 fc44 	bl	80016f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : EXT_SDA_Pin EXT_SCL_Pin */
  GPIO_InitStruct.Pin = EXT_SDA_Pin|EXT_SCL_Pin;
 8000e70:	2348      	movs	r3, #72	; 0x48
 8000e72:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e74:	2300      	movs	r3, #0
 8000e76:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e78:	2300      	movs	r3, #0
 8000e7a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000e7c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e80:	4619      	mov	r1, r3
 8000e82:	488d      	ldr	r0, [pc, #564]	; (80010b8 <MX_GPIO_Init+0x880>)
 8000e84:	f000 fc38 	bl	80016f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D6_PWM_Pin */
  GPIO_InitStruct.Pin = ARD_D6_PWM_Pin;
 8000e88:	2380      	movs	r3, #128	; 0x80
 8000e8a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e8c:	2302      	movs	r3, #2
 8000e8e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e90:	2300      	movs	r3, #0
 8000e92:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e94:	2300      	movs	r3, #0
 8000e96:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF3_TIM11;
 8000e98:	2303      	movs	r3, #3
 8000e9a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARD_D6_PWM_GPIO_Port, &GPIO_InitStruct);
 8000e9c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000ea0:	4619      	mov	r1, r3
 8000ea2:	4886      	ldr	r0, [pc, #536]	; (80010bc <MX_GPIO_Init+0x884>)
 8000ea4:	f000 fc28 	bl	80016f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D3_PWM_Pin */
  GPIO_InitStruct.Pin = ARD_D3_PWM_Pin;
 8000ea8:	2340      	movs	r3, #64	; 0x40
 8000eaa:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eac:	2302      	movs	r3, #2
 8000eae:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF3_TIM10;
 8000eb8:	2303      	movs	r3, #3
 8000eba:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARD_D3_PWM_GPIO_Port, &GPIO_InitStruct);
 8000ebc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000ec0:	4619      	mov	r1, r3
 8000ec2:	487e      	ldr	r0, [pc, #504]	; (80010bc <MX_GPIO_Init+0x884>)
 8000ec4:	f000 fc18 	bl	80016f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_A1_Pin ARDUINO_A2_Pin ARDUINO_A3_Pin */
  GPIO_InitStruct.Pin = ARDUINO_A1_Pin|ARDUINO_A2_Pin|ARDUINO_A3_Pin;
 8000ec8:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8000ecc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ece:	2303      	movs	r3, #3
 8000ed0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000ed6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000eda:	4619      	mov	r1, r3
 8000edc:	4877      	ldr	r0, [pc, #476]	; (80010bc <MX_GPIO_Init+0x884>)
 8000ede:	f000 fc0b 	bl	80016f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : ULPI_STP_Pin */
  GPIO_InitStruct.Pin = ULPI_STP_Pin;
 8000ee2:	2301      	movs	r3, #1
 8000ee4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ee6:	2302      	movs	r3, #2
 8000ee8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eea:	2300      	movs	r3, #0
 8000eec:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000eee:	2303      	movs	r3, #3
 8000ef0:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8000ef2:	230a      	movs	r3, #10
 8000ef4:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ULPI_STP_GPIO_Port, &GPIO_InitStruct);
 8000ef6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000efa:	4619      	mov	r1, r3
 8000efc:	4870      	ldr	r0, [pc, #448]	; (80010c0 <MX_GPIO_Init+0x888>)
 8000efe:	f000 fbfb 	bl	80016f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000f02:	2332      	movs	r3, #50	; 0x32
 8000f04:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f06:	2302      	movs	r3, #2
 8000f08:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f0e:	2303      	movs	r3, #3
 8000f10:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000f12:	230b      	movs	r3, #11
 8000f14:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f16:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000f1a:	4619      	mov	r1, r3
 8000f1c:	4868      	ldr	r0, [pc, #416]	; (80010c0 <MX_GPIO_Init+0x888>)
 8000f1e:	f000 fbeb 	bl	80016f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_A2_Pin */
  GPIO_InitStruct.Pin = ARD_A2_Pin;
 8000f22:	2304      	movs	r3, #4
 8000f24:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f26:	2303      	movs	r3, #3
 8000f28:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ARD_A2_GPIO_Port, &GPIO_InitStruct);
 8000f2e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000f32:	4619      	mov	r1, r3
 8000f34:	4862      	ldr	r0, [pc, #392]	; (80010c0 <MX_GPIO_Init+0x888>)
 8000f36:	f000 fbdf 	bl	80016f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000f3a:	2304      	movs	r3, #4
 8000f3c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f3e:	2302      	movs	r3, #2
 8000f40:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f42:	2300      	movs	r3, #0
 8000f44:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f46:	2303      	movs	r3, #3
 8000f48:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8000f4a:	2309      	movs	r3, #9
 8000f4c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f4e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000f52:	4619      	mov	r1, r3
 8000f54:	485b      	ldr	r0, [pc, #364]	; (80010c4 <MX_GPIO_Init+0x88c>)
 8000f56:	f000 fbcf 	bl	80016f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : AUDIO_SCL_Pin */
  GPIO_InitStruct.Pin = AUDIO_SCL_Pin;
 8000f5a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f5e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000f60:	2312      	movs	r3, #18
 8000f62:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f64:	2300      	movs	r3, #0
 8000f66:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f68:	2303      	movs	r3, #3
 8000f6a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 8000f6c:	2304      	movs	r3, #4
 8000f6e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(AUDIO_SCL_GPIO_Port, &GPIO_InitStruct);
 8000f70:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000f74:	4619      	mov	r1, r3
 8000f76:	4854      	ldr	r0, [pc, #336]	; (80010c8 <MX_GPIO_Init+0x890>)
 8000f78:	f000 fbbe 	bl	80016f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : QSPI_D3_Pin */
  GPIO_InitStruct.Pin = QSPI_D3_Pin;
 8000f7c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000f80:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f82:	2302      	movs	r3, #2
 8000f84:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f86:	2300      	movs	r3, #0
 8000f88:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f8a:	2303      	movs	r3, #3
 8000f8c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8000f8e:	2309      	movs	r3, #9
 8000f90:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(QSPI_D3_GPIO_Port, &GPIO_InitStruct);
 8000f92:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000f96:	4619      	mov	r1, r3
 8000f98:	484b      	ldr	r0, [pc, #300]	; (80010c8 <MX_GPIO_Init+0x890>)
 8000f9a:	f000 fbad 	bl	80016f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000f9e:	2386      	movs	r3, #134	; 0x86
 8000fa0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fa2:	2302      	movs	r3, #2
 8000fa4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000faa:	2303      	movs	r3, #3
 8000fac:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000fae:	230b      	movs	r3, #11
 8000fb0:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fb2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000fb6:	4619      	mov	r1, r3
 8000fb8:	4844      	ldr	r0, [pc, #272]	; (80010cc <MX_GPIO_Init+0x894>)
 8000fba:	f000 fb9d 	bl	80016f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : B_USER_Pin */
  GPIO_InitStruct.Pin = B_USER_Pin;
 8000fbe:	2301      	movs	r3, #1
 8000fc0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000fc2:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000fc6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fc8:	2300      	movs	r3, #0
 8000fca:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(B_USER_GPIO_Port, &GPIO_InitStruct);
 8000fcc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000fd0:	4619      	mov	r1, r3
 8000fd2:	483e      	ldr	r0, [pc, #248]	; (80010cc <MX_GPIO_Init+0x894>)
 8000fd4:	f000 fb90 	bl	80016f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_A1_Pin ARD_A0_Pin */
  GPIO_InitStruct.Pin = ARD_A1_Pin|ARD_A0_Pin;
 8000fd8:	2350      	movs	r3, #80	; 0x50
 8000fda:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000fdc:	2303      	movs	r3, #3
 8000fde:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fe4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000fe8:	4619      	mov	r1, r3
 8000fea:	4838      	ldr	r0, [pc, #224]	; (80010cc <MX_GPIO_Init+0x894>)
 8000fec:	f000 fb84 	bl	80016f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPDIF_TX_Pin */
  GPIO_InitStruct.Pin = SPDIF_TX_Pin;
 8000ff0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000ff4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ff6:	2302      	movs	r3, #2
 8000ff8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ffe:	2300      	movs	r3, #0
 8001000:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8001002:	230a      	movs	r3, #10
 8001004:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SPDIF_TX_GPIO_Port, &GPIO_InitStruct);
 8001006:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800100a:	4619      	mov	r1, r3
 800100c:	482e      	ldr	r0, [pc, #184]	; (80010c8 <MX_GPIO_Init+0x890>)
 800100e:	f000 fb73 	bl	80016f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : EXT_RST_Pin */
  GPIO_InitStruct.Pin = EXT_RST_Pin;
 8001012:	2380      	movs	r3, #128	; 0x80
 8001014:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001016:	2300      	movs	r3, #0
 8001018:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800101a:	2300      	movs	r3, #0
 800101c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(EXT_RST_GPIO_Port, &GPIO_InitStruct);
 800101e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001022:	4619      	mov	r1, r3
 8001024:	4823      	ldr	r0, [pc, #140]	; (80010b4 <MX_GPIO_Init+0x87c>)
 8001026:	f000 fb67 	bl	80016f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_CLK_Pin ULPI_D0_Pin */
  GPIO_InitStruct.Pin = ULPI_CLK_Pin|ULPI_D0_Pin;
 800102a:	2328      	movs	r3, #40	; 0x28
 800102c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800102e:	2302      	movs	r3, #2
 8001030:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001032:	2300      	movs	r3, #0
 8001034:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001036:	2303      	movs	r3, #3
 8001038:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 800103a:	230a      	movs	r3, #10
 800103c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800103e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001042:	4619      	mov	r1, r3
 8001044:	4821      	ldr	r0, [pc, #132]	; (80010cc <MX_GPIO_Init+0x894>)
 8001046:	f000 fb57 	bl	80016f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : DSIHOST_TE_Pin */
  GPIO_InitStruct.Pin = DSIHOST_TE_Pin;
 800104a:	2304      	movs	r3, #4
 800104c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800104e:	2302      	movs	r3, #2
 8001050:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001052:	2300      	movs	r3, #0
 8001054:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001056:	2300      	movs	r3, #0
 8001058:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DSI;
 800105a:	230d      	movs	r3, #13
 800105c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(DSIHOST_TE_GPIO_Port, &GPIO_InitStruct);
 800105e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001062:	4619      	mov	r1, r3
 8001064:	481a      	ldr	r0, [pc, #104]	; (80010d0 <MX_GPIO_Init+0x898>)
 8001066:	f000 fb47 	bl	80016f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_D6_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D6_Pin;
 800106a:	2340      	movs	r3, #64	; 0x40
 800106c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800106e:	2302      	movs	r3, #2
 8001070:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001072:	2300      	movs	r3, #0
 8001074:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001076:	2300      	movs	r3, #0
 8001078:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 800107a:	2309      	movs	r3, #9
 800107c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D6_GPIO_Port, &GPIO_InitStruct);
 800107e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001082:	4619      	mov	r1, r3
 8001084:	480b      	ldr	r0, [pc, #44]	; (80010b4 <MX_GPIO_Init+0x87c>)
 8001086:	f000 fb37 	bl	80016f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_MISO_D12_Pin ARDUINO_MOSI_PWM_D11_Pin */
  GPIO_InitStruct.Pin = ARDUINO_MISO_D12_Pin|ARDUINO_MOSI_PWM_D11_Pin;
 800108a:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 800108e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001090:	2302      	movs	r3, #2
 8001092:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001094:	2300      	movs	r3, #0
 8001096:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001098:	2300      	movs	r3, #0
 800109a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800109c:	2305      	movs	r3, #5
 800109e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010a0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80010a4:	4619      	mov	r1, r3
 80010a6:	4807      	ldr	r0, [pc, #28]	; (80010c4 <MX_GPIO_Init+0x88c>)
 80010a8:	f000 fb26 	bl	80016f8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80010ac:	bf00      	nop
 80010ae:	3740      	adds	r7, #64	; 0x40
 80010b0:	46bd      	mov	sp, r7
 80010b2:	bd80      	pop	{r7, pc}
 80010b4:	40021c00 	.word	0x40021c00
 80010b8:	40021800 	.word	0x40021800
 80010bc:	40021400 	.word	0x40021400
 80010c0:	40020800 	.word	0x40020800
 80010c4:	40020400 	.word	0x40020400
 80010c8:	40020c00 	.word	0x40020c00
 80010cc:	40020000 	.word	0x40020000
 80010d0:	40022400 	.word	0x40022400

080010d4 <task1_handler>:

/* USER CODE BEGIN 4 */
static void task1_handler(void* parameters) {
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b082      	sub	sp, #8
 80010d8:	af00      	add	r7, sp, #0
 80010da:	6078      	str	r0, [r7, #4]
	while(1) {
		printf("%s\n", (char*)parameters);
 80010dc:	6878      	ldr	r0, [r7, #4]
 80010de:	f003 fc83 	bl	80049e8 <puts>
 80010e2:	e7fb      	b.n	80010dc <task1_handler+0x8>

080010e4 <task2_handler>:
	}
}
static void task2_handler(void* parameters) {
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b082      	sub	sp, #8
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	6078      	str	r0, [r7, #4]
	while(1) {
		printf("%s\n", (char*)parameters);
 80010ec:	6878      	ldr	r0, [r7, #4]
 80010ee:	f003 fc7b 	bl	80049e8 <puts>
 80010f2:	e7fb      	b.n	80010ec <task2_handler+0x8>

080010f4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b082      	sub	sp, #8
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	4a04      	ldr	r2, [pc, #16]	; (8001114 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001102:	4293      	cmp	r3, r2
 8001104:	d101      	bne.n	800110a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001106:	f000 f9f5 	bl	80014f4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800110a:	bf00      	nop
 800110c:	3708      	adds	r7, #8
 800110e:	46bd      	mov	sp, r7
 8001110:	bd80      	pop	{r7, pc}
 8001112:	bf00      	nop
 8001114:	40001000 	.word	0x40001000

08001118 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001118:	b480      	push	{r7}
 800111a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800111c:	b672      	cpsid	i
}
 800111e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001120:	e7fe      	b.n	8001120 <Error_Handler+0x8>
	...

08001124 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001124:	b480      	push	{r7}
 8001126:	b083      	sub	sp, #12
 8001128:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800112a:	4b0f      	ldr	r3, [pc, #60]	; (8001168 <HAL_MspInit+0x44>)
 800112c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800112e:	4a0e      	ldr	r2, [pc, #56]	; (8001168 <HAL_MspInit+0x44>)
 8001130:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001134:	6413      	str	r3, [r2, #64]	; 0x40
 8001136:	4b0c      	ldr	r3, [pc, #48]	; (8001168 <HAL_MspInit+0x44>)
 8001138:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800113a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800113e:	607b      	str	r3, [r7, #4]
 8001140:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001142:	4b09      	ldr	r3, [pc, #36]	; (8001168 <HAL_MspInit+0x44>)
 8001144:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001146:	4a08      	ldr	r2, [pc, #32]	; (8001168 <HAL_MspInit+0x44>)
 8001148:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800114c:	6453      	str	r3, [r2, #68]	; 0x44
 800114e:	4b06      	ldr	r3, [pc, #24]	; (8001168 <HAL_MspInit+0x44>)
 8001150:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001152:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001156:	603b      	str	r3, [r7, #0]
 8001158:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800115a:	bf00      	nop
 800115c:	370c      	adds	r7, #12
 800115e:	46bd      	mov	sp, r7
 8001160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001164:	4770      	bx	lr
 8001166:	bf00      	nop
 8001168:	40023800 	.word	0x40023800

0800116c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	b0ae      	sub	sp, #184	; 0xb8
 8001170:	af00      	add	r7, sp, #0
 8001172:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001174:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001178:	2200      	movs	r2, #0
 800117a:	601a      	str	r2, [r3, #0]
 800117c:	605a      	str	r2, [r3, #4]
 800117e:	609a      	str	r2, [r3, #8]
 8001180:	60da      	str	r2, [r3, #12]
 8001182:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001184:	f107 0314 	add.w	r3, r7, #20
 8001188:	2290      	movs	r2, #144	; 0x90
 800118a:	2100      	movs	r1, #0
 800118c:	4618      	mov	r0, r3
 800118e:	f003 fb9d 	bl	80048cc <memset>
  if(huart->Instance==USART1)
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	4a2c      	ldr	r2, [pc, #176]	; (8001248 <HAL_UART_MspInit+0xdc>)
 8001198:	4293      	cmp	r3, r2
 800119a:	d151      	bne.n	8001240 <HAL_UART_MspInit+0xd4>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800119c:	2340      	movs	r3, #64	; 0x40
 800119e:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80011a0:	2300      	movs	r3, #0
 80011a2:	65bb      	str	r3, [r7, #88]	; 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80011a4:	f107 0314 	add.w	r3, r7, #20
 80011a8:	4618      	mov	r0, r3
 80011aa:	f001 f931 	bl	8002410 <HAL_RCCEx_PeriphCLKConfig>
 80011ae:	4603      	mov	r3, r0
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d001      	beq.n	80011b8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80011b4:	f7ff ffb0 	bl	8001118 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80011b8:	4b24      	ldr	r3, [pc, #144]	; (800124c <HAL_UART_MspInit+0xe0>)
 80011ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011bc:	4a23      	ldr	r2, [pc, #140]	; (800124c <HAL_UART_MspInit+0xe0>)
 80011be:	f043 0310 	orr.w	r3, r3, #16
 80011c2:	6453      	str	r3, [r2, #68]	; 0x44
 80011c4:	4b21      	ldr	r3, [pc, #132]	; (800124c <HAL_UART_MspInit+0xe0>)
 80011c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011c8:	f003 0310 	and.w	r3, r3, #16
 80011cc:	613b      	str	r3, [r7, #16]
 80011ce:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011d0:	4b1e      	ldr	r3, [pc, #120]	; (800124c <HAL_UART_MspInit+0xe0>)
 80011d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011d4:	4a1d      	ldr	r2, [pc, #116]	; (800124c <HAL_UART_MspInit+0xe0>)
 80011d6:	f043 0301 	orr.w	r3, r3, #1
 80011da:	6313      	str	r3, [r2, #48]	; 0x30
 80011dc:	4b1b      	ldr	r3, [pc, #108]	; (800124c <HAL_UART_MspInit+0xe0>)
 80011de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011e0:	f003 0301 	and.w	r3, r3, #1
 80011e4:	60fb      	str	r3, [r7, #12]
 80011e6:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA10     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 80011e8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80011ec:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011f0:	2302      	movs	r3, #2
 80011f2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011f6:	2300      	movs	r3, #0
 80011f8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011fc:	2303      	movs	r3, #3
 80011fe:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001202:	2307      	movs	r3, #7
 8001204:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8001208:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800120c:	4619      	mov	r1, r3
 800120e:	4810      	ldr	r0, [pc, #64]	; (8001250 <HAL_UART_MspInit+0xe4>)
 8001210:	f000 fa72 	bl	80016f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8001214:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001218:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800121c:	2302      	movs	r3, #2
 800121e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001222:	2300      	movs	r3, #0
 8001224:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001228:	2300      	movs	r3, #0
 800122a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800122e:	2307      	movs	r3, #7
 8001230:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8001234:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001238:	4619      	mov	r1, r3
 800123a:	4805      	ldr	r0, [pc, #20]	; (8001250 <HAL_UART_MspInit+0xe4>)
 800123c:	f000 fa5c 	bl	80016f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001240:	bf00      	nop
 8001242:	37b8      	adds	r7, #184	; 0xb8
 8001244:	46bd      	mov	sp, r7
 8001246:	bd80      	pop	{r7, pc}
 8001248:	40011000 	.word	0x40011000
 800124c:	40023800 	.word	0x40023800
 8001250:	40020000 	.word	0x40020000

08001254 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	b08e      	sub	sp, #56	; 0x38
 8001258:	af00      	add	r7, sp, #0
 800125a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 800125c:	2300      	movs	r3, #0
 800125e:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001260:	2300      	movs	r3, #0
 8001262:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001264:	4b33      	ldr	r3, [pc, #204]	; (8001334 <HAL_InitTick+0xe0>)
 8001266:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001268:	4a32      	ldr	r2, [pc, #200]	; (8001334 <HAL_InitTick+0xe0>)
 800126a:	f043 0310 	orr.w	r3, r3, #16
 800126e:	6413      	str	r3, [r2, #64]	; 0x40
 8001270:	4b30      	ldr	r3, [pc, #192]	; (8001334 <HAL_InitTick+0xe0>)
 8001272:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001274:	f003 0310 	and.w	r3, r3, #16
 8001278:	60fb      	str	r3, [r7, #12]
 800127a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800127c:	f107 0210 	add.w	r2, r7, #16
 8001280:	f107 0314 	add.w	r3, r7, #20
 8001284:	4611      	mov	r1, r2
 8001286:	4618      	mov	r0, r3
 8001288:	f001 f890 	bl	80023ac <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800128c:	6a3b      	ldr	r3, [r7, #32]
 800128e:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001290:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001292:	2b00      	cmp	r3, #0
 8001294:	d103      	bne.n	800129e <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001296:	f001 f861 	bl	800235c <HAL_RCC_GetPCLK1Freq>
 800129a:	6378      	str	r0, [r7, #52]	; 0x34
 800129c:	e004      	b.n	80012a8 <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800129e:	f001 f85d 	bl	800235c <HAL_RCC_GetPCLK1Freq>
 80012a2:	4603      	mov	r3, r0
 80012a4:	005b      	lsls	r3, r3, #1
 80012a6:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80012a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80012aa:	4a23      	ldr	r2, [pc, #140]	; (8001338 <HAL_InitTick+0xe4>)
 80012ac:	fba2 2303 	umull	r2, r3, r2, r3
 80012b0:	0c9b      	lsrs	r3, r3, #18
 80012b2:	3b01      	subs	r3, #1
 80012b4:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80012b6:	4b21      	ldr	r3, [pc, #132]	; (800133c <HAL_InitTick+0xe8>)
 80012b8:	4a21      	ldr	r2, [pc, #132]	; (8001340 <HAL_InitTick+0xec>)
 80012ba:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80012bc:	4b1f      	ldr	r3, [pc, #124]	; (800133c <HAL_InitTick+0xe8>)
 80012be:	f240 32e7 	movw	r2, #999	; 0x3e7
 80012c2:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80012c4:	4a1d      	ldr	r2, [pc, #116]	; (800133c <HAL_InitTick+0xe8>)
 80012c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80012c8:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80012ca:	4b1c      	ldr	r3, [pc, #112]	; (800133c <HAL_InitTick+0xe8>)
 80012cc:	2200      	movs	r2, #0
 80012ce:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012d0:	4b1a      	ldr	r3, [pc, #104]	; (800133c <HAL_InitTick+0xe8>)
 80012d2:	2200      	movs	r2, #0
 80012d4:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012d6:	4b19      	ldr	r3, [pc, #100]	; (800133c <HAL_InitTick+0xe8>)
 80012d8:	2200      	movs	r2, #0
 80012da:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 80012dc:	4817      	ldr	r0, [pc, #92]	; (800133c <HAL_InitTick+0xe8>)
 80012de:	f001 fcbf 	bl	8002c60 <HAL_TIM_Base_Init>
 80012e2:	4603      	mov	r3, r0
 80012e4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 80012e8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d11b      	bne.n	8001328 <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 80012f0:	4812      	ldr	r0, [pc, #72]	; (800133c <HAL_InitTick+0xe8>)
 80012f2:	f001 fd17 	bl	8002d24 <HAL_TIM_Base_Start_IT>
 80012f6:	4603      	mov	r3, r0
 80012f8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 80012fc:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001300:	2b00      	cmp	r3, #0
 8001302:	d111      	bne.n	8001328 <HAL_InitTick+0xd4>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001304:	2036      	movs	r0, #54	; 0x36
 8001306:	f000 f9e9 	bl	80016dc <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	2b0f      	cmp	r3, #15
 800130e:	d808      	bhi.n	8001322 <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8001310:	2200      	movs	r2, #0
 8001312:	6879      	ldr	r1, [r7, #4]
 8001314:	2036      	movs	r0, #54	; 0x36
 8001316:	f000 f9c5 	bl	80016a4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800131a:	4a0a      	ldr	r2, [pc, #40]	; (8001344 <HAL_InitTick+0xf0>)
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	6013      	str	r3, [r2, #0]
 8001320:	e002      	b.n	8001328 <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 8001322:	2301      	movs	r3, #1
 8001324:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001328:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 800132c:	4618      	mov	r0, r3
 800132e:	3738      	adds	r7, #56	; 0x38
 8001330:	46bd      	mov	sp, r7
 8001332:	bd80      	pop	{r7, pc}
 8001334:	40023800 	.word	0x40023800
 8001338:	431bde83 	.word	0x431bde83
 800133c:	20000118 	.word	0x20000118
 8001340:	40001000 	.word	0x40001000
 8001344:	20000004 	.word	0x20000004

08001348 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001348:	b480      	push	{r7}
 800134a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800134c:	e7fe      	b.n	800134c <NMI_Handler+0x4>

0800134e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800134e:	b480      	push	{r7}
 8001350:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001352:	e7fe      	b.n	8001352 <HardFault_Handler+0x4>

08001354 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001354:	b480      	push	{r7}
 8001356:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001358:	e7fe      	b.n	8001358 <MemManage_Handler+0x4>

0800135a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800135a:	b480      	push	{r7}
 800135c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800135e:	e7fe      	b.n	800135e <BusFault_Handler+0x4>

08001360 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001360:	b480      	push	{r7}
 8001362:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001364:	e7fe      	b.n	8001364 <UsageFault_Handler+0x4>

08001366 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001366:	b480      	push	{r7}
 8001368:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800136a:	bf00      	nop
 800136c:	46bd      	mov	sp, r7
 800136e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001372:	4770      	bx	lr

08001374 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001378:	4802      	ldr	r0, [pc, #8]	; (8001384 <TIM6_DAC_IRQHandler+0x10>)
 800137a:	f001 fd4b 	bl	8002e14 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800137e:	bf00      	nop
 8001380:	bd80      	pop	{r7, pc}
 8001382:	bf00      	nop
 8001384:	20000118 	.word	0x20000118

08001388 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	b086      	sub	sp, #24
 800138c:	af00      	add	r7, sp, #0
 800138e:	60f8      	str	r0, [r7, #12]
 8001390:	60b9      	str	r1, [r7, #8]
 8001392:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001394:	2300      	movs	r3, #0
 8001396:	617b      	str	r3, [r7, #20]
 8001398:	e00a      	b.n	80013b0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800139a:	f3af 8000 	nop.w
 800139e:	4601      	mov	r1, r0
 80013a0:	68bb      	ldr	r3, [r7, #8]
 80013a2:	1c5a      	adds	r2, r3, #1
 80013a4:	60ba      	str	r2, [r7, #8]
 80013a6:	b2ca      	uxtb	r2, r1
 80013a8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013aa:	697b      	ldr	r3, [r7, #20]
 80013ac:	3301      	adds	r3, #1
 80013ae:	617b      	str	r3, [r7, #20]
 80013b0:	697a      	ldr	r2, [r7, #20]
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	429a      	cmp	r2, r3
 80013b6:	dbf0      	blt.n	800139a <_read+0x12>
  }

  return len;
 80013b8:	687b      	ldr	r3, [r7, #4]
}
 80013ba:	4618      	mov	r0, r3
 80013bc:	3718      	adds	r7, #24
 80013be:	46bd      	mov	sp, r7
 80013c0:	bd80      	pop	{r7, pc}

080013c2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80013c2:	b580      	push	{r7, lr}
 80013c4:	b086      	sub	sp, #24
 80013c6:	af00      	add	r7, sp, #0
 80013c8:	60f8      	str	r0, [r7, #12]
 80013ca:	60b9      	str	r1, [r7, #8]
 80013cc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013ce:	2300      	movs	r3, #0
 80013d0:	617b      	str	r3, [r7, #20]
 80013d2:	e009      	b.n	80013e8 <_write+0x26>
  {
      __io_putchar(*ptr++);
 80013d4:	68bb      	ldr	r3, [r7, #8]
 80013d6:	1c5a      	adds	r2, r3, #1
 80013d8:	60ba      	str	r2, [r7, #8]
 80013da:	781b      	ldrb	r3, [r3, #0]
 80013dc:	4618      	mov	r0, r3
 80013de:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013e2:	697b      	ldr	r3, [r7, #20]
 80013e4:	3301      	adds	r3, #1
 80013e6:	617b      	str	r3, [r7, #20]
 80013e8:	697a      	ldr	r2, [r7, #20]
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	429a      	cmp	r2, r3
 80013ee:	dbf1      	blt.n	80013d4 <_write+0x12>
	  //ITM_SendChar(*ptr++);
  }
  return len;
 80013f0:	687b      	ldr	r3, [r7, #4]
}
 80013f2:	4618      	mov	r0, r3
 80013f4:	3718      	adds	r7, #24
 80013f6:	46bd      	mov	sp, r7
 80013f8:	bd80      	pop	{r7, pc}

080013fa <_close>:

int _close(int file)
{
 80013fa:	b480      	push	{r7}
 80013fc:	b083      	sub	sp, #12
 80013fe:	af00      	add	r7, sp, #0
 8001400:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001402:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001406:	4618      	mov	r0, r3
 8001408:	370c      	adds	r7, #12
 800140a:	46bd      	mov	sp, r7
 800140c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001410:	4770      	bx	lr

08001412 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001412:	b480      	push	{r7}
 8001414:	b083      	sub	sp, #12
 8001416:	af00      	add	r7, sp, #0
 8001418:	6078      	str	r0, [r7, #4]
 800141a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800141c:	683b      	ldr	r3, [r7, #0]
 800141e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001422:	605a      	str	r2, [r3, #4]
  return 0;
 8001424:	2300      	movs	r3, #0
}
 8001426:	4618      	mov	r0, r3
 8001428:	370c      	adds	r7, #12
 800142a:	46bd      	mov	sp, r7
 800142c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001430:	4770      	bx	lr

08001432 <_isatty>:

int _isatty(int file)
{
 8001432:	b480      	push	{r7}
 8001434:	b083      	sub	sp, #12
 8001436:	af00      	add	r7, sp, #0
 8001438:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800143a:	2301      	movs	r3, #1
}
 800143c:	4618      	mov	r0, r3
 800143e:	370c      	adds	r7, #12
 8001440:	46bd      	mov	sp, r7
 8001442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001446:	4770      	bx	lr

08001448 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001448:	b480      	push	{r7}
 800144a:	b085      	sub	sp, #20
 800144c:	af00      	add	r7, sp, #0
 800144e:	60f8      	str	r0, [r7, #12]
 8001450:	60b9      	str	r1, [r7, #8]
 8001452:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001454:	2300      	movs	r3, #0
}
 8001456:	4618      	mov	r0, r3
 8001458:	3714      	adds	r7, #20
 800145a:	46bd      	mov	sp, r7
 800145c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001460:	4770      	bx	lr
	...

08001464 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001464:	b480      	push	{r7}
 8001466:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001468:	4b06      	ldr	r3, [pc, #24]	; (8001484 <SystemInit+0x20>)
 800146a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800146e:	4a05      	ldr	r2, [pc, #20]	; (8001484 <SystemInit+0x20>)
 8001470:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001474:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001478:	bf00      	nop
 800147a:	46bd      	mov	sp, r7
 800147c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001480:	4770      	bx	lr
 8001482:	bf00      	nop
 8001484:	e000ed00 	.word	0xe000ed00

08001488 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001488:	f8df d034 	ldr.w	sp, [pc, #52]	; 80014c0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800148c:	480d      	ldr	r0, [pc, #52]	; (80014c4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800148e:	490e      	ldr	r1, [pc, #56]	; (80014c8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001490:	4a0e      	ldr	r2, [pc, #56]	; (80014cc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001492:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001494:	e002      	b.n	800149c <LoopCopyDataInit>

08001496 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001496:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001498:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800149a:	3304      	adds	r3, #4

0800149c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800149c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800149e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80014a0:	d3f9      	bcc.n	8001496 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80014a2:	4a0b      	ldr	r2, [pc, #44]	; (80014d0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80014a4:	4c0b      	ldr	r4, [pc, #44]	; (80014d4 <LoopFillZerobss+0x26>)
  movs r3, #0
 80014a6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80014a8:	e001      	b.n	80014ae <LoopFillZerobss>

080014aa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80014aa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80014ac:	3204      	adds	r2, #4

080014ae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80014ae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80014b0:	d3fb      	bcc.n	80014aa <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80014b2:	f7ff ffd7 	bl	8001464 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80014b6:	f003 f9e5 	bl	8004884 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80014ba:	f7ff f8d5 	bl	8000668 <main>
  bx  lr    
 80014be:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80014c0:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 80014c4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80014c8:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 80014cc:	08005b00 	.word	0x08005b00
  ldr r2, =_sbss
 80014d0:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 80014d4:	2000ba98 	.word	0x2000ba98

080014d8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80014d8:	e7fe      	b.n	80014d8 <ADC_IRQHandler>

080014da <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80014da:	b580      	push	{r7, lr}
 80014dc:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80014de:	2003      	movs	r0, #3
 80014e0:	f000 f8d5 	bl	800168e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80014e4:	200f      	movs	r0, #15
 80014e6:	f7ff feb5 	bl	8001254 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80014ea:	f7ff fe1b 	bl	8001124 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80014ee:	2300      	movs	r3, #0
}
 80014f0:	4618      	mov	r0, r3
 80014f2:	bd80      	pop	{r7, pc}

080014f4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80014f4:	b480      	push	{r7}
 80014f6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80014f8:	4b06      	ldr	r3, [pc, #24]	; (8001514 <HAL_IncTick+0x20>)
 80014fa:	781b      	ldrb	r3, [r3, #0]
 80014fc:	461a      	mov	r2, r3
 80014fe:	4b06      	ldr	r3, [pc, #24]	; (8001518 <HAL_IncTick+0x24>)
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	4413      	add	r3, r2
 8001504:	4a04      	ldr	r2, [pc, #16]	; (8001518 <HAL_IncTick+0x24>)
 8001506:	6013      	str	r3, [r2, #0]
}
 8001508:	bf00      	nop
 800150a:	46bd      	mov	sp, r7
 800150c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001510:	4770      	bx	lr
 8001512:	bf00      	nop
 8001514:	20000008 	.word	0x20000008
 8001518:	20000164 	.word	0x20000164

0800151c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800151c:	b480      	push	{r7}
 800151e:	af00      	add	r7, sp, #0
  return uwTick;
 8001520:	4b03      	ldr	r3, [pc, #12]	; (8001530 <HAL_GetTick+0x14>)
 8001522:	681b      	ldr	r3, [r3, #0]
}
 8001524:	4618      	mov	r0, r3
 8001526:	46bd      	mov	sp, r7
 8001528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152c:	4770      	bx	lr
 800152e:	bf00      	nop
 8001530:	20000164 	.word	0x20000164

08001534 <__NVIC_SetPriorityGrouping>:
{
 8001534:	b480      	push	{r7}
 8001536:	b085      	sub	sp, #20
 8001538:	af00      	add	r7, sp, #0
 800153a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	f003 0307 	and.w	r3, r3, #7
 8001542:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001544:	4b0b      	ldr	r3, [pc, #44]	; (8001574 <__NVIC_SetPriorityGrouping+0x40>)
 8001546:	68db      	ldr	r3, [r3, #12]
 8001548:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800154a:	68ba      	ldr	r2, [r7, #8]
 800154c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001550:	4013      	ands	r3, r2
 8001552:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001558:	68bb      	ldr	r3, [r7, #8]
 800155a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800155c:	4b06      	ldr	r3, [pc, #24]	; (8001578 <__NVIC_SetPriorityGrouping+0x44>)
 800155e:	4313      	orrs	r3, r2
 8001560:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001562:	4a04      	ldr	r2, [pc, #16]	; (8001574 <__NVIC_SetPriorityGrouping+0x40>)
 8001564:	68bb      	ldr	r3, [r7, #8]
 8001566:	60d3      	str	r3, [r2, #12]
}
 8001568:	bf00      	nop
 800156a:	3714      	adds	r7, #20
 800156c:	46bd      	mov	sp, r7
 800156e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001572:	4770      	bx	lr
 8001574:	e000ed00 	.word	0xe000ed00
 8001578:	05fa0000 	.word	0x05fa0000

0800157c <__NVIC_GetPriorityGrouping>:
{
 800157c:	b480      	push	{r7}
 800157e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001580:	4b04      	ldr	r3, [pc, #16]	; (8001594 <__NVIC_GetPriorityGrouping+0x18>)
 8001582:	68db      	ldr	r3, [r3, #12]
 8001584:	0a1b      	lsrs	r3, r3, #8
 8001586:	f003 0307 	and.w	r3, r3, #7
}
 800158a:	4618      	mov	r0, r3
 800158c:	46bd      	mov	sp, r7
 800158e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001592:	4770      	bx	lr
 8001594:	e000ed00 	.word	0xe000ed00

08001598 <__NVIC_EnableIRQ>:
{
 8001598:	b480      	push	{r7}
 800159a:	b083      	sub	sp, #12
 800159c:	af00      	add	r7, sp, #0
 800159e:	4603      	mov	r3, r0
 80015a0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	db0b      	blt.n	80015c2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80015aa:	79fb      	ldrb	r3, [r7, #7]
 80015ac:	f003 021f 	and.w	r2, r3, #31
 80015b0:	4907      	ldr	r1, [pc, #28]	; (80015d0 <__NVIC_EnableIRQ+0x38>)
 80015b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015b6:	095b      	lsrs	r3, r3, #5
 80015b8:	2001      	movs	r0, #1
 80015ba:	fa00 f202 	lsl.w	r2, r0, r2
 80015be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80015c2:	bf00      	nop
 80015c4:	370c      	adds	r7, #12
 80015c6:	46bd      	mov	sp, r7
 80015c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015cc:	4770      	bx	lr
 80015ce:	bf00      	nop
 80015d0:	e000e100 	.word	0xe000e100

080015d4 <__NVIC_SetPriority>:
{
 80015d4:	b480      	push	{r7}
 80015d6:	b083      	sub	sp, #12
 80015d8:	af00      	add	r7, sp, #0
 80015da:	4603      	mov	r3, r0
 80015dc:	6039      	str	r1, [r7, #0]
 80015de:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	db0a      	blt.n	80015fe <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015e8:	683b      	ldr	r3, [r7, #0]
 80015ea:	b2da      	uxtb	r2, r3
 80015ec:	490c      	ldr	r1, [pc, #48]	; (8001620 <__NVIC_SetPriority+0x4c>)
 80015ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015f2:	0112      	lsls	r2, r2, #4
 80015f4:	b2d2      	uxtb	r2, r2
 80015f6:	440b      	add	r3, r1
 80015f8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80015fc:	e00a      	b.n	8001614 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015fe:	683b      	ldr	r3, [r7, #0]
 8001600:	b2da      	uxtb	r2, r3
 8001602:	4908      	ldr	r1, [pc, #32]	; (8001624 <__NVIC_SetPriority+0x50>)
 8001604:	79fb      	ldrb	r3, [r7, #7]
 8001606:	f003 030f 	and.w	r3, r3, #15
 800160a:	3b04      	subs	r3, #4
 800160c:	0112      	lsls	r2, r2, #4
 800160e:	b2d2      	uxtb	r2, r2
 8001610:	440b      	add	r3, r1
 8001612:	761a      	strb	r2, [r3, #24]
}
 8001614:	bf00      	nop
 8001616:	370c      	adds	r7, #12
 8001618:	46bd      	mov	sp, r7
 800161a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161e:	4770      	bx	lr
 8001620:	e000e100 	.word	0xe000e100
 8001624:	e000ed00 	.word	0xe000ed00

08001628 <NVIC_EncodePriority>:
{
 8001628:	b480      	push	{r7}
 800162a:	b089      	sub	sp, #36	; 0x24
 800162c:	af00      	add	r7, sp, #0
 800162e:	60f8      	str	r0, [r7, #12]
 8001630:	60b9      	str	r1, [r7, #8]
 8001632:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	f003 0307 	and.w	r3, r3, #7
 800163a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800163c:	69fb      	ldr	r3, [r7, #28]
 800163e:	f1c3 0307 	rsb	r3, r3, #7
 8001642:	2b04      	cmp	r3, #4
 8001644:	bf28      	it	cs
 8001646:	2304      	movcs	r3, #4
 8001648:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800164a:	69fb      	ldr	r3, [r7, #28]
 800164c:	3304      	adds	r3, #4
 800164e:	2b06      	cmp	r3, #6
 8001650:	d902      	bls.n	8001658 <NVIC_EncodePriority+0x30>
 8001652:	69fb      	ldr	r3, [r7, #28]
 8001654:	3b03      	subs	r3, #3
 8001656:	e000      	b.n	800165a <NVIC_EncodePriority+0x32>
 8001658:	2300      	movs	r3, #0
 800165a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800165c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001660:	69bb      	ldr	r3, [r7, #24]
 8001662:	fa02 f303 	lsl.w	r3, r2, r3
 8001666:	43da      	mvns	r2, r3
 8001668:	68bb      	ldr	r3, [r7, #8]
 800166a:	401a      	ands	r2, r3
 800166c:	697b      	ldr	r3, [r7, #20]
 800166e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001670:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001674:	697b      	ldr	r3, [r7, #20]
 8001676:	fa01 f303 	lsl.w	r3, r1, r3
 800167a:	43d9      	mvns	r1, r3
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001680:	4313      	orrs	r3, r2
}
 8001682:	4618      	mov	r0, r3
 8001684:	3724      	adds	r7, #36	; 0x24
 8001686:	46bd      	mov	sp, r7
 8001688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168c:	4770      	bx	lr

0800168e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800168e:	b580      	push	{r7, lr}
 8001690:	b082      	sub	sp, #8
 8001692:	af00      	add	r7, sp, #0
 8001694:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001696:	6878      	ldr	r0, [r7, #4]
 8001698:	f7ff ff4c 	bl	8001534 <__NVIC_SetPriorityGrouping>
}
 800169c:	bf00      	nop
 800169e:	3708      	adds	r7, #8
 80016a0:	46bd      	mov	sp, r7
 80016a2:	bd80      	pop	{r7, pc}

080016a4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b086      	sub	sp, #24
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	4603      	mov	r3, r0
 80016ac:	60b9      	str	r1, [r7, #8]
 80016ae:	607a      	str	r2, [r7, #4]
 80016b0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80016b2:	2300      	movs	r3, #0
 80016b4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80016b6:	f7ff ff61 	bl	800157c <__NVIC_GetPriorityGrouping>
 80016ba:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80016bc:	687a      	ldr	r2, [r7, #4]
 80016be:	68b9      	ldr	r1, [r7, #8]
 80016c0:	6978      	ldr	r0, [r7, #20]
 80016c2:	f7ff ffb1 	bl	8001628 <NVIC_EncodePriority>
 80016c6:	4602      	mov	r2, r0
 80016c8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016cc:	4611      	mov	r1, r2
 80016ce:	4618      	mov	r0, r3
 80016d0:	f7ff ff80 	bl	80015d4 <__NVIC_SetPriority>
}
 80016d4:	bf00      	nop
 80016d6:	3718      	adds	r7, #24
 80016d8:	46bd      	mov	sp, r7
 80016da:	bd80      	pop	{r7, pc}

080016dc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	b082      	sub	sp, #8
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	4603      	mov	r3, r0
 80016e4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80016e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016ea:	4618      	mov	r0, r3
 80016ec:	f7ff ff54 	bl	8001598 <__NVIC_EnableIRQ>
}
 80016f0:	bf00      	nop
 80016f2:	3708      	adds	r7, #8
 80016f4:	46bd      	mov	sp, r7
 80016f6:	bd80      	pop	{r7, pc}

080016f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80016f8:	b480      	push	{r7}
 80016fa:	b089      	sub	sp, #36	; 0x24
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	6078      	str	r0, [r7, #4]
 8001700:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001702:	2300      	movs	r3, #0
 8001704:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001706:	2300      	movs	r3, #0
 8001708:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800170a:	2300      	movs	r3, #0
 800170c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800170e:	2300      	movs	r3, #0
 8001710:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8001712:	2300      	movs	r3, #0
 8001714:	61fb      	str	r3, [r7, #28]
 8001716:	e175      	b.n	8001a04 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001718:	2201      	movs	r2, #1
 800171a:	69fb      	ldr	r3, [r7, #28]
 800171c:	fa02 f303 	lsl.w	r3, r2, r3
 8001720:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001722:	683b      	ldr	r3, [r7, #0]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	697a      	ldr	r2, [r7, #20]
 8001728:	4013      	ands	r3, r2
 800172a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800172c:	693a      	ldr	r2, [r7, #16]
 800172e:	697b      	ldr	r3, [r7, #20]
 8001730:	429a      	cmp	r2, r3
 8001732:	f040 8164 	bne.w	80019fe <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001736:	683b      	ldr	r3, [r7, #0]
 8001738:	685b      	ldr	r3, [r3, #4]
 800173a:	f003 0303 	and.w	r3, r3, #3
 800173e:	2b01      	cmp	r3, #1
 8001740:	d005      	beq.n	800174e <HAL_GPIO_Init+0x56>
 8001742:	683b      	ldr	r3, [r7, #0]
 8001744:	685b      	ldr	r3, [r3, #4]
 8001746:	f003 0303 	and.w	r3, r3, #3
 800174a:	2b02      	cmp	r3, #2
 800174c:	d130      	bne.n	80017b0 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	689b      	ldr	r3, [r3, #8]
 8001752:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001754:	69fb      	ldr	r3, [r7, #28]
 8001756:	005b      	lsls	r3, r3, #1
 8001758:	2203      	movs	r2, #3
 800175a:	fa02 f303 	lsl.w	r3, r2, r3
 800175e:	43db      	mvns	r3, r3
 8001760:	69ba      	ldr	r2, [r7, #24]
 8001762:	4013      	ands	r3, r2
 8001764:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001766:	683b      	ldr	r3, [r7, #0]
 8001768:	68da      	ldr	r2, [r3, #12]
 800176a:	69fb      	ldr	r3, [r7, #28]
 800176c:	005b      	lsls	r3, r3, #1
 800176e:	fa02 f303 	lsl.w	r3, r2, r3
 8001772:	69ba      	ldr	r2, [r7, #24]
 8001774:	4313      	orrs	r3, r2
 8001776:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	69ba      	ldr	r2, [r7, #24]
 800177c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	685b      	ldr	r3, [r3, #4]
 8001782:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001784:	2201      	movs	r2, #1
 8001786:	69fb      	ldr	r3, [r7, #28]
 8001788:	fa02 f303 	lsl.w	r3, r2, r3
 800178c:	43db      	mvns	r3, r3
 800178e:	69ba      	ldr	r2, [r7, #24]
 8001790:	4013      	ands	r3, r2
 8001792:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001794:	683b      	ldr	r3, [r7, #0]
 8001796:	685b      	ldr	r3, [r3, #4]
 8001798:	091b      	lsrs	r3, r3, #4
 800179a:	f003 0201 	and.w	r2, r3, #1
 800179e:	69fb      	ldr	r3, [r7, #28]
 80017a0:	fa02 f303 	lsl.w	r3, r2, r3
 80017a4:	69ba      	ldr	r2, [r7, #24]
 80017a6:	4313      	orrs	r3, r2
 80017a8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	69ba      	ldr	r2, [r7, #24]
 80017ae:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80017b0:	683b      	ldr	r3, [r7, #0]
 80017b2:	685b      	ldr	r3, [r3, #4]
 80017b4:	f003 0303 	and.w	r3, r3, #3
 80017b8:	2b03      	cmp	r3, #3
 80017ba:	d017      	beq.n	80017ec <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	68db      	ldr	r3, [r3, #12]
 80017c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80017c2:	69fb      	ldr	r3, [r7, #28]
 80017c4:	005b      	lsls	r3, r3, #1
 80017c6:	2203      	movs	r2, #3
 80017c8:	fa02 f303 	lsl.w	r3, r2, r3
 80017cc:	43db      	mvns	r3, r3
 80017ce:	69ba      	ldr	r2, [r7, #24]
 80017d0:	4013      	ands	r3, r2
 80017d2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80017d4:	683b      	ldr	r3, [r7, #0]
 80017d6:	689a      	ldr	r2, [r3, #8]
 80017d8:	69fb      	ldr	r3, [r7, #28]
 80017da:	005b      	lsls	r3, r3, #1
 80017dc:	fa02 f303 	lsl.w	r3, r2, r3
 80017e0:	69ba      	ldr	r2, [r7, #24]
 80017e2:	4313      	orrs	r3, r2
 80017e4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	69ba      	ldr	r2, [r7, #24]
 80017ea:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80017ec:	683b      	ldr	r3, [r7, #0]
 80017ee:	685b      	ldr	r3, [r3, #4]
 80017f0:	f003 0303 	and.w	r3, r3, #3
 80017f4:	2b02      	cmp	r3, #2
 80017f6:	d123      	bne.n	8001840 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80017f8:	69fb      	ldr	r3, [r7, #28]
 80017fa:	08da      	lsrs	r2, r3, #3
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	3208      	adds	r2, #8
 8001800:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001804:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001806:	69fb      	ldr	r3, [r7, #28]
 8001808:	f003 0307 	and.w	r3, r3, #7
 800180c:	009b      	lsls	r3, r3, #2
 800180e:	220f      	movs	r2, #15
 8001810:	fa02 f303 	lsl.w	r3, r2, r3
 8001814:	43db      	mvns	r3, r3
 8001816:	69ba      	ldr	r2, [r7, #24]
 8001818:	4013      	ands	r3, r2
 800181a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800181c:	683b      	ldr	r3, [r7, #0]
 800181e:	691a      	ldr	r2, [r3, #16]
 8001820:	69fb      	ldr	r3, [r7, #28]
 8001822:	f003 0307 	and.w	r3, r3, #7
 8001826:	009b      	lsls	r3, r3, #2
 8001828:	fa02 f303 	lsl.w	r3, r2, r3
 800182c:	69ba      	ldr	r2, [r7, #24]
 800182e:	4313      	orrs	r3, r2
 8001830:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001832:	69fb      	ldr	r3, [r7, #28]
 8001834:	08da      	lsrs	r2, r3, #3
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	3208      	adds	r2, #8
 800183a:	69b9      	ldr	r1, [r7, #24]
 800183c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001846:	69fb      	ldr	r3, [r7, #28]
 8001848:	005b      	lsls	r3, r3, #1
 800184a:	2203      	movs	r2, #3
 800184c:	fa02 f303 	lsl.w	r3, r2, r3
 8001850:	43db      	mvns	r3, r3
 8001852:	69ba      	ldr	r2, [r7, #24]
 8001854:	4013      	ands	r3, r2
 8001856:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001858:	683b      	ldr	r3, [r7, #0]
 800185a:	685b      	ldr	r3, [r3, #4]
 800185c:	f003 0203 	and.w	r2, r3, #3
 8001860:	69fb      	ldr	r3, [r7, #28]
 8001862:	005b      	lsls	r3, r3, #1
 8001864:	fa02 f303 	lsl.w	r3, r2, r3
 8001868:	69ba      	ldr	r2, [r7, #24]
 800186a:	4313      	orrs	r3, r2
 800186c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	69ba      	ldr	r2, [r7, #24]
 8001872:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001874:	683b      	ldr	r3, [r7, #0]
 8001876:	685b      	ldr	r3, [r3, #4]
 8001878:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800187c:	2b00      	cmp	r3, #0
 800187e:	f000 80be 	beq.w	80019fe <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001882:	4b66      	ldr	r3, [pc, #408]	; (8001a1c <HAL_GPIO_Init+0x324>)
 8001884:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001886:	4a65      	ldr	r2, [pc, #404]	; (8001a1c <HAL_GPIO_Init+0x324>)
 8001888:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800188c:	6453      	str	r3, [r2, #68]	; 0x44
 800188e:	4b63      	ldr	r3, [pc, #396]	; (8001a1c <HAL_GPIO_Init+0x324>)
 8001890:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001892:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001896:	60fb      	str	r3, [r7, #12]
 8001898:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800189a:	4a61      	ldr	r2, [pc, #388]	; (8001a20 <HAL_GPIO_Init+0x328>)
 800189c:	69fb      	ldr	r3, [r7, #28]
 800189e:	089b      	lsrs	r3, r3, #2
 80018a0:	3302      	adds	r3, #2
 80018a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80018a8:	69fb      	ldr	r3, [r7, #28]
 80018aa:	f003 0303 	and.w	r3, r3, #3
 80018ae:	009b      	lsls	r3, r3, #2
 80018b0:	220f      	movs	r2, #15
 80018b2:	fa02 f303 	lsl.w	r3, r2, r3
 80018b6:	43db      	mvns	r3, r3
 80018b8:	69ba      	ldr	r2, [r7, #24]
 80018ba:	4013      	ands	r3, r2
 80018bc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	4a58      	ldr	r2, [pc, #352]	; (8001a24 <HAL_GPIO_Init+0x32c>)
 80018c2:	4293      	cmp	r3, r2
 80018c4:	d037      	beq.n	8001936 <HAL_GPIO_Init+0x23e>
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	4a57      	ldr	r2, [pc, #348]	; (8001a28 <HAL_GPIO_Init+0x330>)
 80018ca:	4293      	cmp	r3, r2
 80018cc:	d031      	beq.n	8001932 <HAL_GPIO_Init+0x23a>
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	4a56      	ldr	r2, [pc, #344]	; (8001a2c <HAL_GPIO_Init+0x334>)
 80018d2:	4293      	cmp	r3, r2
 80018d4:	d02b      	beq.n	800192e <HAL_GPIO_Init+0x236>
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	4a55      	ldr	r2, [pc, #340]	; (8001a30 <HAL_GPIO_Init+0x338>)
 80018da:	4293      	cmp	r3, r2
 80018dc:	d025      	beq.n	800192a <HAL_GPIO_Init+0x232>
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	4a54      	ldr	r2, [pc, #336]	; (8001a34 <HAL_GPIO_Init+0x33c>)
 80018e2:	4293      	cmp	r3, r2
 80018e4:	d01f      	beq.n	8001926 <HAL_GPIO_Init+0x22e>
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	4a53      	ldr	r2, [pc, #332]	; (8001a38 <HAL_GPIO_Init+0x340>)
 80018ea:	4293      	cmp	r3, r2
 80018ec:	d019      	beq.n	8001922 <HAL_GPIO_Init+0x22a>
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	4a52      	ldr	r2, [pc, #328]	; (8001a3c <HAL_GPIO_Init+0x344>)
 80018f2:	4293      	cmp	r3, r2
 80018f4:	d013      	beq.n	800191e <HAL_GPIO_Init+0x226>
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	4a51      	ldr	r2, [pc, #324]	; (8001a40 <HAL_GPIO_Init+0x348>)
 80018fa:	4293      	cmp	r3, r2
 80018fc:	d00d      	beq.n	800191a <HAL_GPIO_Init+0x222>
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	4a50      	ldr	r2, [pc, #320]	; (8001a44 <HAL_GPIO_Init+0x34c>)
 8001902:	4293      	cmp	r3, r2
 8001904:	d007      	beq.n	8001916 <HAL_GPIO_Init+0x21e>
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	4a4f      	ldr	r2, [pc, #316]	; (8001a48 <HAL_GPIO_Init+0x350>)
 800190a:	4293      	cmp	r3, r2
 800190c:	d101      	bne.n	8001912 <HAL_GPIO_Init+0x21a>
 800190e:	2309      	movs	r3, #9
 8001910:	e012      	b.n	8001938 <HAL_GPIO_Init+0x240>
 8001912:	230a      	movs	r3, #10
 8001914:	e010      	b.n	8001938 <HAL_GPIO_Init+0x240>
 8001916:	2308      	movs	r3, #8
 8001918:	e00e      	b.n	8001938 <HAL_GPIO_Init+0x240>
 800191a:	2307      	movs	r3, #7
 800191c:	e00c      	b.n	8001938 <HAL_GPIO_Init+0x240>
 800191e:	2306      	movs	r3, #6
 8001920:	e00a      	b.n	8001938 <HAL_GPIO_Init+0x240>
 8001922:	2305      	movs	r3, #5
 8001924:	e008      	b.n	8001938 <HAL_GPIO_Init+0x240>
 8001926:	2304      	movs	r3, #4
 8001928:	e006      	b.n	8001938 <HAL_GPIO_Init+0x240>
 800192a:	2303      	movs	r3, #3
 800192c:	e004      	b.n	8001938 <HAL_GPIO_Init+0x240>
 800192e:	2302      	movs	r3, #2
 8001930:	e002      	b.n	8001938 <HAL_GPIO_Init+0x240>
 8001932:	2301      	movs	r3, #1
 8001934:	e000      	b.n	8001938 <HAL_GPIO_Init+0x240>
 8001936:	2300      	movs	r3, #0
 8001938:	69fa      	ldr	r2, [r7, #28]
 800193a:	f002 0203 	and.w	r2, r2, #3
 800193e:	0092      	lsls	r2, r2, #2
 8001940:	4093      	lsls	r3, r2
 8001942:	69ba      	ldr	r2, [r7, #24]
 8001944:	4313      	orrs	r3, r2
 8001946:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001948:	4935      	ldr	r1, [pc, #212]	; (8001a20 <HAL_GPIO_Init+0x328>)
 800194a:	69fb      	ldr	r3, [r7, #28]
 800194c:	089b      	lsrs	r3, r3, #2
 800194e:	3302      	adds	r3, #2
 8001950:	69ba      	ldr	r2, [r7, #24]
 8001952:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001956:	4b3d      	ldr	r3, [pc, #244]	; (8001a4c <HAL_GPIO_Init+0x354>)
 8001958:	689b      	ldr	r3, [r3, #8]
 800195a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800195c:	693b      	ldr	r3, [r7, #16]
 800195e:	43db      	mvns	r3, r3
 8001960:	69ba      	ldr	r2, [r7, #24]
 8001962:	4013      	ands	r3, r2
 8001964:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001966:	683b      	ldr	r3, [r7, #0]
 8001968:	685b      	ldr	r3, [r3, #4]
 800196a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800196e:	2b00      	cmp	r3, #0
 8001970:	d003      	beq.n	800197a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001972:	69ba      	ldr	r2, [r7, #24]
 8001974:	693b      	ldr	r3, [r7, #16]
 8001976:	4313      	orrs	r3, r2
 8001978:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800197a:	4a34      	ldr	r2, [pc, #208]	; (8001a4c <HAL_GPIO_Init+0x354>)
 800197c:	69bb      	ldr	r3, [r7, #24]
 800197e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001980:	4b32      	ldr	r3, [pc, #200]	; (8001a4c <HAL_GPIO_Init+0x354>)
 8001982:	68db      	ldr	r3, [r3, #12]
 8001984:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001986:	693b      	ldr	r3, [r7, #16]
 8001988:	43db      	mvns	r3, r3
 800198a:	69ba      	ldr	r2, [r7, #24]
 800198c:	4013      	ands	r3, r2
 800198e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001990:	683b      	ldr	r3, [r7, #0]
 8001992:	685b      	ldr	r3, [r3, #4]
 8001994:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001998:	2b00      	cmp	r3, #0
 800199a:	d003      	beq.n	80019a4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800199c:	69ba      	ldr	r2, [r7, #24]
 800199e:	693b      	ldr	r3, [r7, #16]
 80019a0:	4313      	orrs	r3, r2
 80019a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80019a4:	4a29      	ldr	r2, [pc, #164]	; (8001a4c <HAL_GPIO_Init+0x354>)
 80019a6:	69bb      	ldr	r3, [r7, #24]
 80019a8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80019aa:	4b28      	ldr	r3, [pc, #160]	; (8001a4c <HAL_GPIO_Init+0x354>)
 80019ac:	685b      	ldr	r3, [r3, #4]
 80019ae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019b0:	693b      	ldr	r3, [r7, #16]
 80019b2:	43db      	mvns	r3, r3
 80019b4:	69ba      	ldr	r2, [r7, #24]
 80019b6:	4013      	ands	r3, r2
 80019b8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80019ba:	683b      	ldr	r3, [r7, #0]
 80019bc:	685b      	ldr	r3, [r3, #4]
 80019be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d003      	beq.n	80019ce <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80019c6:	69ba      	ldr	r2, [r7, #24]
 80019c8:	693b      	ldr	r3, [r7, #16]
 80019ca:	4313      	orrs	r3, r2
 80019cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80019ce:	4a1f      	ldr	r2, [pc, #124]	; (8001a4c <HAL_GPIO_Init+0x354>)
 80019d0:	69bb      	ldr	r3, [r7, #24]
 80019d2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80019d4:	4b1d      	ldr	r3, [pc, #116]	; (8001a4c <HAL_GPIO_Init+0x354>)
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019da:	693b      	ldr	r3, [r7, #16]
 80019dc:	43db      	mvns	r3, r3
 80019de:	69ba      	ldr	r2, [r7, #24]
 80019e0:	4013      	ands	r3, r2
 80019e2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80019e4:	683b      	ldr	r3, [r7, #0]
 80019e6:	685b      	ldr	r3, [r3, #4]
 80019e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d003      	beq.n	80019f8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80019f0:	69ba      	ldr	r2, [r7, #24]
 80019f2:	693b      	ldr	r3, [r7, #16]
 80019f4:	4313      	orrs	r3, r2
 80019f6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80019f8:	4a14      	ldr	r2, [pc, #80]	; (8001a4c <HAL_GPIO_Init+0x354>)
 80019fa:	69bb      	ldr	r3, [r7, #24]
 80019fc:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 80019fe:	69fb      	ldr	r3, [r7, #28]
 8001a00:	3301      	adds	r3, #1
 8001a02:	61fb      	str	r3, [r7, #28]
 8001a04:	69fb      	ldr	r3, [r7, #28]
 8001a06:	2b0f      	cmp	r3, #15
 8001a08:	f67f ae86 	bls.w	8001718 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001a0c:	bf00      	nop
 8001a0e:	bf00      	nop
 8001a10:	3724      	adds	r7, #36	; 0x24
 8001a12:	46bd      	mov	sp, r7
 8001a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a18:	4770      	bx	lr
 8001a1a:	bf00      	nop
 8001a1c:	40023800 	.word	0x40023800
 8001a20:	40013800 	.word	0x40013800
 8001a24:	40020000 	.word	0x40020000
 8001a28:	40020400 	.word	0x40020400
 8001a2c:	40020800 	.word	0x40020800
 8001a30:	40020c00 	.word	0x40020c00
 8001a34:	40021000 	.word	0x40021000
 8001a38:	40021400 	.word	0x40021400
 8001a3c:	40021800 	.word	0x40021800
 8001a40:	40021c00 	.word	0x40021c00
 8001a44:	40022000 	.word	0x40022000
 8001a48:	40022400 	.word	0x40022400
 8001a4c:	40013c00 	.word	0x40013c00

08001a50 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a50:	b480      	push	{r7}
 8001a52:	b083      	sub	sp, #12
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	6078      	str	r0, [r7, #4]
 8001a58:	460b      	mov	r3, r1
 8001a5a:	807b      	strh	r3, [r7, #2]
 8001a5c:	4613      	mov	r3, r2
 8001a5e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001a60:	787b      	ldrb	r3, [r7, #1]
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d003      	beq.n	8001a6e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001a66:	887a      	ldrh	r2, [r7, #2]
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8001a6c:	e003      	b.n	8001a76 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8001a6e:	887b      	ldrh	r3, [r7, #2]
 8001a70:	041a      	lsls	r2, r3, #16
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	619a      	str	r2, [r3, #24]
}
 8001a76:	bf00      	nop
 8001a78:	370c      	adds	r7, #12
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a80:	4770      	bx	lr
	...

08001a84 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	b086      	sub	sp, #24
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d101      	bne.n	8001a9a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8001a96:	2301      	movs	r3, #1
 8001a98:	e29b      	b.n	8001fd2 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	f003 0301 	and.w	r3, r3, #1
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	f000 8087 	beq.w	8001bb6 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001aa8:	4b96      	ldr	r3, [pc, #600]	; (8001d04 <HAL_RCC_OscConfig+0x280>)
 8001aaa:	689b      	ldr	r3, [r3, #8]
 8001aac:	f003 030c 	and.w	r3, r3, #12
 8001ab0:	2b04      	cmp	r3, #4
 8001ab2:	d00c      	beq.n	8001ace <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001ab4:	4b93      	ldr	r3, [pc, #588]	; (8001d04 <HAL_RCC_OscConfig+0x280>)
 8001ab6:	689b      	ldr	r3, [r3, #8]
 8001ab8:	f003 030c 	and.w	r3, r3, #12
 8001abc:	2b08      	cmp	r3, #8
 8001abe:	d112      	bne.n	8001ae6 <HAL_RCC_OscConfig+0x62>
 8001ac0:	4b90      	ldr	r3, [pc, #576]	; (8001d04 <HAL_RCC_OscConfig+0x280>)
 8001ac2:	685b      	ldr	r3, [r3, #4]
 8001ac4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001ac8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001acc:	d10b      	bne.n	8001ae6 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ace:	4b8d      	ldr	r3, [pc, #564]	; (8001d04 <HAL_RCC_OscConfig+0x280>)
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d06c      	beq.n	8001bb4 <HAL_RCC_OscConfig+0x130>
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	685b      	ldr	r3, [r3, #4]
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d168      	bne.n	8001bb4 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001ae2:	2301      	movs	r3, #1
 8001ae4:	e275      	b.n	8001fd2 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	685b      	ldr	r3, [r3, #4]
 8001aea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001aee:	d106      	bne.n	8001afe <HAL_RCC_OscConfig+0x7a>
 8001af0:	4b84      	ldr	r3, [pc, #528]	; (8001d04 <HAL_RCC_OscConfig+0x280>)
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	4a83      	ldr	r2, [pc, #524]	; (8001d04 <HAL_RCC_OscConfig+0x280>)
 8001af6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001afa:	6013      	str	r3, [r2, #0]
 8001afc:	e02e      	b.n	8001b5c <HAL_RCC_OscConfig+0xd8>
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	685b      	ldr	r3, [r3, #4]
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d10c      	bne.n	8001b20 <HAL_RCC_OscConfig+0x9c>
 8001b06:	4b7f      	ldr	r3, [pc, #508]	; (8001d04 <HAL_RCC_OscConfig+0x280>)
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	4a7e      	ldr	r2, [pc, #504]	; (8001d04 <HAL_RCC_OscConfig+0x280>)
 8001b0c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b10:	6013      	str	r3, [r2, #0]
 8001b12:	4b7c      	ldr	r3, [pc, #496]	; (8001d04 <HAL_RCC_OscConfig+0x280>)
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	4a7b      	ldr	r2, [pc, #492]	; (8001d04 <HAL_RCC_OscConfig+0x280>)
 8001b18:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b1c:	6013      	str	r3, [r2, #0]
 8001b1e:	e01d      	b.n	8001b5c <HAL_RCC_OscConfig+0xd8>
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	685b      	ldr	r3, [r3, #4]
 8001b24:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001b28:	d10c      	bne.n	8001b44 <HAL_RCC_OscConfig+0xc0>
 8001b2a:	4b76      	ldr	r3, [pc, #472]	; (8001d04 <HAL_RCC_OscConfig+0x280>)
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	4a75      	ldr	r2, [pc, #468]	; (8001d04 <HAL_RCC_OscConfig+0x280>)
 8001b30:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001b34:	6013      	str	r3, [r2, #0]
 8001b36:	4b73      	ldr	r3, [pc, #460]	; (8001d04 <HAL_RCC_OscConfig+0x280>)
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	4a72      	ldr	r2, [pc, #456]	; (8001d04 <HAL_RCC_OscConfig+0x280>)
 8001b3c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b40:	6013      	str	r3, [r2, #0]
 8001b42:	e00b      	b.n	8001b5c <HAL_RCC_OscConfig+0xd8>
 8001b44:	4b6f      	ldr	r3, [pc, #444]	; (8001d04 <HAL_RCC_OscConfig+0x280>)
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	4a6e      	ldr	r2, [pc, #440]	; (8001d04 <HAL_RCC_OscConfig+0x280>)
 8001b4a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b4e:	6013      	str	r3, [r2, #0]
 8001b50:	4b6c      	ldr	r3, [pc, #432]	; (8001d04 <HAL_RCC_OscConfig+0x280>)
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	4a6b      	ldr	r2, [pc, #428]	; (8001d04 <HAL_RCC_OscConfig+0x280>)
 8001b56:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b5a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	685b      	ldr	r3, [r3, #4]
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d013      	beq.n	8001b8c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b64:	f7ff fcda 	bl	800151c <HAL_GetTick>
 8001b68:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b6a:	e008      	b.n	8001b7e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b6c:	f7ff fcd6 	bl	800151c <HAL_GetTick>
 8001b70:	4602      	mov	r2, r0
 8001b72:	693b      	ldr	r3, [r7, #16]
 8001b74:	1ad3      	subs	r3, r2, r3
 8001b76:	2b64      	cmp	r3, #100	; 0x64
 8001b78:	d901      	bls.n	8001b7e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001b7a:	2303      	movs	r3, #3
 8001b7c:	e229      	b.n	8001fd2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b7e:	4b61      	ldr	r3, [pc, #388]	; (8001d04 <HAL_RCC_OscConfig+0x280>)
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d0f0      	beq.n	8001b6c <HAL_RCC_OscConfig+0xe8>
 8001b8a:	e014      	b.n	8001bb6 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b8c:	f7ff fcc6 	bl	800151c <HAL_GetTick>
 8001b90:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b92:	e008      	b.n	8001ba6 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b94:	f7ff fcc2 	bl	800151c <HAL_GetTick>
 8001b98:	4602      	mov	r2, r0
 8001b9a:	693b      	ldr	r3, [r7, #16]
 8001b9c:	1ad3      	subs	r3, r2, r3
 8001b9e:	2b64      	cmp	r3, #100	; 0x64
 8001ba0:	d901      	bls.n	8001ba6 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001ba2:	2303      	movs	r3, #3
 8001ba4:	e215      	b.n	8001fd2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ba6:	4b57      	ldr	r3, [pc, #348]	; (8001d04 <HAL_RCC_OscConfig+0x280>)
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d1f0      	bne.n	8001b94 <HAL_RCC_OscConfig+0x110>
 8001bb2:	e000      	b.n	8001bb6 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001bb4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	f003 0302 	and.w	r3, r3, #2
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d069      	beq.n	8001c96 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001bc2:	4b50      	ldr	r3, [pc, #320]	; (8001d04 <HAL_RCC_OscConfig+0x280>)
 8001bc4:	689b      	ldr	r3, [r3, #8]
 8001bc6:	f003 030c 	and.w	r3, r3, #12
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d00b      	beq.n	8001be6 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001bce:	4b4d      	ldr	r3, [pc, #308]	; (8001d04 <HAL_RCC_OscConfig+0x280>)
 8001bd0:	689b      	ldr	r3, [r3, #8]
 8001bd2:	f003 030c 	and.w	r3, r3, #12
 8001bd6:	2b08      	cmp	r3, #8
 8001bd8:	d11c      	bne.n	8001c14 <HAL_RCC_OscConfig+0x190>
 8001bda:	4b4a      	ldr	r3, [pc, #296]	; (8001d04 <HAL_RCC_OscConfig+0x280>)
 8001bdc:	685b      	ldr	r3, [r3, #4]
 8001bde:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d116      	bne.n	8001c14 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001be6:	4b47      	ldr	r3, [pc, #284]	; (8001d04 <HAL_RCC_OscConfig+0x280>)
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	f003 0302 	and.w	r3, r3, #2
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d005      	beq.n	8001bfe <HAL_RCC_OscConfig+0x17a>
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	68db      	ldr	r3, [r3, #12]
 8001bf6:	2b01      	cmp	r3, #1
 8001bf8:	d001      	beq.n	8001bfe <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8001bfa:	2301      	movs	r3, #1
 8001bfc:	e1e9      	b.n	8001fd2 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001bfe:	4b41      	ldr	r3, [pc, #260]	; (8001d04 <HAL_RCC_OscConfig+0x280>)
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	691b      	ldr	r3, [r3, #16]
 8001c0a:	00db      	lsls	r3, r3, #3
 8001c0c:	493d      	ldr	r1, [pc, #244]	; (8001d04 <HAL_RCC_OscConfig+0x280>)
 8001c0e:	4313      	orrs	r3, r2
 8001c10:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c12:	e040      	b.n	8001c96 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	68db      	ldr	r3, [r3, #12]
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d023      	beq.n	8001c64 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001c1c:	4b39      	ldr	r3, [pc, #228]	; (8001d04 <HAL_RCC_OscConfig+0x280>)
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	4a38      	ldr	r2, [pc, #224]	; (8001d04 <HAL_RCC_OscConfig+0x280>)
 8001c22:	f043 0301 	orr.w	r3, r3, #1
 8001c26:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c28:	f7ff fc78 	bl	800151c <HAL_GetTick>
 8001c2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c2e:	e008      	b.n	8001c42 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c30:	f7ff fc74 	bl	800151c <HAL_GetTick>
 8001c34:	4602      	mov	r2, r0
 8001c36:	693b      	ldr	r3, [r7, #16]
 8001c38:	1ad3      	subs	r3, r2, r3
 8001c3a:	2b02      	cmp	r3, #2
 8001c3c:	d901      	bls.n	8001c42 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8001c3e:	2303      	movs	r3, #3
 8001c40:	e1c7      	b.n	8001fd2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c42:	4b30      	ldr	r3, [pc, #192]	; (8001d04 <HAL_RCC_OscConfig+0x280>)
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	f003 0302 	and.w	r3, r3, #2
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d0f0      	beq.n	8001c30 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c4e:	4b2d      	ldr	r3, [pc, #180]	; (8001d04 <HAL_RCC_OscConfig+0x280>)
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	691b      	ldr	r3, [r3, #16]
 8001c5a:	00db      	lsls	r3, r3, #3
 8001c5c:	4929      	ldr	r1, [pc, #164]	; (8001d04 <HAL_RCC_OscConfig+0x280>)
 8001c5e:	4313      	orrs	r3, r2
 8001c60:	600b      	str	r3, [r1, #0]
 8001c62:	e018      	b.n	8001c96 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001c64:	4b27      	ldr	r3, [pc, #156]	; (8001d04 <HAL_RCC_OscConfig+0x280>)
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	4a26      	ldr	r2, [pc, #152]	; (8001d04 <HAL_RCC_OscConfig+0x280>)
 8001c6a:	f023 0301 	bic.w	r3, r3, #1
 8001c6e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c70:	f7ff fc54 	bl	800151c <HAL_GetTick>
 8001c74:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c76:	e008      	b.n	8001c8a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c78:	f7ff fc50 	bl	800151c <HAL_GetTick>
 8001c7c:	4602      	mov	r2, r0
 8001c7e:	693b      	ldr	r3, [r7, #16]
 8001c80:	1ad3      	subs	r3, r2, r3
 8001c82:	2b02      	cmp	r3, #2
 8001c84:	d901      	bls.n	8001c8a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001c86:	2303      	movs	r3, #3
 8001c88:	e1a3      	b.n	8001fd2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c8a:	4b1e      	ldr	r3, [pc, #120]	; (8001d04 <HAL_RCC_OscConfig+0x280>)
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	f003 0302 	and.w	r3, r3, #2
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d1f0      	bne.n	8001c78 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	f003 0308 	and.w	r3, r3, #8
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d038      	beq.n	8001d14 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	695b      	ldr	r3, [r3, #20]
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d019      	beq.n	8001cde <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001caa:	4b16      	ldr	r3, [pc, #88]	; (8001d04 <HAL_RCC_OscConfig+0x280>)
 8001cac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001cae:	4a15      	ldr	r2, [pc, #84]	; (8001d04 <HAL_RCC_OscConfig+0x280>)
 8001cb0:	f043 0301 	orr.w	r3, r3, #1
 8001cb4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cb6:	f7ff fc31 	bl	800151c <HAL_GetTick>
 8001cba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001cbc:	e008      	b.n	8001cd0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001cbe:	f7ff fc2d 	bl	800151c <HAL_GetTick>
 8001cc2:	4602      	mov	r2, r0
 8001cc4:	693b      	ldr	r3, [r7, #16]
 8001cc6:	1ad3      	subs	r3, r2, r3
 8001cc8:	2b02      	cmp	r3, #2
 8001cca:	d901      	bls.n	8001cd0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001ccc:	2303      	movs	r3, #3
 8001cce:	e180      	b.n	8001fd2 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001cd0:	4b0c      	ldr	r3, [pc, #48]	; (8001d04 <HAL_RCC_OscConfig+0x280>)
 8001cd2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001cd4:	f003 0302 	and.w	r3, r3, #2
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d0f0      	beq.n	8001cbe <HAL_RCC_OscConfig+0x23a>
 8001cdc:	e01a      	b.n	8001d14 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001cde:	4b09      	ldr	r3, [pc, #36]	; (8001d04 <HAL_RCC_OscConfig+0x280>)
 8001ce0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001ce2:	4a08      	ldr	r2, [pc, #32]	; (8001d04 <HAL_RCC_OscConfig+0x280>)
 8001ce4:	f023 0301 	bic.w	r3, r3, #1
 8001ce8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cea:	f7ff fc17 	bl	800151c <HAL_GetTick>
 8001cee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001cf0:	e00a      	b.n	8001d08 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001cf2:	f7ff fc13 	bl	800151c <HAL_GetTick>
 8001cf6:	4602      	mov	r2, r0
 8001cf8:	693b      	ldr	r3, [r7, #16]
 8001cfa:	1ad3      	subs	r3, r2, r3
 8001cfc:	2b02      	cmp	r3, #2
 8001cfe:	d903      	bls.n	8001d08 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001d00:	2303      	movs	r3, #3
 8001d02:	e166      	b.n	8001fd2 <HAL_RCC_OscConfig+0x54e>
 8001d04:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d08:	4b92      	ldr	r3, [pc, #584]	; (8001f54 <HAL_RCC_OscConfig+0x4d0>)
 8001d0a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001d0c:	f003 0302 	and.w	r3, r3, #2
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d1ee      	bne.n	8001cf2 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	f003 0304 	and.w	r3, r3, #4
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	f000 80a4 	beq.w	8001e6a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d22:	4b8c      	ldr	r3, [pc, #560]	; (8001f54 <HAL_RCC_OscConfig+0x4d0>)
 8001d24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d10d      	bne.n	8001d4a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d2e:	4b89      	ldr	r3, [pc, #548]	; (8001f54 <HAL_RCC_OscConfig+0x4d0>)
 8001d30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d32:	4a88      	ldr	r2, [pc, #544]	; (8001f54 <HAL_RCC_OscConfig+0x4d0>)
 8001d34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d38:	6413      	str	r3, [r2, #64]	; 0x40
 8001d3a:	4b86      	ldr	r3, [pc, #536]	; (8001f54 <HAL_RCC_OscConfig+0x4d0>)
 8001d3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d42:	60bb      	str	r3, [r7, #8]
 8001d44:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001d46:	2301      	movs	r3, #1
 8001d48:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001d4a:	4b83      	ldr	r3, [pc, #524]	; (8001f58 <HAL_RCC_OscConfig+0x4d4>)
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d118      	bne.n	8001d88 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8001d56:	4b80      	ldr	r3, [pc, #512]	; (8001f58 <HAL_RCC_OscConfig+0x4d4>)
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	4a7f      	ldr	r2, [pc, #508]	; (8001f58 <HAL_RCC_OscConfig+0x4d4>)
 8001d5c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d60:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d62:	f7ff fbdb 	bl	800151c <HAL_GetTick>
 8001d66:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001d68:	e008      	b.n	8001d7c <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d6a:	f7ff fbd7 	bl	800151c <HAL_GetTick>
 8001d6e:	4602      	mov	r2, r0
 8001d70:	693b      	ldr	r3, [r7, #16]
 8001d72:	1ad3      	subs	r3, r2, r3
 8001d74:	2b64      	cmp	r3, #100	; 0x64
 8001d76:	d901      	bls.n	8001d7c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8001d78:	2303      	movs	r3, #3
 8001d7a:	e12a      	b.n	8001fd2 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001d7c:	4b76      	ldr	r3, [pc, #472]	; (8001f58 <HAL_RCC_OscConfig+0x4d4>)
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d0f0      	beq.n	8001d6a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	689b      	ldr	r3, [r3, #8]
 8001d8c:	2b01      	cmp	r3, #1
 8001d8e:	d106      	bne.n	8001d9e <HAL_RCC_OscConfig+0x31a>
 8001d90:	4b70      	ldr	r3, [pc, #448]	; (8001f54 <HAL_RCC_OscConfig+0x4d0>)
 8001d92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d94:	4a6f      	ldr	r2, [pc, #444]	; (8001f54 <HAL_RCC_OscConfig+0x4d0>)
 8001d96:	f043 0301 	orr.w	r3, r3, #1
 8001d9a:	6713      	str	r3, [r2, #112]	; 0x70
 8001d9c:	e02d      	b.n	8001dfa <HAL_RCC_OscConfig+0x376>
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	689b      	ldr	r3, [r3, #8]
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d10c      	bne.n	8001dc0 <HAL_RCC_OscConfig+0x33c>
 8001da6:	4b6b      	ldr	r3, [pc, #428]	; (8001f54 <HAL_RCC_OscConfig+0x4d0>)
 8001da8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001daa:	4a6a      	ldr	r2, [pc, #424]	; (8001f54 <HAL_RCC_OscConfig+0x4d0>)
 8001dac:	f023 0301 	bic.w	r3, r3, #1
 8001db0:	6713      	str	r3, [r2, #112]	; 0x70
 8001db2:	4b68      	ldr	r3, [pc, #416]	; (8001f54 <HAL_RCC_OscConfig+0x4d0>)
 8001db4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001db6:	4a67      	ldr	r2, [pc, #412]	; (8001f54 <HAL_RCC_OscConfig+0x4d0>)
 8001db8:	f023 0304 	bic.w	r3, r3, #4
 8001dbc:	6713      	str	r3, [r2, #112]	; 0x70
 8001dbe:	e01c      	b.n	8001dfa <HAL_RCC_OscConfig+0x376>
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	689b      	ldr	r3, [r3, #8]
 8001dc4:	2b05      	cmp	r3, #5
 8001dc6:	d10c      	bne.n	8001de2 <HAL_RCC_OscConfig+0x35e>
 8001dc8:	4b62      	ldr	r3, [pc, #392]	; (8001f54 <HAL_RCC_OscConfig+0x4d0>)
 8001dca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001dcc:	4a61      	ldr	r2, [pc, #388]	; (8001f54 <HAL_RCC_OscConfig+0x4d0>)
 8001dce:	f043 0304 	orr.w	r3, r3, #4
 8001dd2:	6713      	str	r3, [r2, #112]	; 0x70
 8001dd4:	4b5f      	ldr	r3, [pc, #380]	; (8001f54 <HAL_RCC_OscConfig+0x4d0>)
 8001dd6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001dd8:	4a5e      	ldr	r2, [pc, #376]	; (8001f54 <HAL_RCC_OscConfig+0x4d0>)
 8001dda:	f043 0301 	orr.w	r3, r3, #1
 8001dde:	6713      	str	r3, [r2, #112]	; 0x70
 8001de0:	e00b      	b.n	8001dfa <HAL_RCC_OscConfig+0x376>
 8001de2:	4b5c      	ldr	r3, [pc, #368]	; (8001f54 <HAL_RCC_OscConfig+0x4d0>)
 8001de4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001de6:	4a5b      	ldr	r2, [pc, #364]	; (8001f54 <HAL_RCC_OscConfig+0x4d0>)
 8001de8:	f023 0301 	bic.w	r3, r3, #1
 8001dec:	6713      	str	r3, [r2, #112]	; 0x70
 8001dee:	4b59      	ldr	r3, [pc, #356]	; (8001f54 <HAL_RCC_OscConfig+0x4d0>)
 8001df0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001df2:	4a58      	ldr	r2, [pc, #352]	; (8001f54 <HAL_RCC_OscConfig+0x4d0>)
 8001df4:	f023 0304 	bic.w	r3, r3, #4
 8001df8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	689b      	ldr	r3, [r3, #8]
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d015      	beq.n	8001e2e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e02:	f7ff fb8b 	bl	800151c <HAL_GetTick>
 8001e06:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e08:	e00a      	b.n	8001e20 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e0a:	f7ff fb87 	bl	800151c <HAL_GetTick>
 8001e0e:	4602      	mov	r2, r0
 8001e10:	693b      	ldr	r3, [r7, #16]
 8001e12:	1ad3      	subs	r3, r2, r3
 8001e14:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e18:	4293      	cmp	r3, r2
 8001e1a:	d901      	bls.n	8001e20 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8001e1c:	2303      	movs	r3, #3
 8001e1e:	e0d8      	b.n	8001fd2 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e20:	4b4c      	ldr	r3, [pc, #304]	; (8001f54 <HAL_RCC_OscConfig+0x4d0>)
 8001e22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e24:	f003 0302 	and.w	r3, r3, #2
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d0ee      	beq.n	8001e0a <HAL_RCC_OscConfig+0x386>
 8001e2c:	e014      	b.n	8001e58 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e2e:	f7ff fb75 	bl	800151c <HAL_GetTick>
 8001e32:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e34:	e00a      	b.n	8001e4c <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e36:	f7ff fb71 	bl	800151c <HAL_GetTick>
 8001e3a:	4602      	mov	r2, r0
 8001e3c:	693b      	ldr	r3, [r7, #16]
 8001e3e:	1ad3      	subs	r3, r2, r3
 8001e40:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e44:	4293      	cmp	r3, r2
 8001e46:	d901      	bls.n	8001e4c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8001e48:	2303      	movs	r3, #3
 8001e4a:	e0c2      	b.n	8001fd2 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e4c:	4b41      	ldr	r3, [pc, #260]	; (8001f54 <HAL_RCC_OscConfig+0x4d0>)
 8001e4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e50:	f003 0302 	and.w	r3, r3, #2
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d1ee      	bne.n	8001e36 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001e58:	7dfb      	ldrb	r3, [r7, #23]
 8001e5a:	2b01      	cmp	r3, #1
 8001e5c:	d105      	bne.n	8001e6a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e5e:	4b3d      	ldr	r3, [pc, #244]	; (8001f54 <HAL_RCC_OscConfig+0x4d0>)
 8001e60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e62:	4a3c      	ldr	r2, [pc, #240]	; (8001f54 <HAL_RCC_OscConfig+0x4d0>)
 8001e64:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001e68:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	699b      	ldr	r3, [r3, #24]
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	f000 80ae 	beq.w	8001fd0 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001e74:	4b37      	ldr	r3, [pc, #220]	; (8001f54 <HAL_RCC_OscConfig+0x4d0>)
 8001e76:	689b      	ldr	r3, [r3, #8]
 8001e78:	f003 030c 	and.w	r3, r3, #12
 8001e7c:	2b08      	cmp	r3, #8
 8001e7e:	d06d      	beq.n	8001f5c <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	699b      	ldr	r3, [r3, #24]
 8001e84:	2b02      	cmp	r3, #2
 8001e86:	d14b      	bne.n	8001f20 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e88:	4b32      	ldr	r3, [pc, #200]	; (8001f54 <HAL_RCC_OscConfig+0x4d0>)
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	4a31      	ldr	r2, [pc, #196]	; (8001f54 <HAL_RCC_OscConfig+0x4d0>)
 8001e8e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001e92:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e94:	f7ff fb42 	bl	800151c <HAL_GetTick>
 8001e98:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e9a:	e008      	b.n	8001eae <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e9c:	f7ff fb3e 	bl	800151c <HAL_GetTick>
 8001ea0:	4602      	mov	r2, r0
 8001ea2:	693b      	ldr	r3, [r7, #16]
 8001ea4:	1ad3      	subs	r3, r2, r3
 8001ea6:	2b02      	cmp	r3, #2
 8001ea8:	d901      	bls.n	8001eae <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8001eaa:	2303      	movs	r3, #3
 8001eac:	e091      	b.n	8001fd2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001eae:	4b29      	ldr	r3, [pc, #164]	; (8001f54 <HAL_RCC_OscConfig+0x4d0>)
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d1f0      	bne.n	8001e9c <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	69da      	ldr	r2, [r3, #28]
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	6a1b      	ldr	r3, [r3, #32]
 8001ec2:	431a      	orrs	r2, r3
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ec8:	019b      	lsls	r3, r3, #6
 8001eca:	431a      	orrs	r2, r3
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ed0:	085b      	lsrs	r3, r3, #1
 8001ed2:	3b01      	subs	r3, #1
 8001ed4:	041b      	lsls	r3, r3, #16
 8001ed6:	431a      	orrs	r2, r3
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001edc:	061b      	lsls	r3, r3, #24
 8001ede:	431a      	orrs	r2, r3
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ee4:	071b      	lsls	r3, r3, #28
 8001ee6:	491b      	ldr	r1, [pc, #108]	; (8001f54 <HAL_RCC_OscConfig+0x4d0>)
 8001ee8:	4313      	orrs	r3, r2
 8001eea:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001eec:	4b19      	ldr	r3, [pc, #100]	; (8001f54 <HAL_RCC_OscConfig+0x4d0>)
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	4a18      	ldr	r2, [pc, #96]	; (8001f54 <HAL_RCC_OscConfig+0x4d0>)
 8001ef2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001ef6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ef8:	f7ff fb10 	bl	800151c <HAL_GetTick>
 8001efc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001efe:	e008      	b.n	8001f12 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f00:	f7ff fb0c 	bl	800151c <HAL_GetTick>
 8001f04:	4602      	mov	r2, r0
 8001f06:	693b      	ldr	r3, [r7, #16]
 8001f08:	1ad3      	subs	r3, r2, r3
 8001f0a:	2b02      	cmp	r3, #2
 8001f0c:	d901      	bls.n	8001f12 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8001f0e:	2303      	movs	r3, #3
 8001f10:	e05f      	b.n	8001fd2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f12:	4b10      	ldr	r3, [pc, #64]	; (8001f54 <HAL_RCC_OscConfig+0x4d0>)
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d0f0      	beq.n	8001f00 <HAL_RCC_OscConfig+0x47c>
 8001f1e:	e057      	b.n	8001fd0 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f20:	4b0c      	ldr	r3, [pc, #48]	; (8001f54 <HAL_RCC_OscConfig+0x4d0>)
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	4a0b      	ldr	r2, [pc, #44]	; (8001f54 <HAL_RCC_OscConfig+0x4d0>)
 8001f26:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001f2a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f2c:	f7ff faf6 	bl	800151c <HAL_GetTick>
 8001f30:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f32:	e008      	b.n	8001f46 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f34:	f7ff faf2 	bl	800151c <HAL_GetTick>
 8001f38:	4602      	mov	r2, r0
 8001f3a:	693b      	ldr	r3, [r7, #16]
 8001f3c:	1ad3      	subs	r3, r2, r3
 8001f3e:	2b02      	cmp	r3, #2
 8001f40:	d901      	bls.n	8001f46 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8001f42:	2303      	movs	r3, #3
 8001f44:	e045      	b.n	8001fd2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f46:	4b03      	ldr	r3, [pc, #12]	; (8001f54 <HAL_RCC_OscConfig+0x4d0>)
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d1f0      	bne.n	8001f34 <HAL_RCC_OscConfig+0x4b0>
 8001f52:	e03d      	b.n	8001fd0 <HAL_RCC_OscConfig+0x54c>
 8001f54:	40023800 	.word	0x40023800
 8001f58:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8001f5c:	4b1f      	ldr	r3, [pc, #124]	; (8001fdc <HAL_RCC_OscConfig+0x558>)
 8001f5e:	685b      	ldr	r3, [r3, #4]
 8001f60:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	699b      	ldr	r3, [r3, #24]
 8001f66:	2b01      	cmp	r3, #1
 8001f68:	d030      	beq.n	8001fcc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001f74:	429a      	cmp	r2, r3
 8001f76:	d129      	bne.n	8001fcc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f82:	429a      	cmp	r2, r3
 8001f84:	d122      	bne.n	8001fcc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001f86:	68fa      	ldr	r2, [r7, #12]
 8001f88:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001f8c:	4013      	ands	r3, r2
 8001f8e:	687a      	ldr	r2, [r7, #4]
 8001f90:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001f92:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001f94:	4293      	cmp	r3, r2
 8001f96:	d119      	bne.n	8001fcc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fa2:	085b      	lsrs	r3, r3, #1
 8001fa4:	3b01      	subs	r3, #1
 8001fa6:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001fa8:	429a      	cmp	r2, r3
 8001faa:	d10f      	bne.n	8001fcc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fb6:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001fb8:	429a      	cmp	r2, r3
 8001fba:	d107      	bne.n	8001fcc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fc6:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001fc8:	429a      	cmp	r2, r3
 8001fca:	d001      	beq.n	8001fd0 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8001fcc:	2301      	movs	r3, #1
 8001fce:	e000      	b.n	8001fd2 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8001fd0:	2300      	movs	r3, #0
}
 8001fd2:	4618      	mov	r0, r3
 8001fd4:	3718      	adds	r7, #24
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	bd80      	pop	{r7, pc}
 8001fda:	bf00      	nop
 8001fdc:	40023800 	.word	0x40023800

08001fe0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	b084      	sub	sp, #16
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	6078      	str	r0, [r7, #4]
 8001fe8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8001fea:	2300      	movs	r3, #0
 8001fec:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d101      	bne.n	8001ff8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001ff4:	2301      	movs	r3, #1
 8001ff6:	e0d0      	b.n	800219a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001ff8:	4b6a      	ldr	r3, [pc, #424]	; (80021a4 <HAL_RCC_ClockConfig+0x1c4>)
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	f003 030f 	and.w	r3, r3, #15
 8002000:	683a      	ldr	r2, [r7, #0]
 8002002:	429a      	cmp	r2, r3
 8002004:	d910      	bls.n	8002028 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002006:	4b67      	ldr	r3, [pc, #412]	; (80021a4 <HAL_RCC_ClockConfig+0x1c4>)
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	f023 020f 	bic.w	r2, r3, #15
 800200e:	4965      	ldr	r1, [pc, #404]	; (80021a4 <HAL_RCC_ClockConfig+0x1c4>)
 8002010:	683b      	ldr	r3, [r7, #0]
 8002012:	4313      	orrs	r3, r2
 8002014:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002016:	4b63      	ldr	r3, [pc, #396]	; (80021a4 <HAL_RCC_ClockConfig+0x1c4>)
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	f003 030f 	and.w	r3, r3, #15
 800201e:	683a      	ldr	r2, [r7, #0]
 8002020:	429a      	cmp	r2, r3
 8002022:	d001      	beq.n	8002028 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002024:	2301      	movs	r3, #1
 8002026:	e0b8      	b.n	800219a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	f003 0302 	and.w	r3, r3, #2
 8002030:	2b00      	cmp	r3, #0
 8002032:	d020      	beq.n	8002076 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	f003 0304 	and.w	r3, r3, #4
 800203c:	2b00      	cmp	r3, #0
 800203e:	d005      	beq.n	800204c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002040:	4b59      	ldr	r3, [pc, #356]	; (80021a8 <HAL_RCC_ClockConfig+0x1c8>)
 8002042:	689b      	ldr	r3, [r3, #8]
 8002044:	4a58      	ldr	r2, [pc, #352]	; (80021a8 <HAL_RCC_ClockConfig+0x1c8>)
 8002046:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800204a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	f003 0308 	and.w	r3, r3, #8
 8002054:	2b00      	cmp	r3, #0
 8002056:	d005      	beq.n	8002064 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002058:	4b53      	ldr	r3, [pc, #332]	; (80021a8 <HAL_RCC_ClockConfig+0x1c8>)
 800205a:	689b      	ldr	r3, [r3, #8]
 800205c:	4a52      	ldr	r2, [pc, #328]	; (80021a8 <HAL_RCC_ClockConfig+0x1c8>)
 800205e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002062:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002064:	4b50      	ldr	r3, [pc, #320]	; (80021a8 <HAL_RCC_ClockConfig+0x1c8>)
 8002066:	689b      	ldr	r3, [r3, #8]
 8002068:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	689b      	ldr	r3, [r3, #8]
 8002070:	494d      	ldr	r1, [pc, #308]	; (80021a8 <HAL_RCC_ClockConfig+0x1c8>)
 8002072:	4313      	orrs	r3, r2
 8002074:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	f003 0301 	and.w	r3, r3, #1
 800207e:	2b00      	cmp	r3, #0
 8002080:	d040      	beq.n	8002104 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	685b      	ldr	r3, [r3, #4]
 8002086:	2b01      	cmp	r3, #1
 8002088:	d107      	bne.n	800209a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800208a:	4b47      	ldr	r3, [pc, #284]	; (80021a8 <HAL_RCC_ClockConfig+0x1c8>)
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002092:	2b00      	cmp	r3, #0
 8002094:	d115      	bne.n	80020c2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002096:	2301      	movs	r3, #1
 8002098:	e07f      	b.n	800219a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	685b      	ldr	r3, [r3, #4]
 800209e:	2b02      	cmp	r3, #2
 80020a0:	d107      	bne.n	80020b2 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80020a2:	4b41      	ldr	r3, [pc, #260]	; (80021a8 <HAL_RCC_ClockConfig+0x1c8>)
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d109      	bne.n	80020c2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80020ae:	2301      	movs	r3, #1
 80020b0:	e073      	b.n	800219a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020b2:	4b3d      	ldr	r3, [pc, #244]	; (80021a8 <HAL_RCC_ClockConfig+0x1c8>)
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f003 0302 	and.w	r3, r3, #2
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d101      	bne.n	80020c2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80020be:	2301      	movs	r3, #1
 80020c0:	e06b      	b.n	800219a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80020c2:	4b39      	ldr	r3, [pc, #228]	; (80021a8 <HAL_RCC_ClockConfig+0x1c8>)
 80020c4:	689b      	ldr	r3, [r3, #8]
 80020c6:	f023 0203 	bic.w	r2, r3, #3
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	685b      	ldr	r3, [r3, #4]
 80020ce:	4936      	ldr	r1, [pc, #216]	; (80021a8 <HAL_RCC_ClockConfig+0x1c8>)
 80020d0:	4313      	orrs	r3, r2
 80020d2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80020d4:	f7ff fa22 	bl	800151c <HAL_GetTick>
 80020d8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020da:	e00a      	b.n	80020f2 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80020dc:	f7ff fa1e 	bl	800151c <HAL_GetTick>
 80020e0:	4602      	mov	r2, r0
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	1ad3      	subs	r3, r2, r3
 80020e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80020ea:	4293      	cmp	r3, r2
 80020ec:	d901      	bls.n	80020f2 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80020ee:	2303      	movs	r3, #3
 80020f0:	e053      	b.n	800219a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020f2:	4b2d      	ldr	r3, [pc, #180]	; (80021a8 <HAL_RCC_ClockConfig+0x1c8>)
 80020f4:	689b      	ldr	r3, [r3, #8]
 80020f6:	f003 020c 	and.w	r2, r3, #12
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	685b      	ldr	r3, [r3, #4]
 80020fe:	009b      	lsls	r3, r3, #2
 8002100:	429a      	cmp	r2, r3
 8002102:	d1eb      	bne.n	80020dc <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002104:	4b27      	ldr	r3, [pc, #156]	; (80021a4 <HAL_RCC_ClockConfig+0x1c4>)
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	f003 030f 	and.w	r3, r3, #15
 800210c:	683a      	ldr	r2, [r7, #0]
 800210e:	429a      	cmp	r2, r3
 8002110:	d210      	bcs.n	8002134 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002112:	4b24      	ldr	r3, [pc, #144]	; (80021a4 <HAL_RCC_ClockConfig+0x1c4>)
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	f023 020f 	bic.w	r2, r3, #15
 800211a:	4922      	ldr	r1, [pc, #136]	; (80021a4 <HAL_RCC_ClockConfig+0x1c4>)
 800211c:	683b      	ldr	r3, [r7, #0]
 800211e:	4313      	orrs	r3, r2
 8002120:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002122:	4b20      	ldr	r3, [pc, #128]	; (80021a4 <HAL_RCC_ClockConfig+0x1c4>)
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	f003 030f 	and.w	r3, r3, #15
 800212a:	683a      	ldr	r2, [r7, #0]
 800212c:	429a      	cmp	r2, r3
 800212e:	d001      	beq.n	8002134 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002130:	2301      	movs	r3, #1
 8002132:	e032      	b.n	800219a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	f003 0304 	and.w	r3, r3, #4
 800213c:	2b00      	cmp	r3, #0
 800213e:	d008      	beq.n	8002152 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002140:	4b19      	ldr	r3, [pc, #100]	; (80021a8 <HAL_RCC_ClockConfig+0x1c8>)
 8002142:	689b      	ldr	r3, [r3, #8]
 8002144:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	68db      	ldr	r3, [r3, #12]
 800214c:	4916      	ldr	r1, [pc, #88]	; (80021a8 <HAL_RCC_ClockConfig+0x1c8>)
 800214e:	4313      	orrs	r3, r2
 8002150:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	f003 0308 	and.w	r3, r3, #8
 800215a:	2b00      	cmp	r3, #0
 800215c:	d009      	beq.n	8002172 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800215e:	4b12      	ldr	r3, [pc, #72]	; (80021a8 <HAL_RCC_ClockConfig+0x1c8>)
 8002160:	689b      	ldr	r3, [r3, #8]
 8002162:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	691b      	ldr	r3, [r3, #16]
 800216a:	00db      	lsls	r3, r3, #3
 800216c:	490e      	ldr	r1, [pc, #56]	; (80021a8 <HAL_RCC_ClockConfig+0x1c8>)
 800216e:	4313      	orrs	r3, r2
 8002170:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002172:	f000 f821 	bl	80021b8 <HAL_RCC_GetSysClockFreq>
 8002176:	4602      	mov	r2, r0
 8002178:	4b0b      	ldr	r3, [pc, #44]	; (80021a8 <HAL_RCC_ClockConfig+0x1c8>)
 800217a:	689b      	ldr	r3, [r3, #8]
 800217c:	091b      	lsrs	r3, r3, #4
 800217e:	f003 030f 	and.w	r3, r3, #15
 8002182:	490a      	ldr	r1, [pc, #40]	; (80021ac <HAL_RCC_ClockConfig+0x1cc>)
 8002184:	5ccb      	ldrb	r3, [r1, r3]
 8002186:	fa22 f303 	lsr.w	r3, r2, r3
 800218a:	4a09      	ldr	r2, [pc, #36]	; (80021b0 <HAL_RCC_ClockConfig+0x1d0>)
 800218c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800218e:	4b09      	ldr	r3, [pc, #36]	; (80021b4 <HAL_RCC_ClockConfig+0x1d4>)
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	4618      	mov	r0, r3
 8002194:	f7ff f85e 	bl	8001254 <HAL_InitTick>

  return HAL_OK;
 8002198:	2300      	movs	r3, #0
}
 800219a:	4618      	mov	r0, r3
 800219c:	3710      	adds	r7, #16
 800219e:	46bd      	mov	sp, r7
 80021a0:	bd80      	pop	{r7, pc}
 80021a2:	bf00      	nop
 80021a4:	40023c00 	.word	0x40023c00
 80021a8:	40023800 	.word	0x40023800
 80021ac:	08005a40 	.word	0x08005a40
 80021b0:	20000000 	.word	0x20000000
 80021b4:	20000004 	.word	0x20000004

080021b8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80021b8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80021bc:	b090      	sub	sp, #64	; 0x40
 80021be:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80021c0:	2300      	movs	r3, #0
 80021c2:	637b      	str	r3, [r7, #52]	; 0x34
 80021c4:	2300      	movs	r3, #0
 80021c6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80021c8:	2300      	movs	r3, #0
 80021ca:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
 80021cc:	2300      	movs	r3, #0
 80021ce:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80021d0:	4b59      	ldr	r3, [pc, #356]	; (8002338 <HAL_RCC_GetSysClockFreq+0x180>)
 80021d2:	689b      	ldr	r3, [r3, #8]
 80021d4:	f003 030c 	and.w	r3, r3, #12
 80021d8:	2b08      	cmp	r3, #8
 80021da:	d00d      	beq.n	80021f8 <HAL_RCC_GetSysClockFreq+0x40>
 80021dc:	2b08      	cmp	r3, #8
 80021de:	f200 80a1 	bhi.w	8002324 <HAL_RCC_GetSysClockFreq+0x16c>
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d002      	beq.n	80021ec <HAL_RCC_GetSysClockFreq+0x34>
 80021e6:	2b04      	cmp	r3, #4
 80021e8:	d003      	beq.n	80021f2 <HAL_RCC_GetSysClockFreq+0x3a>
 80021ea:	e09b      	b.n	8002324 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80021ec:	4b53      	ldr	r3, [pc, #332]	; (800233c <HAL_RCC_GetSysClockFreq+0x184>)
 80021ee:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80021f0:	e09b      	b.n	800232a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80021f2:	4b53      	ldr	r3, [pc, #332]	; (8002340 <HAL_RCC_GetSysClockFreq+0x188>)
 80021f4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80021f6:	e098      	b.n	800232a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80021f8:	4b4f      	ldr	r3, [pc, #316]	; (8002338 <HAL_RCC_GetSysClockFreq+0x180>)
 80021fa:	685b      	ldr	r3, [r3, #4]
 80021fc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002200:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8002202:	4b4d      	ldr	r3, [pc, #308]	; (8002338 <HAL_RCC_GetSysClockFreq+0x180>)
 8002204:	685b      	ldr	r3, [r3, #4]
 8002206:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800220a:	2b00      	cmp	r3, #0
 800220c:	d028      	beq.n	8002260 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800220e:	4b4a      	ldr	r3, [pc, #296]	; (8002338 <HAL_RCC_GetSysClockFreq+0x180>)
 8002210:	685b      	ldr	r3, [r3, #4]
 8002212:	099b      	lsrs	r3, r3, #6
 8002214:	2200      	movs	r2, #0
 8002216:	623b      	str	r3, [r7, #32]
 8002218:	627a      	str	r2, [r7, #36]	; 0x24
 800221a:	6a3b      	ldr	r3, [r7, #32]
 800221c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002220:	2100      	movs	r1, #0
 8002222:	4b47      	ldr	r3, [pc, #284]	; (8002340 <HAL_RCC_GetSysClockFreq+0x188>)
 8002224:	fb03 f201 	mul.w	r2, r3, r1
 8002228:	2300      	movs	r3, #0
 800222a:	fb00 f303 	mul.w	r3, r0, r3
 800222e:	4413      	add	r3, r2
 8002230:	4a43      	ldr	r2, [pc, #268]	; (8002340 <HAL_RCC_GetSysClockFreq+0x188>)
 8002232:	fba0 1202 	umull	r1, r2, r0, r2
 8002236:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002238:	460a      	mov	r2, r1
 800223a:	62ba      	str	r2, [r7, #40]	; 0x28
 800223c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800223e:	4413      	add	r3, r2
 8002240:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002242:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002244:	2200      	movs	r2, #0
 8002246:	61bb      	str	r3, [r7, #24]
 8002248:	61fa      	str	r2, [r7, #28]
 800224a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800224e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002252:	f7fe f845 	bl	80002e0 <__aeabi_uldivmod>
 8002256:	4602      	mov	r2, r0
 8002258:	460b      	mov	r3, r1
 800225a:	4613      	mov	r3, r2
 800225c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800225e:	e053      	b.n	8002308 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002260:	4b35      	ldr	r3, [pc, #212]	; (8002338 <HAL_RCC_GetSysClockFreq+0x180>)
 8002262:	685b      	ldr	r3, [r3, #4]
 8002264:	099b      	lsrs	r3, r3, #6
 8002266:	2200      	movs	r2, #0
 8002268:	613b      	str	r3, [r7, #16]
 800226a:	617a      	str	r2, [r7, #20]
 800226c:	693b      	ldr	r3, [r7, #16]
 800226e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002272:	f04f 0b00 	mov.w	fp, #0
 8002276:	4652      	mov	r2, sl
 8002278:	465b      	mov	r3, fp
 800227a:	f04f 0000 	mov.w	r0, #0
 800227e:	f04f 0100 	mov.w	r1, #0
 8002282:	0159      	lsls	r1, r3, #5
 8002284:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002288:	0150      	lsls	r0, r2, #5
 800228a:	4602      	mov	r2, r0
 800228c:	460b      	mov	r3, r1
 800228e:	ebb2 080a 	subs.w	r8, r2, sl
 8002292:	eb63 090b 	sbc.w	r9, r3, fp
 8002296:	f04f 0200 	mov.w	r2, #0
 800229a:	f04f 0300 	mov.w	r3, #0
 800229e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80022a2:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80022a6:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80022aa:	ebb2 0408 	subs.w	r4, r2, r8
 80022ae:	eb63 0509 	sbc.w	r5, r3, r9
 80022b2:	f04f 0200 	mov.w	r2, #0
 80022b6:	f04f 0300 	mov.w	r3, #0
 80022ba:	00eb      	lsls	r3, r5, #3
 80022bc:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80022c0:	00e2      	lsls	r2, r4, #3
 80022c2:	4614      	mov	r4, r2
 80022c4:	461d      	mov	r5, r3
 80022c6:	eb14 030a 	adds.w	r3, r4, sl
 80022ca:	603b      	str	r3, [r7, #0]
 80022cc:	eb45 030b 	adc.w	r3, r5, fp
 80022d0:	607b      	str	r3, [r7, #4]
 80022d2:	f04f 0200 	mov.w	r2, #0
 80022d6:	f04f 0300 	mov.w	r3, #0
 80022da:	e9d7 4500 	ldrd	r4, r5, [r7]
 80022de:	4629      	mov	r1, r5
 80022e0:	028b      	lsls	r3, r1, #10
 80022e2:	4621      	mov	r1, r4
 80022e4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80022e8:	4621      	mov	r1, r4
 80022ea:	028a      	lsls	r2, r1, #10
 80022ec:	4610      	mov	r0, r2
 80022ee:	4619      	mov	r1, r3
 80022f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80022f2:	2200      	movs	r2, #0
 80022f4:	60bb      	str	r3, [r7, #8]
 80022f6:	60fa      	str	r2, [r7, #12]
 80022f8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80022fc:	f7fd fff0 	bl	80002e0 <__aeabi_uldivmod>
 8002300:	4602      	mov	r2, r0
 8002302:	460b      	mov	r3, r1
 8002304:	4613      	mov	r3, r2
 8002306:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8002308:	4b0b      	ldr	r3, [pc, #44]	; (8002338 <HAL_RCC_GetSysClockFreq+0x180>)
 800230a:	685b      	ldr	r3, [r3, #4]
 800230c:	0c1b      	lsrs	r3, r3, #16
 800230e:	f003 0303 	and.w	r3, r3, #3
 8002312:	3301      	adds	r3, #1
 8002314:	005b      	lsls	r3, r3, #1
 8002316:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 8002318:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800231a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800231c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002320:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002322:	e002      	b.n	800232a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002324:	4b05      	ldr	r3, [pc, #20]	; (800233c <HAL_RCC_GetSysClockFreq+0x184>)
 8002326:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002328:	bf00      	nop
    }
  }
  return sysclockfreq;
 800232a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 800232c:	4618      	mov	r0, r3
 800232e:	3740      	adds	r7, #64	; 0x40
 8002330:	46bd      	mov	sp, r7
 8002332:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002336:	bf00      	nop
 8002338:	40023800 	.word	0x40023800
 800233c:	00f42400 	.word	0x00f42400
 8002340:	017d7840 	.word	0x017d7840

08002344 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002344:	b480      	push	{r7}
 8002346:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002348:	4b03      	ldr	r3, [pc, #12]	; (8002358 <HAL_RCC_GetHCLKFreq+0x14>)
 800234a:	681b      	ldr	r3, [r3, #0]
}
 800234c:	4618      	mov	r0, r3
 800234e:	46bd      	mov	sp, r7
 8002350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002354:	4770      	bx	lr
 8002356:	bf00      	nop
 8002358:	20000000 	.word	0x20000000

0800235c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800235c:	b580      	push	{r7, lr}
 800235e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002360:	f7ff fff0 	bl	8002344 <HAL_RCC_GetHCLKFreq>
 8002364:	4602      	mov	r2, r0
 8002366:	4b05      	ldr	r3, [pc, #20]	; (800237c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002368:	689b      	ldr	r3, [r3, #8]
 800236a:	0a9b      	lsrs	r3, r3, #10
 800236c:	f003 0307 	and.w	r3, r3, #7
 8002370:	4903      	ldr	r1, [pc, #12]	; (8002380 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002372:	5ccb      	ldrb	r3, [r1, r3]
 8002374:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002378:	4618      	mov	r0, r3
 800237a:	bd80      	pop	{r7, pc}
 800237c:	40023800 	.word	0x40023800
 8002380:	08005a50 	.word	0x08005a50

08002384 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002384:	b580      	push	{r7, lr}
 8002386:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002388:	f7ff ffdc 	bl	8002344 <HAL_RCC_GetHCLKFreq>
 800238c:	4602      	mov	r2, r0
 800238e:	4b05      	ldr	r3, [pc, #20]	; (80023a4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002390:	689b      	ldr	r3, [r3, #8]
 8002392:	0b5b      	lsrs	r3, r3, #13
 8002394:	f003 0307 	and.w	r3, r3, #7
 8002398:	4903      	ldr	r1, [pc, #12]	; (80023a8 <HAL_RCC_GetPCLK2Freq+0x24>)
 800239a:	5ccb      	ldrb	r3, [r1, r3]
 800239c:	fa22 f303 	lsr.w	r3, r2, r3
}
 80023a0:	4618      	mov	r0, r3
 80023a2:	bd80      	pop	{r7, pc}
 80023a4:	40023800 	.word	0x40023800
 80023a8:	08005a50 	.word	0x08005a50

080023ac <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80023ac:	b480      	push	{r7}
 80023ae:	b083      	sub	sp, #12
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	6078      	str	r0, [r7, #4]
 80023b4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	220f      	movs	r2, #15
 80023ba:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80023bc:	4b12      	ldr	r3, [pc, #72]	; (8002408 <HAL_RCC_GetClockConfig+0x5c>)
 80023be:	689b      	ldr	r3, [r3, #8]
 80023c0:	f003 0203 	and.w	r2, r3, #3
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80023c8:	4b0f      	ldr	r3, [pc, #60]	; (8002408 <HAL_RCC_GetClockConfig+0x5c>)
 80023ca:	689b      	ldr	r3, [r3, #8]
 80023cc:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80023d4:	4b0c      	ldr	r3, [pc, #48]	; (8002408 <HAL_RCC_GetClockConfig+0x5c>)
 80023d6:	689b      	ldr	r3, [r3, #8]
 80023d8:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80023e0:	4b09      	ldr	r3, [pc, #36]	; (8002408 <HAL_RCC_GetClockConfig+0x5c>)
 80023e2:	689b      	ldr	r3, [r3, #8]
 80023e4:	08db      	lsrs	r3, r3, #3
 80023e6:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80023ee:	4b07      	ldr	r3, [pc, #28]	; (800240c <HAL_RCC_GetClockConfig+0x60>)
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f003 020f 	and.w	r2, r3, #15
 80023f6:	683b      	ldr	r3, [r7, #0]
 80023f8:	601a      	str	r2, [r3, #0]
}
 80023fa:	bf00      	nop
 80023fc:	370c      	adds	r7, #12
 80023fe:	46bd      	mov	sp, r7
 8002400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002404:	4770      	bx	lr
 8002406:	bf00      	nop
 8002408:	40023800 	.word	0x40023800
 800240c:	40023c00 	.word	0x40023c00

08002410 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002410:	b580      	push	{r7, lr}
 8002412:	b088      	sub	sp, #32
 8002414:	af00      	add	r7, sp, #0
 8002416:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8002418:	2300      	movs	r3, #0
 800241a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 800241c:	2300      	movs	r3, #0
 800241e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8002420:	2300      	movs	r3, #0
 8002422:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8002424:	2300      	movs	r3, #0
 8002426:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8002428:	2300      	movs	r3, #0
 800242a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	f003 0301 	and.w	r3, r3, #1
 8002434:	2b00      	cmp	r3, #0
 8002436:	d012      	beq.n	800245e <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002438:	4b69      	ldr	r3, [pc, #420]	; (80025e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800243a:	689b      	ldr	r3, [r3, #8]
 800243c:	4a68      	ldr	r2, [pc, #416]	; (80025e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800243e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002442:	6093      	str	r3, [r2, #8]
 8002444:	4b66      	ldr	r3, [pc, #408]	; (80025e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002446:	689a      	ldr	r2, [r3, #8]
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800244c:	4964      	ldr	r1, [pc, #400]	; (80025e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800244e:	4313      	orrs	r3, r2
 8002450:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002456:	2b00      	cmp	r3, #0
 8002458:	d101      	bne.n	800245e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800245a:	2301      	movs	r3, #1
 800245c:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002466:	2b00      	cmp	r3, #0
 8002468:	d017      	beq.n	800249a <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800246a:	4b5d      	ldr	r3, [pc, #372]	; (80025e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800246c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002470:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002478:	4959      	ldr	r1, [pc, #356]	; (80025e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800247a:	4313      	orrs	r3, r2
 800247c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002484:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002488:	d101      	bne.n	800248e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800248a:	2301      	movs	r3, #1
 800248c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002492:	2b00      	cmp	r3, #0
 8002494:	d101      	bne.n	800249a <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8002496:	2301      	movs	r3, #1
 8002498:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d017      	beq.n	80024d6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80024a6:	4b4e      	ldr	r3, [pc, #312]	; (80025e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80024a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80024ac:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024b4:	494a      	ldr	r1, [pc, #296]	; (80025e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80024b6:	4313      	orrs	r3, r2
 80024b8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024c0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80024c4:	d101      	bne.n	80024ca <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80024c6:	2301      	movs	r3, #1
 80024c8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d101      	bne.n	80024d6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80024d2:	2301      	movs	r3, #1
 80024d4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d001      	beq.n	80024e6 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80024e2:	2301      	movs	r3, #1
 80024e4:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f003 0320 	and.w	r3, r3, #32
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	f000 808b 	beq.w	800260a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80024f4:	4b3a      	ldr	r3, [pc, #232]	; (80025e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80024f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024f8:	4a39      	ldr	r2, [pc, #228]	; (80025e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80024fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80024fe:	6413      	str	r3, [r2, #64]	; 0x40
 8002500:	4b37      	ldr	r3, [pc, #220]	; (80025e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002502:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002504:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002508:	60bb      	str	r3, [r7, #8]
 800250a:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800250c:	4b35      	ldr	r3, [pc, #212]	; (80025e4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	4a34      	ldr	r2, [pc, #208]	; (80025e4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002512:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002516:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002518:	f7ff f800 	bl	800151c <HAL_GetTick>
 800251c:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800251e:	e008      	b.n	8002532 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002520:	f7fe fffc 	bl	800151c <HAL_GetTick>
 8002524:	4602      	mov	r2, r0
 8002526:	697b      	ldr	r3, [r7, #20]
 8002528:	1ad3      	subs	r3, r2, r3
 800252a:	2b64      	cmp	r3, #100	; 0x64
 800252c:	d901      	bls.n	8002532 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800252e:	2303      	movs	r3, #3
 8002530:	e38f      	b.n	8002c52 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002532:	4b2c      	ldr	r3, [pc, #176]	; (80025e4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800253a:	2b00      	cmp	r3, #0
 800253c:	d0f0      	beq.n	8002520 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800253e:	4b28      	ldr	r3, [pc, #160]	; (80025e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002540:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002542:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002546:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002548:	693b      	ldr	r3, [r7, #16]
 800254a:	2b00      	cmp	r3, #0
 800254c:	d035      	beq.n	80025ba <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002552:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002556:	693a      	ldr	r2, [r7, #16]
 8002558:	429a      	cmp	r2, r3
 800255a:	d02e      	beq.n	80025ba <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800255c:	4b20      	ldr	r3, [pc, #128]	; (80025e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800255e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002560:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002564:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002566:	4b1e      	ldr	r3, [pc, #120]	; (80025e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002568:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800256a:	4a1d      	ldr	r2, [pc, #116]	; (80025e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800256c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002570:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002572:	4b1b      	ldr	r3, [pc, #108]	; (80025e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002574:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002576:	4a1a      	ldr	r2, [pc, #104]	; (80025e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002578:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800257c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800257e:	4a18      	ldr	r2, [pc, #96]	; (80025e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002580:	693b      	ldr	r3, [r7, #16]
 8002582:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002584:	4b16      	ldr	r3, [pc, #88]	; (80025e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002586:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002588:	f003 0301 	and.w	r3, r3, #1
 800258c:	2b01      	cmp	r3, #1
 800258e:	d114      	bne.n	80025ba <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002590:	f7fe ffc4 	bl	800151c <HAL_GetTick>
 8002594:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002596:	e00a      	b.n	80025ae <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002598:	f7fe ffc0 	bl	800151c <HAL_GetTick>
 800259c:	4602      	mov	r2, r0
 800259e:	697b      	ldr	r3, [r7, #20]
 80025a0:	1ad3      	subs	r3, r2, r3
 80025a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80025a6:	4293      	cmp	r3, r2
 80025a8:	d901      	bls.n	80025ae <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80025aa:	2303      	movs	r3, #3
 80025ac:	e351      	b.n	8002c52 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025ae:	4b0c      	ldr	r3, [pc, #48]	; (80025e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80025b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025b2:	f003 0302 	and.w	r3, r3, #2
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d0ee      	beq.n	8002598 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80025c2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80025c6:	d111      	bne.n	80025ec <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80025c8:	4b05      	ldr	r3, [pc, #20]	; (80025e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80025ca:	689b      	ldr	r3, [r3, #8]
 80025cc:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80025d4:	4b04      	ldr	r3, [pc, #16]	; (80025e8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80025d6:	400b      	ands	r3, r1
 80025d8:	4901      	ldr	r1, [pc, #4]	; (80025e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80025da:	4313      	orrs	r3, r2
 80025dc:	608b      	str	r3, [r1, #8]
 80025de:	e00b      	b.n	80025f8 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80025e0:	40023800 	.word	0x40023800
 80025e4:	40007000 	.word	0x40007000
 80025e8:	0ffffcff 	.word	0x0ffffcff
 80025ec:	4bac      	ldr	r3, [pc, #688]	; (80028a0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80025ee:	689b      	ldr	r3, [r3, #8]
 80025f0:	4aab      	ldr	r2, [pc, #684]	; (80028a0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80025f2:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80025f6:	6093      	str	r3, [r2, #8]
 80025f8:	4ba9      	ldr	r3, [pc, #676]	; (80028a0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80025fa:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002600:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002604:	49a6      	ldr	r1, [pc, #664]	; (80028a0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002606:	4313      	orrs	r3, r2
 8002608:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f003 0310 	and.w	r3, r3, #16
 8002612:	2b00      	cmp	r3, #0
 8002614:	d010      	beq.n	8002638 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002616:	4ba2      	ldr	r3, [pc, #648]	; (80028a0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002618:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800261c:	4aa0      	ldr	r2, [pc, #640]	; (80028a0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800261e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002622:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8002626:	4b9e      	ldr	r3, [pc, #632]	; (80028a0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002628:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002630:	499b      	ldr	r1, [pc, #620]	; (80028a0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002632:	4313      	orrs	r3, r2
 8002634:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002640:	2b00      	cmp	r3, #0
 8002642:	d00a      	beq.n	800265a <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002644:	4b96      	ldr	r3, [pc, #600]	; (80028a0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002646:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800264a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002652:	4993      	ldr	r1, [pc, #588]	; (80028a0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002654:	4313      	orrs	r3, r2
 8002656:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002662:	2b00      	cmp	r3, #0
 8002664:	d00a      	beq.n	800267c <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002666:	4b8e      	ldr	r3, [pc, #568]	; (80028a0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002668:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800266c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002674:	498a      	ldr	r1, [pc, #552]	; (80028a0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002676:	4313      	orrs	r3, r2
 8002678:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002684:	2b00      	cmp	r3, #0
 8002686:	d00a      	beq.n	800269e <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002688:	4b85      	ldr	r3, [pc, #532]	; (80028a0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800268a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800268e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002696:	4982      	ldr	r1, [pc, #520]	; (80028a0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002698:	4313      	orrs	r3, r2
 800269a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d00a      	beq.n	80026c0 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80026aa:	4b7d      	ldr	r3, [pc, #500]	; (80028a0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80026ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026b0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026b8:	4979      	ldr	r1, [pc, #484]	; (80028a0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80026ba:	4313      	orrs	r3, r2
 80026bc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d00a      	beq.n	80026e2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80026cc:	4b74      	ldr	r3, [pc, #464]	; (80028a0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80026ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026d2:	f023 0203 	bic.w	r2, r3, #3
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026da:	4971      	ldr	r1, [pc, #452]	; (80028a0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80026dc:	4313      	orrs	r3, r2
 80026de:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d00a      	beq.n	8002704 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80026ee:	4b6c      	ldr	r3, [pc, #432]	; (80028a0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80026f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026f4:	f023 020c 	bic.w	r2, r3, #12
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80026fc:	4968      	ldr	r1, [pc, #416]	; (80028a0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80026fe:	4313      	orrs	r3, r2
 8002700:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800270c:	2b00      	cmp	r3, #0
 800270e:	d00a      	beq.n	8002726 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002710:	4b63      	ldr	r3, [pc, #396]	; (80028a0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002712:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002716:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800271e:	4960      	ldr	r1, [pc, #384]	; (80028a0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002720:	4313      	orrs	r3, r2
 8002722:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800272e:	2b00      	cmp	r3, #0
 8002730:	d00a      	beq.n	8002748 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002732:	4b5b      	ldr	r3, [pc, #364]	; (80028a0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002734:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002738:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002740:	4957      	ldr	r1, [pc, #348]	; (80028a0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002742:	4313      	orrs	r3, r2
 8002744:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002750:	2b00      	cmp	r3, #0
 8002752:	d00a      	beq.n	800276a <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002754:	4b52      	ldr	r3, [pc, #328]	; (80028a0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002756:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800275a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002762:	494f      	ldr	r1, [pc, #316]	; (80028a0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002764:	4313      	orrs	r3, r2
 8002766:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002772:	2b00      	cmp	r3, #0
 8002774:	d00a      	beq.n	800278c <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8002776:	4b4a      	ldr	r3, [pc, #296]	; (80028a0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002778:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800277c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002784:	4946      	ldr	r1, [pc, #280]	; (80028a0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002786:	4313      	orrs	r3, r2
 8002788:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002794:	2b00      	cmp	r3, #0
 8002796:	d00a      	beq.n	80027ae <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8002798:	4b41      	ldr	r3, [pc, #260]	; (80028a0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800279a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800279e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027a6:	493e      	ldr	r1, [pc, #248]	; (80028a0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80027a8:	4313      	orrs	r3, r2
 80027aa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d00a      	beq.n	80027d0 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80027ba:	4b39      	ldr	r3, [pc, #228]	; (80028a0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80027bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027c0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80027c8:	4935      	ldr	r1, [pc, #212]	; (80028a0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80027ca:	4313      	orrs	r3, r2
 80027cc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d00a      	beq.n	80027f2 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80027dc:	4b30      	ldr	r3, [pc, #192]	; (80028a0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80027de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027e2:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80027ea:	492d      	ldr	r1, [pc, #180]	; (80028a0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80027ec:	4313      	orrs	r3, r2
 80027ee:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d011      	beq.n	8002822 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80027fe:	4b28      	ldr	r3, [pc, #160]	; (80028a0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002800:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002804:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800280c:	4924      	ldr	r1, [pc, #144]	; (80028a0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800280e:	4313      	orrs	r3, r2
 8002810:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002818:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800281c:	d101      	bne.n	8002822 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800281e:	2301      	movs	r3, #1
 8002820:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	f003 0308 	and.w	r3, r3, #8
 800282a:	2b00      	cmp	r3, #0
 800282c:	d001      	beq.n	8002832 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800282e:	2301      	movs	r3, #1
 8002830:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800283a:	2b00      	cmp	r3, #0
 800283c:	d00a      	beq.n	8002854 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800283e:	4b18      	ldr	r3, [pc, #96]	; (80028a0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002840:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002844:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800284c:	4914      	ldr	r1, [pc, #80]	; (80028a0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800284e:	4313      	orrs	r3, r2
 8002850:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800285c:	2b00      	cmp	r3, #0
 800285e:	d00b      	beq.n	8002878 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002860:	4b0f      	ldr	r3, [pc, #60]	; (80028a0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002862:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002866:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002870:	490b      	ldr	r1, [pc, #44]	; (80028a0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002872:	4313      	orrs	r3, r2
 8002874:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002880:	2b00      	cmp	r3, #0
 8002882:	d00f      	beq.n	80028a4 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8002884:	4b06      	ldr	r3, [pc, #24]	; (80028a0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002886:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800288a:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002894:	4902      	ldr	r1, [pc, #8]	; (80028a0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002896:	4313      	orrs	r3, r2
 8002898:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800289c:	e002      	b.n	80028a4 <HAL_RCCEx_PeriphCLKConfig+0x494>
 800289e:	bf00      	nop
 80028a0:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d00b      	beq.n	80028c8 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80028b0:	4b8a      	ldr	r3, [pc, #552]	; (8002adc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80028b2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80028b6:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028c0:	4986      	ldr	r1, [pc, #536]	; (8002adc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80028c2:	4313      	orrs	r3, r2
 80028c4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d00b      	beq.n	80028ec <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80028d4:	4b81      	ldr	r3, [pc, #516]	; (8002adc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80028d6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80028da:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80028e4:	497d      	ldr	r1, [pc, #500]	; (8002adc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80028e6:	4313      	orrs	r3, r2
 80028e8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80028ec:	69fb      	ldr	r3, [r7, #28]
 80028ee:	2b01      	cmp	r3, #1
 80028f0:	d006      	beq.n	8002900 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	f000 80d6 	beq.w	8002aac <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002900:	4b76      	ldr	r3, [pc, #472]	; (8002adc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	4a75      	ldr	r2, [pc, #468]	; (8002adc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002906:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800290a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800290c:	f7fe fe06 	bl	800151c <HAL_GetTick>
 8002910:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002912:	e008      	b.n	8002926 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002914:	f7fe fe02 	bl	800151c <HAL_GetTick>
 8002918:	4602      	mov	r2, r0
 800291a:	697b      	ldr	r3, [r7, #20]
 800291c:	1ad3      	subs	r3, r2, r3
 800291e:	2b64      	cmp	r3, #100	; 0x64
 8002920:	d901      	bls.n	8002926 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002922:	2303      	movs	r3, #3
 8002924:	e195      	b.n	8002c52 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002926:	4b6d      	ldr	r3, [pc, #436]	; (8002adc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800292e:	2b00      	cmp	r3, #0
 8002930:	d1f0      	bne.n	8002914 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f003 0301 	and.w	r3, r3, #1
 800293a:	2b00      	cmp	r3, #0
 800293c:	d021      	beq.n	8002982 <HAL_RCCEx_PeriphCLKConfig+0x572>
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002942:	2b00      	cmp	r3, #0
 8002944:	d11d      	bne.n	8002982 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002946:	4b65      	ldr	r3, [pc, #404]	; (8002adc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002948:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800294c:	0c1b      	lsrs	r3, r3, #16
 800294e:	f003 0303 	and.w	r3, r3, #3
 8002952:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002954:	4b61      	ldr	r3, [pc, #388]	; (8002adc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002956:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800295a:	0e1b      	lsrs	r3, r3, #24
 800295c:	f003 030f 	and.w	r3, r3, #15
 8002960:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	685b      	ldr	r3, [r3, #4]
 8002966:	019a      	lsls	r2, r3, #6
 8002968:	693b      	ldr	r3, [r7, #16]
 800296a:	041b      	lsls	r3, r3, #16
 800296c:	431a      	orrs	r2, r3
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	061b      	lsls	r3, r3, #24
 8002972:	431a      	orrs	r2, r3
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	689b      	ldr	r3, [r3, #8]
 8002978:	071b      	lsls	r3, r3, #28
 800297a:	4958      	ldr	r1, [pc, #352]	; (8002adc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800297c:	4313      	orrs	r3, r2
 800297e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800298a:	2b00      	cmp	r3, #0
 800298c:	d004      	beq.n	8002998 <HAL_RCCEx_PeriphCLKConfig+0x588>
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002992:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002996:	d00a      	beq.n	80029ae <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d02e      	beq.n	8002a02 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029a8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80029ac:	d129      	bne.n	8002a02 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80029ae:	4b4b      	ldr	r3, [pc, #300]	; (8002adc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80029b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80029b4:	0c1b      	lsrs	r3, r3, #16
 80029b6:	f003 0303 	and.w	r3, r3, #3
 80029ba:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80029bc:	4b47      	ldr	r3, [pc, #284]	; (8002adc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80029be:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80029c2:	0f1b      	lsrs	r3, r3, #28
 80029c4:	f003 0307 	and.w	r3, r3, #7
 80029c8:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	685b      	ldr	r3, [r3, #4]
 80029ce:	019a      	lsls	r2, r3, #6
 80029d0:	693b      	ldr	r3, [r7, #16]
 80029d2:	041b      	lsls	r3, r3, #16
 80029d4:	431a      	orrs	r2, r3
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	68db      	ldr	r3, [r3, #12]
 80029da:	061b      	lsls	r3, r3, #24
 80029dc:	431a      	orrs	r2, r3
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	071b      	lsls	r3, r3, #28
 80029e2:	493e      	ldr	r1, [pc, #248]	; (8002adc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80029e4:	4313      	orrs	r3, r2
 80029e6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80029ea:	4b3c      	ldr	r3, [pc, #240]	; (8002adc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80029ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80029f0:	f023 021f 	bic.w	r2, r3, #31
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029f8:	3b01      	subs	r3, #1
 80029fa:	4938      	ldr	r1, [pc, #224]	; (8002adc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80029fc:	4313      	orrs	r3, r2
 80029fe:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d01d      	beq.n	8002a4a <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002a0e:	4b33      	ldr	r3, [pc, #204]	; (8002adc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002a10:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002a14:	0e1b      	lsrs	r3, r3, #24
 8002a16:	f003 030f 	and.w	r3, r3, #15
 8002a1a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002a1c:	4b2f      	ldr	r3, [pc, #188]	; (8002adc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002a1e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002a22:	0f1b      	lsrs	r3, r3, #28
 8002a24:	f003 0307 	and.w	r3, r3, #7
 8002a28:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	685b      	ldr	r3, [r3, #4]
 8002a2e:	019a      	lsls	r2, r3, #6
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	691b      	ldr	r3, [r3, #16]
 8002a34:	041b      	lsls	r3, r3, #16
 8002a36:	431a      	orrs	r2, r3
 8002a38:	693b      	ldr	r3, [r7, #16]
 8002a3a:	061b      	lsls	r3, r3, #24
 8002a3c:	431a      	orrs	r2, r3
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	071b      	lsls	r3, r3, #28
 8002a42:	4926      	ldr	r1, [pc, #152]	; (8002adc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002a44:	4313      	orrs	r3, r2
 8002a46:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d011      	beq.n	8002a7a <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	685b      	ldr	r3, [r3, #4]
 8002a5a:	019a      	lsls	r2, r3, #6
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	691b      	ldr	r3, [r3, #16]
 8002a60:	041b      	lsls	r3, r3, #16
 8002a62:	431a      	orrs	r2, r3
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	68db      	ldr	r3, [r3, #12]
 8002a68:	061b      	lsls	r3, r3, #24
 8002a6a:	431a      	orrs	r2, r3
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	689b      	ldr	r3, [r3, #8]
 8002a70:	071b      	lsls	r3, r3, #28
 8002a72:	491a      	ldr	r1, [pc, #104]	; (8002adc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002a74:	4313      	orrs	r3, r2
 8002a76:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002a7a:	4b18      	ldr	r3, [pc, #96]	; (8002adc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	4a17      	ldr	r2, [pc, #92]	; (8002adc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002a80:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002a84:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002a86:	f7fe fd49 	bl	800151c <HAL_GetTick>
 8002a8a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002a8c:	e008      	b.n	8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002a8e:	f7fe fd45 	bl	800151c <HAL_GetTick>
 8002a92:	4602      	mov	r2, r0
 8002a94:	697b      	ldr	r3, [r7, #20]
 8002a96:	1ad3      	subs	r3, r2, r3
 8002a98:	2b64      	cmp	r3, #100	; 0x64
 8002a9a:	d901      	bls.n	8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002a9c:	2303      	movs	r3, #3
 8002a9e:	e0d8      	b.n	8002c52 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002aa0:	4b0e      	ldr	r3, [pc, #56]	; (8002adc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d0f0      	beq.n	8002a8e <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8002aac:	69bb      	ldr	r3, [r7, #24]
 8002aae:	2b01      	cmp	r3, #1
 8002ab0:	f040 80ce 	bne.w	8002c50 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8002ab4:	4b09      	ldr	r3, [pc, #36]	; (8002adc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	4a08      	ldr	r2, [pc, #32]	; (8002adc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002aba:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002abe:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002ac0:	f7fe fd2c 	bl	800151c <HAL_GetTick>
 8002ac4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002ac6:	e00b      	b.n	8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002ac8:	f7fe fd28 	bl	800151c <HAL_GetTick>
 8002acc:	4602      	mov	r2, r0
 8002ace:	697b      	ldr	r3, [r7, #20]
 8002ad0:	1ad3      	subs	r3, r2, r3
 8002ad2:	2b64      	cmp	r3, #100	; 0x64
 8002ad4:	d904      	bls.n	8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002ad6:	2303      	movs	r3, #3
 8002ad8:	e0bb      	b.n	8002c52 <HAL_RCCEx_PeriphCLKConfig+0x842>
 8002ada:	bf00      	nop
 8002adc:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002ae0:	4b5e      	ldr	r3, [pc, #376]	; (8002c5c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002ae8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002aec:	d0ec      	beq.n	8002ac8 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d003      	beq.n	8002b02 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d009      	beq.n	8002b16 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d02e      	beq.n	8002b6c <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d12a      	bne.n	8002b6c <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002b16:	4b51      	ldr	r3, [pc, #324]	; (8002c5c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002b18:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b1c:	0c1b      	lsrs	r3, r3, #16
 8002b1e:	f003 0303 	and.w	r3, r3, #3
 8002b22:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002b24:	4b4d      	ldr	r3, [pc, #308]	; (8002c5c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002b26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b2a:	0f1b      	lsrs	r3, r3, #28
 8002b2c:	f003 0307 	and.w	r3, r3, #7
 8002b30:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	695b      	ldr	r3, [r3, #20]
 8002b36:	019a      	lsls	r2, r3, #6
 8002b38:	693b      	ldr	r3, [r7, #16]
 8002b3a:	041b      	lsls	r3, r3, #16
 8002b3c:	431a      	orrs	r2, r3
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	699b      	ldr	r3, [r3, #24]
 8002b42:	061b      	lsls	r3, r3, #24
 8002b44:	431a      	orrs	r2, r3
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	071b      	lsls	r3, r3, #28
 8002b4a:	4944      	ldr	r1, [pc, #272]	; (8002c5c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002b4c:	4313      	orrs	r3, r2
 8002b4e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8002b52:	4b42      	ldr	r3, [pc, #264]	; (8002c5c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002b54:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002b58:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b60:	3b01      	subs	r3, #1
 8002b62:	021b      	lsls	r3, r3, #8
 8002b64:	493d      	ldr	r1, [pc, #244]	; (8002c5c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002b66:	4313      	orrs	r3, r2
 8002b68:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d022      	beq.n	8002bbe <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002b7c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002b80:	d11d      	bne.n	8002bbe <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002b82:	4b36      	ldr	r3, [pc, #216]	; (8002c5c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002b84:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b88:	0e1b      	lsrs	r3, r3, #24
 8002b8a:	f003 030f 	and.w	r3, r3, #15
 8002b8e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002b90:	4b32      	ldr	r3, [pc, #200]	; (8002c5c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002b92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b96:	0f1b      	lsrs	r3, r3, #28
 8002b98:	f003 0307 	and.w	r3, r3, #7
 8002b9c:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	695b      	ldr	r3, [r3, #20]
 8002ba2:	019a      	lsls	r2, r3, #6
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	6a1b      	ldr	r3, [r3, #32]
 8002ba8:	041b      	lsls	r3, r3, #16
 8002baa:	431a      	orrs	r2, r3
 8002bac:	693b      	ldr	r3, [r7, #16]
 8002bae:	061b      	lsls	r3, r3, #24
 8002bb0:	431a      	orrs	r2, r3
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	071b      	lsls	r3, r3, #28
 8002bb6:	4929      	ldr	r1, [pc, #164]	; (8002c5c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002bb8:	4313      	orrs	r3, r2
 8002bba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f003 0308 	and.w	r3, r3, #8
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d028      	beq.n	8002c1c <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002bca:	4b24      	ldr	r3, [pc, #144]	; (8002c5c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002bcc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bd0:	0e1b      	lsrs	r3, r3, #24
 8002bd2:	f003 030f 	and.w	r3, r3, #15
 8002bd6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002bd8:	4b20      	ldr	r3, [pc, #128]	; (8002c5c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002bda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bde:	0c1b      	lsrs	r3, r3, #16
 8002be0:	f003 0303 	and.w	r3, r3, #3
 8002be4:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	695b      	ldr	r3, [r3, #20]
 8002bea:	019a      	lsls	r2, r3, #6
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	041b      	lsls	r3, r3, #16
 8002bf0:	431a      	orrs	r2, r3
 8002bf2:	693b      	ldr	r3, [r7, #16]
 8002bf4:	061b      	lsls	r3, r3, #24
 8002bf6:	431a      	orrs	r2, r3
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	69db      	ldr	r3, [r3, #28]
 8002bfc:	071b      	lsls	r3, r3, #28
 8002bfe:	4917      	ldr	r1, [pc, #92]	; (8002c5c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002c00:	4313      	orrs	r3, r2
 8002c02:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8002c06:	4b15      	ldr	r3, [pc, #84]	; (8002c5c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002c08:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002c0c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c14:	4911      	ldr	r1, [pc, #68]	; (8002c5c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002c16:	4313      	orrs	r3, r2
 8002c18:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8002c1c:	4b0f      	ldr	r3, [pc, #60]	; (8002c5c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	4a0e      	ldr	r2, [pc, #56]	; (8002c5c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002c22:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c26:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002c28:	f7fe fc78 	bl	800151c <HAL_GetTick>
 8002c2c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002c2e:	e008      	b.n	8002c42 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002c30:	f7fe fc74 	bl	800151c <HAL_GetTick>
 8002c34:	4602      	mov	r2, r0
 8002c36:	697b      	ldr	r3, [r7, #20]
 8002c38:	1ad3      	subs	r3, r2, r3
 8002c3a:	2b64      	cmp	r3, #100	; 0x64
 8002c3c:	d901      	bls.n	8002c42 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002c3e:	2303      	movs	r3, #3
 8002c40:	e007      	b.n	8002c52 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002c42:	4b06      	ldr	r3, [pc, #24]	; (8002c5c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002c4a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002c4e:	d1ef      	bne.n	8002c30 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8002c50:	2300      	movs	r3, #0
}
 8002c52:	4618      	mov	r0, r3
 8002c54:	3720      	adds	r7, #32
 8002c56:	46bd      	mov	sp, r7
 8002c58:	bd80      	pop	{r7, pc}
 8002c5a:	bf00      	nop
 8002c5c:	40023800 	.word	0x40023800

08002c60 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002c60:	b580      	push	{r7, lr}
 8002c62:	b082      	sub	sp, #8
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d101      	bne.n	8002c72 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002c6e:	2301      	movs	r3, #1
 8002c70:	e049      	b.n	8002d06 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c78:	b2db      	uxtb	r3, r3
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d106      	bne.n	8002c8c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	2200      	movs	r2, #0
 8002c82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002c86:	6878      	ldr	r0, [r7, #4]
 8002c88:	f000 f841 	bl	8002d0e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	2202      	movs	r2, #2
 8002c90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681a      	ldr	r2, [r3, #0]
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	3304      	adds	r3, #4
 8002c9c:	4619      	mov	r1, r3
 8002c9e:	4610      	mov	r0, r2
 8002ca0:	f000 fa00 	bl	80030a4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	2201      	movs	r2, #1
 8002ca8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	2201      	movs	r2, #1
 8002cb0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	2201      	movs	r2, #1
 8002cb8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	2201      	movs	r2, #1
 8002cc0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	2201      	movs	r2, #1
 8002cc8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	2201      	movs	r2, #1
 8002cd0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	2201      	movs	r2, #1
 8002cd8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	2201      	movs	r2, #1
 8002ce0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	2201      	movs	r2, #1
 8002ce8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	2201      	movs	r2, #1
 8002cf0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	2201      	movs	r2, #1
 8002cf8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	2201      	movs	r2, #1
 8002d00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002d04:	2300      	movs	r3, #0
}
 8002d06:	4618      	mov	r0, r3
 8002d08:	3708      	adds	r7, #8
 8002d0a:	46bd      	mov	sp, r7
 8002d0c:	bd80      	pop	{r7, pc}

08002d0e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002d0e:	b480      	push	{r7}
 8002d10:	b083      	sub	sp, #12
 8002d12:	af00      	add	r7, sp, #0
 8002d14:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002d16:	bf00      	nop
 8002d18:	370c      	adds	r7, #12
 8002d1a:	46bd      	mov	sp, r7
 8002d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d20:	4770      	bx	lr
	...

08002d24 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002d24:	b480      	push	{r7}
 8002d26:	b085      	sub	sp, #20
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d32:	b2db      	uxtb	r3, r3
 8002d34:	2b01      	cmp	r3, #1
 8002d36:	d001      	beq.n	8002d3c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002d38:	2301      	movs	r3, #1
 8002d3a:	e054      	b.n	8002de6 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	2202      	movs	r2, #2
 8002d40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	68da      	ldr	r2, [r3, #12]
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f042 0201 	orr.w	r2, r2, #1
 8002d52:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	4a26      	ldr	r2, [pc, #152]	; (8002df4 <HAL_TIM_Base_Start_IT+0xd0>)
 8002d5a:	4293      	cmp	r3, r2
 8002d5c:	d022      	beq.n	8002da4 <HAL_TIM_Base_Start_IT+0x80>
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d66:	d01d      	beq.n	8002da4 <HAL_TIM_Base_Start_IT+0x80>
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	4a22      	ldr	r2, [pc, #136]	; (8002df8 <HAL_TIM_Base_Start_IT+0xd4>)
 8002d6e:	4293      	cmp	r3, r2
 8002d70:	d018      	beq.n	8002da4 <HAL_TIM_Base_Start_IT+0x80>
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	4a21      	ldr	r2, [pc, #132]	; (8002dfc <HAL_TIM_Base_Start_IT+0xd8>)
 8002d78:	4293      	cmp	r3, r2
 8002d7a:	d013      	beq.n	8002da4 <HAL_TIM_Base_Start_IT+0x80>
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	4a1f      	ldr	r2, [pc, #124]	; (8002e00 <HAL_TIM_Base_Start_IT+0xdc>)
 8002d82:	4293      	cmp	r3, r2
 8002d84:	d00e      	beq.n	8002da4 <HAL_TIM_Base_Start_IT+0x80>
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	4a1e      	ldr	r2, [pc, #120]	; (8002e04 <HAL_TIM_Base_Start_IT+0xe0>)
 8002d8c:	4293      	cmp	r3, r2
 8002d8e:	d009      	beq.n	8002da4 <HAL_TIM_Base_Start_IT+0x80>
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	4a1c      	ldr	r2, [pc, #112]	; (8002e08 <HAL_TIM_Base_Start_IT+0xe4>)
 8002d96:	4293      	cmp	r3, r2
 8002d98:	d004      	beq.n	8002da4 <HAL_TIM_Base_Start_IT+0x80>
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	4a1b      	ldr	r2, [pc, #108]	; (8002e0c <HAL_TIM_Base_Start_IT+0xe8>)
 8002da0:	4293      	cmp	r3, r2
 8002da2:	d115      	bne.n	8002dd0 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	689a      	ldr	r2, [r3, #8]
 8002daa:	4b19      	ldr	r3, [pc, #100]	; (8002e10 <HAL_TIM_Base_Start_IT+0xec>)
 8002dac:	4013      	ands	r3, r2
 8002dae:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	2b06      	cmp	r3, #6
 8002db4:	d015      	beq.n	8002de2 <HAL_TIM_Base_Start_IT+0xbe>
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002dbc:	d011      	beq.n	8002de2 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	681a      	ldr	r2, [r3, #0]
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f042 0201 	orr.w	r2, r2, #1
 8002dcc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002dce:	e008      	b.n	8002de2 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	681a      	ldr	r2, [r3, #0]
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f042 0201 	orr.w	r2, r2, #1
 8002dde:	601a      	str	r2, [r3, #0]
 8002de0:	e000      	b.n	8002de4 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002de2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002de4:	2300      	movs	r3, #0
}
 8002de6:	4618      	mov	r0, r3
 8002de8:	3714      	adds	r7, #20
 8002dea:	46bd      	mov	sp, r7
 8002dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df0:	4770      	bx	lr
 8002df2:	bf00      	nop
 8002df4:	40010000 	.word	0x40010000
 8002df8:	40000400 	.word	0x40000400
 8002dfc:	40000800 	.word	0x40000800
 8002e00:	40000c00 	.word	0x40000c00
 8002e04:	40010400 	.word	0x40010400
 8002e08:	40014000 	.word	0x40014000
 8002e0c:	40001800 	.word	0x40001800
 8002e10:	00010007 	.word	0x00010007

08002e14 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002e14:	b580      	push	{r7, lr}
 8002e16:	b082      	sub	sp, #8
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	691b      	ldr	r3, [r3, #16]
 8002e22:	f003 0302 	and.w	r3, r3, #2
 8002e26:	2b02      	cmp	r3, #2
 8002e28:	d122      	bne.n	8002e70 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	68db      	ldr	r3, [r3, #12]
 8002e30:	f003 0302 	and.w	r3, r3, #2
 8002e34:	2b02      	cmp	r3, #2
 8002e36:	d11b      	bne.n	8002e70 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f06f 0202 	mvn.w	r2, #2
 8002e40:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	2201      	movs	r2, #1
 8002e46:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	699b      	ldr	r3, [r3, #24]
 8002e4e:	f003 0303 	and.w	r3, r3, #3
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d003      	beq.n	8002e5e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002e56:	6878      	ldr	r0, [r7, #4]
 8002e58:	f000 f905 	bl	8003066 <HAL_TIM_IC_CaptureCallback>
 8002e5c:	e005      	b.n	8002e6a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e5e:	6878      	ldr	r0, [r7, #4]
 8002e60:	f000 f8f7 	bl	8003052 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e64:	6878      	ldr	r0, [r7, #4]
 8002e66:	f000 f908 	bl	800307a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	2200      	movs	r2, #0
 8002e6e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	691b      	ldr	r3, [r3, #16]
 8002e76:	f003 0304 	and.w	r3, r3, #4
 8002e7a:	2b04      	cmp	r3, #4
 8002e7c:	d122      	bne.n	8002ec4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	68db      	ldr	r3, [r3, #12]
 8002e84:	f003 0304 	and.w	r3, r3, #4
 8002e88:	2b04      	cmp	r3, #4
 8002e8a:	d11b      	bne.n	8002ec4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f06f 0204 	mvn.w	r2, #4
 8002e94:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	2202      	movs	r2, #2
 8002e9a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	699b      	ldr	r3, [r3, #24]
 8002ea2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d003      	beq.n	8002eb2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002eaa:	6878      	ldr	r0, [r7, #4]
 8002eac:	f000 f8db 	bl	8003066 <HAL_TIM_IC_CaptureCallback>
 8002eb0:	e005      	b.n	8002ebe <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002eb2:	6878      	ldr	r0, [r7, #4]
 8002eb4:	f000 f8cd 	bl	8003052 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002eb8:	6878      	ldr	r0, [r7, #4]
 8002eba:	f000 f8de 	bl	800307a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	2200      	movs	r2, #0
 8002ec2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	691b      	ldr	r3, [r3, #16]
 8002eca:	f003 0308 	and.w	r3, r3, #8
 8002ece:	2b08      	cmp	r3, #8
 8002ed0:	d122      	bne.n	8002f18 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	68db      	ldr	r3, [r3, #12]
 8002ed8:	f003 0308 	and.w	r3, r3, #8
 8002edc:	2b08      	cmp	r3, #8
 8002ede:	d11b      	bne.n	8002f18 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f06f 0208 	mvn.w	r2, #8
 8002ee8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	2204      	movs	r2, #4
 8002eee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	69db      	ldr	r3, [r3, #28]
 8002ef6:	f003 0303 	and.w	r3, r3, #3
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d003      	beq.n	8002f06 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002efe:	6878      	ldr	r0, [r7, #4]
 8002f00:	f000 f8b1 	bl	8003066 <HAL_TIM_IC_CaptureCallback>
 8002f04:	e005      	b.n	8002f12 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f06:	6878      	ldr	r0, [r7, #4]
 8002f08:	f000 f8a3 	bl	8003052 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f0c:	6878      	ldr	r0, [r7, #4]
 8002f0e:	f000 f8b4 	bl	800307a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	2200      	movs	r2, #0
 8002f16:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	691b      	ldr	r3, [r3, #16]
 8002f1e:	f003 0310 	and.w	r3, r3, #16
 8002f22:	2b10      	cmp	r3, #16
 8002f24:	d122      	bne.n	8002f6c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	68db      	ldr	r3, [r3, #12]
 8002f2c:	f003 0310 	and.w	r3, r3, #16
 8002f30:	2b10      	cmp	r3, #16
 8002f32:	d11b      	bne.n	8002f6c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	f06f 0210 	mvn.w	r2, #16
 8002f3c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	2208      	movs	r2, #8
 8002f42:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	69db      	ldr	r3, [r3, #28]
 8002f4a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d003      	beq.n	8002f5a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002f52:	6878      	ldr	r0, [r7, #4]
 8002f54:	f000 f887 	bl	8003066 <HAL_TIM_IC_CaptureCallback>
 8002f58:	e005      	b.n	8002f66 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f5a:	6878      	ldr	r0, [r7, #4]
 8002f5c:	f000 f879 	bl	8003052 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f60:	6878      	ldr	r0, [r7, #4]
 8002f62:	f000 f88a 	bl	800307a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	2200      	movs	r2, #0
 8002f6a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	691b      	ldr	r3, [r3, #16]
 8002f72:	f003 0301 	and.w	r3, r3, #1
 8002f76:	2b01      	cmp	r3, #1
 8002f78:	d10e      	bne.n	8002f98 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	68db      	ldr	r3, [r3, #12]
 8002f80:	f003 0301 	and.w	r3, r3, #1
 8002f84:	2b01      	cmp	r3, #1
 8002f86:	d107      	bne.n	8002f98 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f06f 0201 	mvn.w	r2, #1
 8002f90:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002f92:	6878      	ldr	r0, [r7, #4]
 8002f94:	f7fe f8ae 	bl	80010f4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	691b      	ldr	r3, [r3, #16]
 8002f9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002fa2:	2b80      	cmp	r3, #128	; 0x80
 8002fa4:	d10e      	bne.n	8002fc4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	68db      	ldr	r3, [r3, #12]
 8002fac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002fb0:	2b80      	cmp	r3, #128	; 0x80
 8002fb2:	d107      	bne.n	8002fc4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002fbc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002fbe:	6878      	ldr	r0, [r7, #4]
 8002fc0:	f000 f91a 	bl	80031f8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	691b      	ldr	r3, [r3, #16]
 8002fca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002fd2:	d10e      	bne.n	8002ff2 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	68db      	ldr	r3, [r3, #12]
 8002fda:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002fde:	2b80      	cmp	r3, #128	; 0x80
 8002fe0:	d107      	bne.n	8002ff2 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8002fea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002fec:	6878      	ldr	r0, [r7, #4]
 8002fee:	f000 f90d 	bl	800320c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	691b      	ldr	r3, [r3, #16]
 8002ff8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ffc:	2b40      	cmp	r3, #64	; 0x40
 8002ffe:	d10e      	bne.n	800301e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	68db      	ldr	r3, [r3, #12]
 8003006:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800300a:	2b40      	cmp	r3, #64	; 0x40
 800300c:	d107      	bne.n	800301e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003016:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003018:	6878      	ldr	r0, [r7, #4]
 800301a:	f000 f838 	bl	800308e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	691b      	ldr	r3, [r3, #16]
 8003024:	f003 0320 	and.w	r3, r3, #32
 8003028:	2b20      	cmp	r3, #32
 800302a:	d10e      	bne.n	800304a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	68db      	ldr	r3, [r3, #12]
 8003032:	f003 0320 	and.w	r3, r3, #32
 8003036:	2b20      	cmp	r3, #32
 8003038:	d107      	bne.n	800304a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	f06f 0220 	mvn.w	r2, #32
 8003042:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003044:	6878      	ldr	r0, [r7, #4]
 8003046:	f000 f8cd 	bl	80031e4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800304a:	bf00      	nop
 800304c:	3708      	adds	r7, #8
 800304e:	46bd      	mov	sp, r7
 8003050:	bd80      	pop	{r7, pc}

08003052 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003052:	b480      	push	{r7}
 8003054:	b083      	sub	sp, #12
 8003056:	af00      	add	r7, sp, #0
 8003058:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800305a:	bf00      	nop
 800305c:	370c      	adds	r7, #12
 800305e:	46bd      	mov	sp, r7
 8003060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003064:	4770      	bx	lr

08003066 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003066:	b480      	push	{r7}
 8003068:	b083      	sub	sp, #12
 800306a:	af00      	add	r7, sp, #0
 800306c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800306e:	bf00      	nop
 8003070:	370c      	adds	r7, #12
 8003072:	46bd      	mov	sp, r7
 8003074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003078:	4770      	bx	lr

0800307a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800307a:	b480      	push	{r7}
 800307c:	b083      	sub	sp, #12
 800307e:	af00      	add	r7, sp, #0
 8003080:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003082:	bf00      	nop
 8003084:	370c      	adds	r7, #12
 8003086:	46bd      	mov	sp, r7
 8003088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800308c:	4770      	bx	lr

0800308e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800308e:	b480      	push	{r7}
 8003090:	b083      	sub	sp, #12
 8003092:	af00      	add	r7, sp, #0
 8003094:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003096:	bf00      	nop
 8003098:	370c      	adds	r7, #12
 800309a:	46bd      	mov	sp, r7
 800309c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a0:	4770      	bx	lr
	...

080030a4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80030a4:	b480      	push	{r7}
 80030a6:	b085      	sub	sp, #20
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	6078      	str	r0, [r7, #4]
 80030ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	4a40      	ldr	r2, [pc, #256]	; (80031b8 <TIM_Base_SetConfig+0x114>)
 80030b8:	4293      	cmp	r3, r2
 80030ba:	d013      	beq.n	80030e4 <TIM_Base_SetConfig+0x40>
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80030c2:	d00f      	beq.n	80030e4 <TIM_Base_SetConfig+0x40>
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	4a3d      	ldr	r2, [pc, #244]	; (80031bc <TIM_Base_SetConfig+0x118>)
 80030c8:	4293      	cmp	r3, r2
 80030ca:	d00b      	beq.n	80030e4 <TIM_Base_SetConfig+0x40>
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	4a3c      	ldr	r2, [pc, #240]	; (80031c0 <TIM_Base_SetConfig+0x11c>)
 80030d0:	4293      	cmp	r3, r2
 80030d2:	d007      	beq.n	80030e4 <TIM_Base_SetConfig+0x40>
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	4a3b      	ldr	r2, [pc, #236]	; (80031c4 <TIM_Base_SetConfig+0x120>)
 80030d8:	4293      	cmp	r3, r2
 80030da:	d003      	beq.n	80030e4 <TIM_Base_SetConfig+0x40>
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	4a3a      	ldr	r2, [pc, #232]	; (80031c8 <TIM_Base_SetConfig+0x124>)
 80030e0:	4293      	cmp	r3, r2
 80030e2:	d108      	bne.n	80030f6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80030ea:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80030ec:	683b      	ldr	r3, [r7, #0]
 80030ee:	685b      	ldr	r3, [r3, #4]
 80030f0:	68fa      	ldr	r2, [r7, #12]
 80030f2:	4313      	orrs	r3, r2
 80030f4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	4a2f      	ldr	r2, [pc, #188]	; (80031b8 <TIM_Base_SetConfig+0x114>)
 80030fa:	4293      	cmp	r3, r2
 80030fc:	d02b      	beq.n	8003156 <TIM_Base_SetConfig+0xb2>
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003104:	d027      	beq.n	8003156 <TIM_Base_SetConfig+0xb2>
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	4a2c      	ldr	r2, [pc, #176]	; (80031bc <TIM_Base_SetConfig+0x118>)
 800310a:	4293      	cmp	r3, r2
 800310c:	d023      	beq.n	8003156 <TIM_Base_SetConfig+0xb2>
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	4a2b      	ldr	r2, [pc, #172]	; (80031c0 <TIM_Base_SetConfig+0x11c>)
 8003112:	4293      	cmp	r3, r2
 8003114:	d01f      	beq.n	8003156 <TIM_Base_SetConfig+0xb2>
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	4a2a      	ldr	r2, [pc, #168]	; (80031c4 <TIM_Base_SetConfig+0x120>)
 800311a:	4293      	cmp	r3, r2
 800311c:	d01b      	beq.n	8003156 <TIM_Base_SetConfig+0xb2>
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	4a29      	ldr	r2, [pc, #164]	; (80031c8 <TIM_Base_SetConfig+0x124>)
 8003122:	4293      	cmp	r3, r2
 8003124:	d017      	beq.n	8003156 <TIM_Base_SetConfig+0xb2>
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	4a28      	ldr	r2, [pc, #160]	; (80031cc <TIM_Base_SetConfig+0x128>)
 800312a:	4293      	cmp	r3, r2
 800312c:	d013      	beq.n	8003156 <TIM_Base_SetConfig+0xb2>
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	4a27      	ldr	r2, [pc, #156]	; (80031d0 <TIM_Base_SetConfig+0x12c>)
 8003132:	4293      	cmp	r3, r2
 8003134:	d00f      	beq.n	8003156 <TIM_Base_SetConfig+0xb2>
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	4a26      	ldr	r2, [pc, #152]	; (80031d4 <TIM_Base_SetConfig+0x130>)
 800313a:	4293      	cmp	r3, r2
 800313c:	d00b      	beq.n	8003156 <TIM_Base_SetConfig+0xb2>
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	4a25      	ldr	r2, [pc, #148]	; (80031d8 <TIM_Base_SetConfig+0x134>)
 8003142:	4293      	cmp	r3, r2
 8003144:	d007      	beq.n	8003156 <TIM_Base_SetConfig+0xb2>
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	4a24      	ldr	r2, [pc, #144]	; (80031dc <TIM_Base_SetConfig+0x138>)
 800314a:	4293      	cmp	r3, r2
 800314c:	d003      	beq.n	8003156 <TIM_Base_SetConfig+0xb2>
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	4a23      	ldr	r2, [pc, #140]	; (80031e0 <TIM_Base_SetConfig+0x13c>)
 8003152:	4293      	cmp	r3, r2
 8003154:	d108      	bne.n	8003168 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800315c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800315e:	683b      	ldr	r3, [r7, #0]
 8003160:	68db      	ldr	r3, [r3, #12]
 8003162:	68fa      	ldr	r2, [r7, #12]
 8003164:	4313      	orrs	r3, r2
 8003166:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800316e:	683b      	ldr	r3, [r7, #0]
 8003170:	695b      	ldr	r3, [r3, #20]
 8003172:	4313      	orrs	r3, r2
 8003174:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	68fa      	ldr	r2, [r7, #12]
 800317a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800317c:	683b      	ldr	r3, [r7, #0]
 800317e:	689a      	ldr	r2, [r3, #8]
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003184:	683b      	ldr	r3, [r7, #0]
 8003186:	681a      	ldr	r2, [r3, #0]
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	4a0a      	ldr	r2, [pc, #40]	; (80031b8 <TIM_Base_SetConfig+0x114>)
 8003190:	4293      	cmp	r3, r2
 8003192:	d003      	beq.n	800319c <TIM_Base_SetConfig+0xf8>
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	4a0c      	ldr	r2, [pc, #48]	; (80031c8 <TIM_Base_SetConfig+0x124>)
 8003198:	4293      	cmp	r3, r2
 800319a:	d103      	bne.n	80031a4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800319c:	683b      	ldr	r3, [r7, #0]
 800319e:	691a      	ldr	r2, [r3, #16]
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	2201      	movs	r2, #1
 80031a8:	615a      	str	r2, [r3, #20]
}
 80031aa:	bf00      	nop
 80031ac:	3714      	adds	r7, #20
 80031ae:	46bd      	mov	sp, r7
 80031b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b4:	4770      	bx	lr
 80031b6:	bf00      	nop
 80031b8:	40010000 	.word	0x40010000
 80031bc:	40000400 	.word	0x40000400
 80031c0:	40000800 	.word	0x40000800
 80031c4:	40000c00 	.word	0x40000c00
 80031c8:	40010400 	.word	0x40010400
 80031cc:	40014000 	.word	0x40014000
 80031d0:	40014400 	.word	0x40014400
 80031d4:	40014800 	.word	0x40014800
 80031d8:	40001800 	.word	0x40001800
 80031dc:	40001c00 	.word	0x40001c00
 80031e0:	40002000 	.word	0x40002000

080031e4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80031e4:	b480      	push	{r7}
 80031e6:	b083      	sub	sp, #12
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80031ec:	bf00      	nop
 80031ee:	370c      	adds	r7, #12
 80031f0:	46bd      	mov	sp, r7
 80031f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f6:	4770      	bx	lr

080031f8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80031f8:	b480      	push	{r7}
 80031fa:	b083      	sub	sp, #12
 80031fc:	af00      	add	r7, sp, #0
 80031fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003200:	bf00      	nop
 8003202:	370c      	adds	r7, #12
 8003204:	46bd      	mov	sp, r7
 8003206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800320a:	4770      	bx	lr

0800320c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800320c:	b480      	push	{r7}
 800320e:	b083      	sub	sp, #12
 8003210:	af00      	add	r7, sp, #0
 8003212:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003214:	bf00      	nop
 8003216:	370c      	adds	r7, #12
 8003218:	46bd      	mov	sp, r7
 800321a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800321e:	4770      	bx	lr

08003220 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003220:	b580      	push	{r7, lr}
 8003222:	b082      	sub	sp, #8
 8003224:	af00      	add	r7, sp, #0
 8003226:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	2b00      	cmp	r3, #0
 800322c:	d101      	bne.n	8003232 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800322e:	2301      	movs	r3, #1
 8003230:	e040      	b.n	80032b4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003236:	2b00      	cmp	r3, #0
 8003238:	d106      	bne.n	8003248 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	2200      	movs	r2, #0
 800323e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003242:	6878      	ldr	r0, [r7, #4]
 8003244:	f7fd ff92 	bl	800116c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	2224      	movs	r2, #36	; 0x24
 800324c:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	681a      	ldr	r2, [r3, #0]
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f022 0201 	bic.w	r2, r2, #1
 800325c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800325e:	6878      	ldr	r0, [r7, #4]
 8003260:	f000 f82c 	bl	80032bc <UART_SetConfig>
 8003264:	4603      	mov	r3, r0
 8003266:	2b01      	cmp	r3, #1
 8003268:	d101      	bne.n	800326e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800326a:	2301      	movs	r3, #1
 800326c:	e022      	b.n	80032b4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003272:	2b00      	cmp	r3, #0
 8003274:	d002      	beq.n	800327c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003276:	6878      	ldr	r0, [r7, #4]
 8003278:	f000 fa84 	bl	8003784 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	685a      	ldr	r2, [r3, #4]
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800328a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	689a      	ldr	r2, [r3, #8]
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800329a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	681a      	ldr	r2, [r3, #0]
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f042 0201 	orr.w	r2, r2, #1
 80032aa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80032ac:	6878      	ldr	r0, [r7, #4]
 80032ae:	f000 fb0b 	bl	80038c8 <UART_CheckIdleState>
 80032b2:	4603      	mov	r3, r0
}
 80032b4:	4618      	mov	r0, r3
 80032b6:	3708      	adds	r7, #8
 80032b8:	46bd      	mov	sp, r7
 80032ba:	bd80      	pop	{r7, pc}

080032bc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80032bc:	b580      	push	{r7, lr}
 80032be:	b088      	sub	sp, #32
 80032c0:	af00      	add	r7, sp, #0
 80032c2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80032c4:	2300      	movs	r3, #0
 80032c6:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	689a      	ldr	r2, [r3, #8]
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	691b      	ldr	r3, [r3, #16]
 80032d0:	431a      	orrs	r2, r3
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	695b      	ldr	r3, [r3, #20]
 80032d6:	431a      	orrs	r2, r3
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	69db      	ldr	r3, [r3, #28]
 80032dc:	4313      	orrs	r3, r2
 80032de:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	681a      	ldr	r2, [r3, #0]
 80032e6:	4ba6      	ldr	r3, [pc, #664]	; (8003580 <UART_SetConfig+0x2c4>)
 80032e8:	4013      	ands	r3, r2
 80032ea:	687a      	ldr	r2, [r7, #4]
 80032ec:	6812      	ldr	r2, [r2, #0]
 80032ee:	6979      	ldr	r1, [r7, #20]
 80032f0:	430b      	orrs	r3, r1
 80032f2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	685b      	ldr	r3, [r3, #4]
 80032fa:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	68da      	ldr	r2, [r3, #12]
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	430a      	orrs	r2, r1
 8003308:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	699b      	ldr	r3, [r3, #24]
 800330e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	6a1b      	ldr	r3, [r3, #32]
 8003314:	697a      	ldr	r2, [r7, #20]
 8003316:	4313      	orrs	r3, r2
 8003318:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	689b      	ldr	r3, [r3, #8]
 8003320:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	697a      	ldr	r2, [r7, #20]
 800332a:	430a      	orrs	r2, r1
 800332c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	4a94      	ldr	r2, [pc, #592]	; (8003584 <UART_SetConfig+0x2c8>)
 8003334:	4293      	cmp	r3, r2
 8003336:	d120      	bne.n	800337a <UART_SetConfig+0xbe>
 8003338:	4b93      	ldr	r3, [pc, #588]	; (8003588 <UART_SetConfig+0x2cc>)
 800333a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800333e:	f003 0303 	and.w	r3, r3, #3
 8003342:	2b03      	cmp	r3, #3
 8003344:	d816      	bhi.n	8003374 <UART_SetConfig+0xb8>
 8003346:	a201      	add	r2, pc, #4	; (adr r2, 800334c <UART_SetConfig+0x90>)
 8003348:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800334c:	0800335d 	.word	0x0800335d
 8003350:	08003369 	.word	0x08003369
 8003354:	08003363 	.word	0x08003363
 8003358:	0800336f 	.word	0x0800336f
 800335c:	2301      	movs	r3, #1
 800335e:	77fb      	strb	r3, [r7, #31]
 8003360:	e150      	b.n	8003604 <UART_SetConfig+0x348>
 8003362:	2302      	movs	r3, #2
 8003364:	77fb      	strb	r3, [r7, #31]
 8003366:	e14d      	b.n	8003604 <UART_SetConfig+0x348>
 8003368:	2304      	movs	r3, #4
 800336a:	77fb      	strb	r3, [r7, #31]
 800336c:	e14a      	b.n	8003604 <UART_SetConfig+0x348>
 800336e:	2308      	movs	r3, #8
 8003370:	77fb      	strb	r3, [r7, #31]
 8003372:	e147      	b.n	8003604 <UART_SetConfig+0x348>
 8003374:	2310      	movs	r3, #16
 8003376:	77fb      	strb	r3, [r7, #31]
 8003378:	e144      	b.n	8003604 <UART_SetConfig+0x348>
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	4a83      	ldr	r2, [pc, #524]	; (800358c <UART_SetConfig+0x2d0>)
 8003380:	4293      	cmp	r3, r2
 8003382:	d132      	bne.n	80033ea <UART_SetConfig+0x12e>
 8003384:	4b80      	ldr	r3, [pc, #512]	; (8003588 <UART_SetConfig+0x2cc>)
 8003386:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800338a:	f003 030c 	and.w	r3, r3, #12
 800338e:	2b0c      	cmp	r3, #12
 8003390:	d828      	bhi.n	80033e4 <UART_SetConfig+0x128>
 8003392:	a201      	add	r2, pc, #4	; (adr r2, 8003398 <UART_SetConfig+0xdc>)
 8003394:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003398:	080033cd 	.word	0x080033cd
 800339c:	080033e5 	.word	0x080033e5
 80033a0:	080033e5 	.word	0x080033e5
 80033a4:	080033e5 	.word	0x080033e5
 80033a8:	080033d9 	.word	0x080033d9
 80033ac:	080033e5 	.word	0x080033e5
 80033b0:	080033e5 	.word	0x080033e5
 80033b4:	080033e5 	.word	0x080033e5
 80033b8:	080033d3 	.word	0x080033d3
 80033bc:	080033e5 	.word	0x080033e5
 80033c0:	080033e5 	.word	0x080033e5
 80033c4:	080033e5 	.word	0x080033e5
 80033c8:	080033df 	.word	0x080033df
 80033cc:	2300      	movs	r3, #0
 80033ce:	77fb      	strb	r3, [r7, #31]
 80033d0:	e118      	b.n	8003604 <UART_SetConfig+0x348>
 80033d2:	2302      	movs	r3, #2
 80033d4:	77fb      	strb	r3, [r7, #31]
 80033d6:	e115      	b.n	8003604 <UART_SetConfig+0x348>
 80033d8:	2304      	movs	r3, #4
 80033da:	77fb      	strb	r3, [r7, #31]
 80033dc:	e112      	b.n	8003604 <UART_SetConfig+0x348>
 80033de:	2308      	movs	r3, #8
 80033e0:	77fb      	strb	r3, [r7, #31]
 80033e2:	e10f      	b.n	8003604 <UART_SetConfig+0x348>
 80033e4:	2310      	movs	r3, #16
 80033e6:	77fb      	strb	r3, [r7, #31]
 80033e8:	e10c      	b.n	8003604 <UART_SetConfig+0x348>
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	4a68      	ldr	r2, [pc, #416]	; (8003590 <UART_SetConfig+0x2d4>)
 80033f0:	4293      	cmp	r3, r2
 80033f2:	d120      	bne.n	8003436 <UART_SetConfig+0x17a>
 80033f4:	4b64      	ldr	r3, [pc, #400]	; (8003588 <UART_SetConfig+0x2cc>)
 80033f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033fa:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80033fe:	2b30      	cmp	r3, #48	; 0x30
 8003400:	d013      	beq.n	800342a <UART_SetConfig+0x16e>
 8003402:	2b30      	cmp	r3, #48	; 0x30
 8003404:	d814      	bhi.n	8003430 <UART_SetConfig+0x174>
 8003406:	2b20      	cmp	r3, #32
 8003408:	d009      	beq.n	800341e <UART_SetConfig+0x162>
 800340a:	2b20      	cmp	r3, #32
 800340c:	d810      	bhi.n	8003430 <UART_SetConfig+0x174>
 800340e:	2b00      	cmp	r3, #0
 8003410:	d002      	beq.n	8003418 <UART_SetConfig+0x15c>
 8003412:	2b10      	cmp	r3, #16
 8003414:	d006      	beq.n	8003424 <UART_SetConfig+0x168>
 8003416:	e00b      	b.n	8003430 <UART_SetConfig+0x174>
 8003418:	2300      	movs	r3, #0
 800341a:	77fb      	strb	r3, [r7, #31]
 800341c:	e0f2      	b.n	8003604 <UART_SetConfig+0x348>
 800341e:	2302      	movs	r3, #2
 8003420:	77fb      	strb	r3, [r7, #31]
 8003422:	e0ef      	b.n	8003604 <UART_SetConfig+0x348>
 8003424:	2304      	movs	r3, #4
 8003426:	77fb      	strb	r3, [r7, #31]
 8003428:	e0ec      	b.n	8003604 <UART_SetConfig+0x348>
 800342a:	2308      	movs	r3, #8
 800342c:	77fb      	strb	r3, [r7, #31]
 800342e:	e0e9      	b.n	8003604 <UART_SetConfig+0x348>
 8003430:	2310      	movs	r3, #16
 8003432:	77fb      	strb	r3, [r7, #31]
 8003434:	e0e6      	b.n	8003604 <UART_SetConfig+0x348>
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	4a56      	ldr	r2, [pc, #344]	; (8003594 <UART_SetConfig+0x2d8>)
 800343c:	4293      	cmp	r3, r2
 800343e:	d120      	bne.n	8003482 <UART_SetConfig+0x1c6>
 8003440:	4b51      	ldr	r3, [pc, #324]	; (8003588 <UART_SetConfig+0x2cc>)
 8003442:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003446:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800344a:	2bc0      	cmp	r3, #192	; 0xc0
 800344c:	d013      	beq.n	8003476 <UART_SetConfig+0x1ba>
 800344e:	2bc0      	cmp	r3, #192	; 0xc0
 8003450:	d814      	bhi.n	800347c <UART_SetConfig+0x1c0>
 8003452:	2b80      	cmp	r3, #128	; 0x80
 8003454:	d009      	beq.n	800346a <UART_SetConfig+0x1ae>
 8003456:	2b80      	cmp	r3, #128	; 0x80
 8003458:	d810      	bhi.n	800347c <UART_SetConfig+0x1c0>
 800345a:	2b00      	cmp	r3, #0
 800345c:	d002      	beq.n	8003464 <UART_SetConfig+0x1a8>
 800345e:	2b40      	cmp	r3, #64	; 0x40
 8003460:	d006      	beq.n	8003470 <UART_SetConfig+0x1b4>
 8003462:	e00b      	b.n	800347c <UART_SetConfig+0x1c0>
 8003464:	2300      	movs	r3, #0
 8003466:	77fb      	strb	r3, [r7, #31]
 8003468:	e0cc      	b.n	8003604 <UART_SetConfig+0x348>
 800346a:	2302      	movs	r3, #2
 800346c:	77fb      	strb	r3, [r7, #31]
 800346e:	e0c9      	b.n	8003604 <UART_SetConfig+0x348>
 8003470:	2304      	movs	r3, #4
 8003472:	77fb      	strb	r3, [r7, #31]
 8003474:	e0c6      	b.n	8003604 <UART_SetConfig+0x348>
 8003476:	2308      	movs	r3, #8
 8003478:	77fb      	strb	r3, [r7, #31]
 800347a:	e0c3      	b.n	8003604 <UART_SetConfig+0x348>
 800347c:	2310      	movs	r3, #16
 800347e:	77fb      	strb	r3, [r7, #31]
 8003480:	e0c0      	b.n	8003604 <UART_SetConfig+0x348>
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	4a44      	ldr	r2, [pc, #272]	; (8003598 <UART_SetConfig+0x2dc>)
 8003488:	4293      	cmp	r3, r2
 800348a:	d125      	bne.n	80034d8 <UART_SetConfig+0x21c>
 800348c:	4b3e      	ldr	r3, [pc, #248]	; (8003588 <UART_SetConfig+0x2cc>)
 800348e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003492:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003496:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800349a:	d017      	beq.n	80034cc <UART_SetConfig+0x210>
 800349c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80034a0:	d817      	bhi.n	80034d2 <UART_SetConfig+0x216>
 80034a2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80034a6:	d00b      	beq.n	80034c0 <UART_SetConfig+0x204>
 80034a8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80034ac:	d811      	bhi.n	80034d2 <UART_SetConfig+0x216>
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d003      	beq.n	80034ba <UART_SetConfig+0x1fe>
 80034b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80034b6:	d006      	beq.n	80034c6 <UART_SetConfig+0x20a>
 80034b8:	e00b      	b.n	80034d2 <UART_SetConfig+0x216>
 80034ba:	2300      	movs	r3, #0
 80034bc:	77fb      	strb	r3, [r7, #31]
 80034be:	e0a1      	b.n	8003604 <UART_SetConfig+0x348>
 80034c0:	2302      	movs	r3, #2
 80034c2:	77fb      	strb	r3, [r7, #31]
 80034c4:	e09e      	b.n	8003604 <UART_SetConfig+0x348>
 80034c6:	2304      	movs	r3, #4
 80034c8:	77fb      	strb	r3, [r7, #31]
 80034ca:	e09b      	b.n	8003604 <UART_SetConfig+0x348>
 80034cc:	2308      	movs	r3, #8
 80034ce:	77fb      	strb	r3, [r7, #31]
 80034d0:	e098      	b.n	8003604 <UART_SetConfig+0x348>
 80034d2:	2310      	movs	r3, #16
 80034d4:	77fb      	strb	r3, [r7, #31]
 80034d6:	e095      	b.n	8003604 <UART_SetConfig+0x348>
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	4a2f      	ldr	r2, [pc, #188]	; (800359c <UART_SetConfig+0x2e0>)
 80034de:	4293      	cmp	r3, r2
 80034e0:	d125      	bne.n	800352e <UART_SetConfig+0x272>
 80034e2:	4b29      	ldr	r3, [pc, #164]	; (8003588 <UART_SetConfig+0x2cc>)
 80034e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034e8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80034ec:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80034f0:	d017      	beq.n	8003522 <UART_SetConfig+0x266>
 80034f2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80034f6:	d817      	bhi.n	8003528 <UART_SetConfig+0x26c>
 80034f8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80034fc:	d00b      	beq.n	8003516 <UART_SetConfig+0x25a>
 80034fe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003502:	d811      	bhi.n	8003528 <UART_SetConfig+0x26c>
 8003504:	2b00      	cmp	r3, #0
 8003506:	d003      	beq.n	8003510 <UART_SetConfig+0x254>
 8003508:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800350c:	d006      	beq.n	800351c <UART_SetConfig+0x260>
 800350e:	e00b      	b.n	8003528 <UART_SetConfig+0x26c>
 8003510:	2301      	movs	r3, #1
 8003512:	77fb      	strb	r3, [r7, #31]
 8003514:	e076      	b.n	8003604 <UART_SetConfig+0x348>
 8003516:	2302      	movs	r3, #2
 8003518:	77fb      	strb	r3, [r7, #31]
 800351a:	e073      	b.n	8003604 <UART_SetConfig+0x348>
 800351c:	2304      	movs	r3, #4
 800351e:	77fb      	strb	r3, [r7, #31]
 8003520:	e070      	b.n	8003604 <UART_SetConfig+0x348>
 8003522:	2308      	movs	r3, #8
 8003524:	77fb      	strb	r3, [r7, #31]
 8003526:	e06d      	b.n	8003604 <UART_SetConfig+0x348>
 8003528:	2310      	movs	r3, #16
 800352a:	77fb      	strb	r3, [r7, #31]
 800352c:	e06a      	b.n	8003604 <UART_SetConfig+0x348>
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	4a1b      	ldr	r2, [pc, #108]	; (80035a0 <UART_SetConfig+0x2e4>)
 8003534:	4293      	cmp	r3, r2
 8003536:	d138      	bne.n	80035aa <UART_SetConfig+0x2ee>
 8003538:	4b13      	ldr	r3, [pc, #76]	; (8003588 <UART_SetConfig+0x2cc>)
 800353a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800353e:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8003542:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003546:	d017      	beq.n	8003578 <UART_SetConfig+0x2bc>
 8003548:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800354c:	d82a      	bhi.n	80035a4 <UART_SetConfig+0x2e8>
 800354e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003552:	d00b      	beq.n	800356c <UART_SetConfig+0x2b0>
 8003554:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003558:	d824      	bhi.n	80035a4 <UART_SetConfig+0x2e8>
 800355a:	2b00      	cmp	r3, #0
 800355c:	d003      	beq.n	8003566 <UART_SetConfig+0x2aa>
 800355e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003562:	d006      	beq.n	8003572 <UART_SetConfig+0x2b6>
 8003564:	e01e      	b.n	80035a4 <UART_SetConfig+0x2e8>
 8003566:	2300      	movs	r3, #0
 8003568:	77fb      	strb	r3, [r7, #31]
 800356a:	e04b      	b.n	8003604 <UART_SetConfig+0x348>
 800356c:	2302      	movs	r3, #2
 800356e:	77fb      	strb	r3, [r7, #31]
 8003570:	e048      	b.n	8003604 <UART_SetConfig+0x348>
 8003572:	2304      	movs	r3, #4
 8003574:	77fb      	strb	r3, [r7, #31]
 8003576:	e045      	b.n	8003604 <UART_SetConfig+0x348>
 8003578:	2308      	movs	r3, #8
 800357a:	77fb      	strb	r3, [r7, #31]
 800357c:	e042      	b.n	8003604 <UART_SetConfig+0x348>
 800357e:	bf00      	nop
 8003580:	efff69f3 	.word	0xefff69f3
 8003584:	40011000 	.word	0x40011000
 8003588:	40023800 	.word	0x40023800
 800358c:	40004400 	.word	0x40004400
 8003590:	40004800 	.word	0x40004800
 8003594:	40004c00 	.word	0x40004c00
 8003598:	40005000 	.word	0x40005000
 800359c:	40011400 	.word	0x40011400
 80035a0:	40007800 	.word	0x40007800
 80035a4:	2310      	movs	r3, #16
 80035a6:	77fb      	strb	r3, [r7, #31]
 80035a8:	e02c      	b.n	8003604 <UART_SetConfig+0x348>
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	4a72      	ldr	r2, [pc, #456]	; (8003778 <UART_SetConfig+0x4bc>)
 80035b0:	4293      	cmp	r3, r2
 80035b2:	d125      	bne.n	8003600 <UART_SetConfig+0x344>
 80035b4:	4b71      	ldr	r3, [pc, #452]	; (800377c <UART_SetConfig+0x4c0>)
 80035b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035ba:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80035be:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80035c2:	d017      	beq.n	80035f4 <UART_SetConfig+0x338>
 80035c4:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80035c8:	d817      	bhi.n	80035fa <UART_SetConfig+0x33e>
 80035ca:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80035ce:	d00b      	beq.n	80035e8 <UART_SetConfig+0x32c>
 80035d0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80035d4:	d811      	bhi.n	80035fa <UART_SetConfig+0x33e>
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d003      	beq.n	80035e2 <UART_SetConfig+0x326>
 80035da:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80035de:	d006      	beq.n	80035ee <UART_SetConfig+0x332>
 80035e0:	e00b      	b.n	80035fa <UART_SetConfig+0x33e>
 80035e2:	2300      	movs	r3, #0
 80035e4:	77fb      	strb	r3, [r7, #31]
 80035e6:	e00d      	b.n	8003604 <UART_SetConfig+0x348>
 80035e8:	2302      	movs	r3, #2
 80035ea:	77fb      	strb	r3, [r7, #31]
 80035ec:	e00a      	b.n	8003604 <UART_SetConfig+0x348>
 80035ee:	2304      	movs	r3, #4
 80035f0:	77fb      	strb	r3, [r7, #31]
 80035f2:	e007      	b.n	8003604 <UART_SetConfig+0x348>
 80035f4:	2308      	movs	r3, #8
 80035f6:	77fb      	strb	r3, [r7, #31]
 80035f8:	e004      	b.n	8003604 <UART_SetConfig+0x348>
 80035fa:	2310      	movs	r3, #16
 80035fc:	77fb      	strb	r3, [r7, #31]
 80035fe:	e001      	b.n	8003604 <UART_SetConfig+0x348>
 8003600:	2310      	movs	r3, #16
 8003602:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	69db      	ldr	r3, [r3, #28]
 8003608:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800360c:	d15b      	bne.n	80036c6 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800360e:	7ffb      	ldrb	r3, [r7, #31]
 8003610:	2b08      	cmp	r3, #8
 8003612:	d828      	bhi.n	8003666 <UART_SetConfig+0x3aa>
 8003614:	a201      	add	r2, pc, #4	; (adr r2, 800361c <UART_SetConfig+0x360>)
 8003616:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800361a:	bf00      	nop
 800361c:	08003641 	.word	0x08003641
 8003620:	08003649 	.word	0x08003649
 8003624:	08003651 	.word	0x08003651
 8003628:	08003667 	.word	0x08003667
 800362c:	08003657 	.word	0x08003657
 8003630:	08003667 	.word	0x08003667
 8003634:	08003667 	.word	0x08003667
 8003638:	08003667 	.word	0x08003667
 800363c:	0800365f 	.word	0x0800365f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003640:	f7fe fe8c 	bl	800235c <HAL_RCC_GetPCLK1Freq>
 8003644:	61b8      	str	r0, [r7, #24]
        break;
 8003646:	e013      	b.n	8003670 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003648:	f7fe fe9c 	bl	8002384 <HAL_RCC_GetPCLK2Freq>
 800364c:	61b8      	str	r0, [r7, #24]
        break;
 800364e:	e00f      	b.n	8003670 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003650:	4b4b      	ldr	r3, [pc, #300]	; (8003780 <UART_SetConfig+0x4c4>)
 8003652:	61bb      	str	r3, [r7, #24]
        break;
 8003654:	e00c      	b.n	8003670 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003656:	f7fe fdaf 	bl	80021b8 <HAL_RCC_GetSysClockFreq>
 800365a:	61b8      	str	r0, [r7, #24]
        break;
 800365c:	e008      	b.n	8003670 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800365e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003662:	61bb      	str	r3, [r7, #24]
        break;
 8003664:	e004      	b.n	8003670 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8003666:	2300      	movs	r3, #0
 8003668:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800366a:	2301      	movs	r3, #1
 800366c:	77bb      	strb	r3, [r7, #30]
        break;
 800366e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003670:	69bb      	ldr	r3, [r7, #24]
 8003672:	2b00      	cmp	r3, #0
 8003674:	d074      	beq.n	8003760 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003676:	69bb      	ldr	r3, [r7, #24]
 8003678:	005a      	lsls	r2, r3, #1
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	685b      	ldr	r3, [r3, #4]
 800367e:	085b      	lsrs	r3, r3, #1
 8003680:	441a      	add	r2, r3
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	685b      	ldr	r3, [r3, #4]
 8003686:	fbb2 f3f3 	udiv	r3, r2, r3
 800368a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800368c:	693b      	ldr	r3, [r7, #16]
 800368e:	2b0f      	cmp	r3, #15
 8003690:	d916      	bls.n	80036c0 <UART_SetConfig+0x404>
 8003692:	693b      	ldr	r3, [r7, #16]
 8003694:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003698:	d212      	bcs.n	80036c0 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800369a:	693b      	ldr	r3, [r7, #16]
 800369c:	b29b      	uxth	r3, r3
 800369e:	f023 030f 	bic.w	r3, r3, #15
 80036a2:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80036a4:	693b      	ldr	r3, [r7, #16]
 80036a6:	085b      	lsrs	r3, r3, #1
 80036a8:	b29b      	uxth	r3, r3
 80036aa:	f003 0307 	and.w	r3, r3, #7
 80036ae:	b29a      	uxth	r2, r3
 80036b0:	89fb      	ldrh	r3, [r7, #14]
 80036b2:	4313      	orrs	r3, r2
 80036b4:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	89fa      	ldrh	r2, [r7, #14]
 80036bc:	60da      	str	r2, [r3, #12]
 80036be:	e04f      	b.n	8003760 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80036c0:	2301      	movs	r3, #1
 80036c2:	77bb      	strb	r3, [r7, #30]
 80036c4:	e04c      	b.n	8003760 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 80036c6:	7ffb      	ldrb	r3, [r7, #31]
 80036c8:	2b08      	cmp	r3, #8
 80036ca:	d828      	bhi.n	800371e <UART_SetConfig+0x462>
 80036cc:	a201      	add	r2, pc, #4	; (adr r2, 80036d4 <UART_SetConfig+0x418>)
 80036ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036d2:	bf00      	nop
 80036d4:	080036f9 	.word	0x080036f9
 80036d8:	08003701 	.word	0x08003701
 80036dc:	08003709 	.word	0x08003709
 80036e0:	0800371f 	.word	0x0800371f
 80036e4:	0800370f 	.word	0x0800370f
 80036e8:	0800371f 	.word	0x0800371f
 80036ec:	0800371f 	.word	0x0800371f
 80036f0:	0800371f 	.word	0x0800371f
 80036f4:	08003717 	.word	0x08003717
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80036f8:	f7fe fe30 	bl	800235c <HAL_RCC_GetPCLK1Freq>
 80036fc:	61b8      	str	r0, [r7, #24]
        break;
 80036fe:	e013      	b.n	8003728 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003700:	f7fe fe40 	bl	8002384 <HAL_RCC_GetPCLK2Freq>
 8003704:	61b8      	str	r0, [r7, #24]
        break;
 8003706:	e00f      	b.n	8003728 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003708:	4b1d      	ldr	r3, [pc, #116]	; (8003780 <UART_SetConfig+0x4c4>)
 800370a:	61bb      	str	r3, [r7, #24]
        break;
 800370c:	e00c      	b.n	8003728 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800370e:	f7fe fd53 	bl	80021b8 <HAL_RCC_GetSysClockFreq>
 8003712:	61b8      	str	r0, [r7, #24]
        break;
 8003714:	e008      	b.n	8003728 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003716:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800371a:	61bb      	str	r3, [r7, #24]
        break;
 800371c:	e004      	b.n	8003728 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800371e:	2300      	movs	r3, #0
 8003720:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003722:	2301      	movs	r3, #1
 8003724:	77bb      	strb	r3, [r7, #30]
        break;
 8003726:	bf00      	nop
    }

    if (pclk != 0U)
 8003728:	69bb      	ldr	r3, [r7, #24]
 800372a:	2b00      	cmp	r3, #0
 800372c:	d018      	beq.n	8003760 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	685b      	ldr	r3, [r3, #4]
 8003732:	085a      	lsrs	r2, r3, #1
 8003734:	69bb      	ldr	r3, [r7, #24]
 8003736:	441a      	add	r2, r3
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	685b      	ldr	r3, [r3, #4]
 800373c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003740:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003742:	693b      	ldr	r3, [r7, #16]
 8003744:	2b0f      	cmp	r3, #15
 8003746:	d909      	bls.n	800375c <UART_SetConfig+0x4a0>
 8003748:	693b      	ldr	r3, [r7, #16]
 800374a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800374e:	d205      	bcs.n	800375c <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003750:	693b      	ldr	r3, [r7, #16]
 8003752:	b29a      	uxth	r2, r3
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	60da      	str	r2, [r3, #12]
 800375a:	e001      	b.n	8003760 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800375c:	2301      	movs	r3, #1
 800375e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	2200      	movs	r2, #0
 8003764:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	2200      	movs	r2, #0
 800376a:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 800376c:	7fbb      	ldrb	r3, [r7, #30]
}
 800376e:	4618      	mov	r0, r3
 8003770:	3720      	adds	r7, #32
 8003772:	46bd      	mov	sp, r7
 8003774:	bd80      	pop	{r7, pc}
 8003776:	bf00      	nop
 8003778:	40007c00 	.word	0x40007c00
 800377c:	40023800 	.word	0x40023800
 8003780:	00f42400 	.word	0x00f42400

08003784 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003784:	b480      	push	{r7}
 8003786:	b083      	sub	sp, #12
 8003788:	af00      	add	r7, sp, #0
 800378a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003790:	f003 0301 	and.w	r3, r3, #1
 8003794:	2b00      	cmp	r3, #0
 8003796:	d00a      	beq.n	80037ae <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	685b      	ldr	r3, [r3, #4]
 800379e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	430a      	orrs	r2, r1
 80037ac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037b2:	f003 0302 	and.w	r3, r3, #2
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d00a      	beq.n	80037d0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	685b      	ldr	r3, [r3, #4]
 80037c0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	430a      	orrs	r2, r1
 80037ce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037d4:	f003 0304 	and.w	r3, r3, #4
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d00a      	beq.n	80037f2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	685b      	ldr	r3, [r3, #4]
 80037e2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	430a      	orrs	r2, r1
 80037f0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037f6:	f003 0308 	and.w	r3, r3, #8
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d00a      	beq.n	8003814 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	685b      	ldr	r3, [r3, #4]
 8003804:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	430a      	orrs	r2, r1
 8003812:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003818:	f003 0310 	and.w	r3, r3, #16
 800381c:	2b00      	cmp	r3, #0
 800381e:	d00a      	beq.n	8003836 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	689b      	ldr	r3, [r3, #8]
 8003826:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	430a      	orrs	r2, r1
 8003834:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800383a:	f003 0320 	and.w	r3, r3, #32
 800383e:	2b00      	cmp	r3, #0
 8003840:	d00a      	beq.n	8003858 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	689b      	ldr	r3, [r3, #8]
 8003848:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	430a      	orrs	r2, r1
 8003856:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800385c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003860:	2b00      	cmp	r3, #0
 8003862:	d01a      	beq.n	800389a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	685b      	ldr	r3, [r3, #4]
 800386a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	430a      	orrs	r2, r1
 8003878:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800387e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003882:	d10a      	bne.n	800389a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	685b      	ldr	r3, [r3, #4]
 800388a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	430a      	orrs	r2, r1
 8003898:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800389e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d00a      	beq.n	80038bc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	685b      	ldr	r3, [r3, #4]
 80038ac:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	430a      	orrs	r2, r1
 80038ba:	605a      	str	r2, [r3, #4]
  }
}
 80038bc:	bf00      	nop
 80038be:	370c      	adds	r7, #12
 80038c0:	46bd      	mov	sp, r7
 80038c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c6:	4770      	bx	lr

080038c8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80038c8:	b580      	push	{r7, lr}
 80038ca:	b086      	sub	sp, #24
 80038cc:	af02      	add	r7, sp, #8
 80038ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	2200      	movs	r2, #0
 80038d4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80038d8:	f7fd fe20 	bl	800151c <HAL_GetTick>
 80038dc:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	f003 0308 	and.w	r3, r3, #8
 80038e8:	2b08      	cmp	r3, #8
 80038ea:	d10e      	bne.n	800390a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80038ec:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80038f0:	9300      	str	r3, [sp, #0]
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	2200      	movs	r2, #0
 80038f6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80038fa:	6878      	ldr	r0, [r7, #4]
 80038fc:	f000 f831 	bl	8003962 <UART_WaitOnFlagUntilTimeout>
 8003900:	4603      	mov	r3, r0
 8003902:	2b00      	cmp	r3, #0
 8003904:	d001      	beq.n	800390a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003906:	2303      	movs	r3, #3
 8003908:	e027      	b.n	800395a <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	f003 0304 	and.w	r3, r3, #4
 8003914:	2b04      	cmp	r3, #4
 8003916:	d10e      	bne.n	8003936 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003918:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800391c:	9300      	str	r3, [sp, #0]
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	2200      	movs	r2, #0
 8003922:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003926:	6878      	ldr	r0, [r7, #4]
 8003928:	f000 f81b 	bl	8003962 <UART_WaitOnFlagUntilTimeout>
 800392c:	4603      	mov	r3, r0
 800392e:	2b00      	cmp	r3, #0
 8003930:	d001      	beq.n	8003936 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003932:	2303      	movs	r3, #3
 8003934:	e011      	b.n	800395a <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	2220      	movs	r2, #32
 800393a:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	2220      	movs	r2, #32
 8003940:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	2200      	movs	r2, #0
 8003948:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	2200      	movs	r2, #0
 800394e:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	2200      	movs	r2, #0
 8003954:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8003958:	2300      	movs	r3, #0
}
 800395a:	4618      	mov	r0, r3
 800395c:	3710      	adds	r7, #16
 800395e:	46bd      	mov	sp, r7
 8003960:	bd80      	pop	{r7, pc}

08003962 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003962:	b580      	push	{r7, lr}
 8003964:	b09c      	sub	sp, #112	; 0x70
 8003966:	af00      	add	r7, sp, #0
 8003968:	60f8      	str	r0, [r7, #12]
 800396a:	60b9      	str	r1, [r7, #8]
 800396c:	603b      	str	r3, [r7, #0]
 800396e:	4613      	mov	r3, r2
 8003970:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003972:	e0a7      	b.n	8003ac4 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003974:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003976:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800397a:	f000 80a3 	beq.w	8003ac4 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800397e:	f7fd fdcd 	bl	800151c <HAL_GetTick>
 8003982:	4602      	mov	r2, r0
 8003984:	683b      	ldr	r3, [r7, #0]
 8003986:	1ad3      	subs	r3, r2, r3
 8003988:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800398a:	429a      	cmp	r2, r3
 800398c:	d302      	bcc.n	8003994 <UART_WaitOnFlagUntilTimeout+0x32>
 800398e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003990:	2b00      	cmp	r3, #0
 8003992:	d13f      	bne.n	8003a14 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800399a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800399c:	e853 3f00 	ldrex	r3, [r3]
 80039a0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80039a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80039a4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80039a8:	667b      	str	r3, [r7, #100]	; 0x64
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	461a      	mov	r2, r3
 80039b0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80039b2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80039b4:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039b6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80039b8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80039ba:	e841 2300 	strex	r3, r2, [r1]
 80039be:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80039c0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d1e6      	bne.n	8003994 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	3308      	adds	r3, #8
 80039cc:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80039d0:	e853 3f00 	ldrex	r3, [r3]
 80039d4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80039d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039d8:	f023 0301 	bic.w	r3, r3, #1
 80039dc:	663b      	str	r3, [r7, #96]	; 0x60
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	3308      	adds	r3, #8
 80039e4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80039e6:	64ba      	str	r2, [r7, #72]	; 0x48
 80039e8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039ea:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80039ec:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80039ee:	e841 2300 	strex	r3, r2, [r1]
 80039f2:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80039f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d1e5      	bne.n	80039c6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	2220      	movs	r2, #32
 80039fe:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	2220      	movs	r2, #32
 8003a04:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	2200      	movs	r2, #0
 8003a0c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8003a10:	2303      	movs	r3, #3
 8003a12:	e068      	b.n	8003ae6 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	f003 0304 	and.w	r3, r3, #4
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d050      	beq.n	8003ac4 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	69db      	ldr	r3, [r3, #28]
 8003a28:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003a2c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003a30:	d148      	bne.n	8003ac4 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003a3a:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a44:	e853 3f00 	ldrex	r3, [r3]
 8003a48:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003a4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a4c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003a50:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	461a      	mov	r2, r3
 8003a58:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a5a:	637b      	str	r3, [r7, #52]	; 0x34
 8003a5c:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a5e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003a60:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003a62:	e841 2300 	strex	r3, r2, [r1]
 8003a66:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003a68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d1e6      	bne.n	8003a3c <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	3308      	adds	r3, #8
 8003a74:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a76:	697b      	ldr	r3, [r7, #20]
 8003a78:	e853 3f00 	ldrex	r3, [r3]
 8003a7c:	613b      	str	r3, [r7, #16]
   return(result);
 8003a7e:	693b      	ldr	r3, [r7, #16]
 8003a80:	f023 0301 	bic.w	r3, r3, #1
 8003a84:	66bb      	str	r3, [r7, #104]	; 0x68
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	3308      	adds	r3, #8
 8003a8c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003a8e:	623a      	str	r2, [r7, #32]
 8003a90:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a92:	69f9      	ldr	r1, [r7, #28]
 8003a94:	6a3a      	ldr	r2, [r7, #32]
 8003a96:	e841 2300 	strex	r3, r2, [r1]
 8003a9a:	61bb      	str	r3, [r7, #24]
   return(result);
 8003a9c:	69bb      	ldr	r3, [r7, #24]
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d1e5      	bne.n	8003a6e <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	2220      	movs	r2, #32
 8003aa6:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	2220      	movs	r2, #32
 8003aac:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	2220      	movs	r2, #32
 8003ab4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	2200      	movs	r2, #0
 8003abc:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8003ac0:	2303      	movs	r3, #3
 8003ac2:	e010      	b.n	8003ae6 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	69da      	ldr	r2, [r3, #28]
 8003aca:	68bb      	ldr	r3, [r7, #8]
 8003acc:	4013      	ands	r3, r2
 8003ace:	68ba      	ldr	r2, [r7, #8]
 8003ad0:	429a      	cmp	r2, r3
 8003ad2:	bf0c      	ite	eq
 8003ad4:	2301      	moveq	r3, #1
 8003ad6:	2300      	movne	r3, #0
 8003ad8:	b2db      	uxtb	r3, r3
 8003ada:	461a      	mov	r2, r3
 8003adc:	79fb      	ldrb	r3, [r7, #7]
 8003ade:	429a      	cmp	r2, r3
 8003ae0:	f43f af48 	beq.w	8003974 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003ae4:	2300      	movs	r3, #0
}
 8003ae6:	4618      	mov	r0, r3
 8003ae8:	3770      	adds	r7, #112	; 0x70
 8003aea:	46bd      	mov	sp, r7
 8003aec:	bd80      	pop	{r7, pc}

08003aee <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003aee:	b480      	push	{r7}
 8003af0:	b083      	sub	sp, #12
 8003af2:	af00      	add	r7, sp, #0
 8003af4:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	f103 0208 	add.w	r2, r3, #8
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003b06:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	f103 0208 	add.w	r2, r3, #8
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	f103 0208 	add.w	r2, r3, #8
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	2200      	movs	r2, #0
 8003b20:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003b22:	bf00      	nop
 8003b24:	370c      	adds	r7, #12
 8003b26:	46bd      	mov	sp, r7
 8003b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b2c:	4770      	bx	lr

08003b2e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003b2e:	b480      	push	{r7}
 8003b30:	b083      	sub	sp, #12
 8003b32:	af00      	add	r7, sp, #0
 8003b34:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	2200      	movs	r2, #0
 8003b3a:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003b3c:	bf00      	nop
 8003b3e:	370c      	adds	r7, #12
 8003b40:	46bd      	mov	sp, r7
 8003b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b46:	4770      	bx	lr

08003b48 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 8003b48:	b480      	push	{r7}
 8003b4a:	b085      	sub	sp, #20
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	6078      	str	r0, [r7, #4]
 8003b50:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	685b      	ldr	r3, [r3, #4]
 8003b56:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 8003b58:	683b      	ldr	r3, [r7, #0]
 8003b5a:	68fa      	ldr	r2, [r7, #12]
 8003b5c:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	689a      	ldr	r2, [r3, #8]
 8003b62:	683b      	ldr	r3, [r7, #0]
 8003b64:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	689b      	ldr	r3, [r3, #8]
 8003b6a:	683a      	ldr	r2, [r7, #0]
 8003b6c:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	683a      	ldr	r2, [r7, #0]
 8003b72:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 8003b74:	683b      	ldr	r3, [r7, #0]
 8003b76:	687a      	ldr	r2, [r7, #4]
 8003b78:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	1c5a      	adds	r2, r3, #1
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	601a      	str	r2, [r3, #0]
}
 8003b84:	bf00      	nop
 8003b86:	3714      	adds	r7, #20
 8003b88:	46bd      	mov	sp, r7
 8003b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b8e:	4770      	bx	lr

08003b90 <uxListRemove>:
    ( pxList->uxNumberOfItems )++;
}
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003b90:	b480      	push	{r7}
 8003b92:	b085      	sub	sp, #20
 8003b94:	af00      	add	r7, sp, #0
 8003b96:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	691b      	ldr	r3, [r3, #16]
 8003b9c:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	685b      	ldr	r3, [r3, #4]
 8003ba2:	687a      	ldr	r2, [r7, #4]
 8003ba4:	6892      	ldr	r2, [r2, #8]
 8003ba6:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	689b      	ldr	r3, [r3, #8]
 8003bac:	687a      	ldr	r2, [r7, #4]
 8003bae:	6852      	ldr	r2, [r2, #4]
 8003bb0:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	685b      	ldr	r3, [r3, #4]
 8003bb6:	687a      	ldr	r2, [r7, #4]
 8003bb8:	429a      	cmp	r2, r3
 8003bba:	d103      	bne.n	8003bc4 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	689a      	ldr	r2, [r3, #8]
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	2200      	movs	r2, #0
 8003bc8:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	1e5a      	subs	r2, r3, #1
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	681b      	ldr	r3, [r3, #0]
}
 8003bd8:	4618      	mov	r0, r3
 8003bda:	3714      	adds	r7, #20
 8003bdc:	46bd      	mov	sp, r7
 8003bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be2:	4770      	bx	lr

08003be4 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8003be4:	b580      	push	{r7, lr}
 8003be6:	b08c      	sub	sp, #48	; 0x30
 8003be8:	af04      	add	r7, sp, #16
 8003bea:	60f8      	str	r0, [r7, #12]
 8003bec:	60b9      	str	r1, [r7, #8]
 8003bee:	603b      	str	r3, [r7, #0]
 8003bf0:	4613      	mov	r3, r2
 8003bf2:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8003bf4:	88fb      	ldrh	r3, [r7, #6]
 8003bf6:	009b      	lsls	r3, r3, #2
 8003bf8:	4618      	mov	r0, r3
 8003bfa:	f000 fc61 	bl	80044c0 <pvPortMalloc>
 8003bfe:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 8003c00:	697b      	ldr	r3, [r7, #20]
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d00e      	beq.n	8003c24 <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8003c06:	2058      	movs	r0, #88	; 0x58
 8003c08:	f000 fc5a 	bl	80044c0 <pvPortMalloc>
 8003c0c:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 8003c0e:	69fb      	ldr	r3, [r7, #28]
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d003      	beq.n	8003c1c <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 8003c14:	69fb      	ldr	r3, [r7, #28]
 8003c16:	697a      	ldr	r2, [r7, #20]
 8003c18:	631a      	str	r2, [r3, #48]	; 0x30
 8003c1a:	e005      	b.n	8003c28 <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFree( pxStack );
 8003c1c:	6978      	ldr	r0, [r7, #20]
 8003c1e:	f000 fd1d 	bl	800465c <vPortFree>
 8003c22:	e001      	b.n	8003c28 <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 8003c24:	2300      	movs	r3, #0
 8003c26:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8003c28:	69fb      	ldr	r3, [r7, #28]
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d013      	beq.n	8003c56 <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003c2e:	88fa      	ldrh	r2, [r7, #6]
 8003c30:	2300      	movs	r3, #0
 8003c32:	9303      	str	r3, [sp, #12]
 8003c34:	69fb      	ldr	r3, [r7, #28]
 8003c36:	9302      	str	r3, [sp, #8]
 8003c38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c3a:	9301      	str	r3, [sp, #4]
 8003c3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c3e:	9300      	str	r3, [sp, #0]
 8003c40:	683b      	ldr	r3, [r7, #0]
 8003c42:	68b9      	ldr	r1, [r7, #8]
 8003c44:	68f8      	ldr	r0, [r7, #12]
 8003c46:	f000 f80f 	bl	8003c68 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8003c4a:	69f8      	ldr	r0, [r7, #28]
 8003c4c:	f000 f89e 	bl	8003d8c <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8003c50:	2301      	movs	r3, #1
 8003c52:	61bb      	str	r3, [r7, #24]
 8003c54:	e002      	b.n	8003c5c <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003c56:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003c5a:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8003c5c:	69bb      	ldr	r3, [r7, #24]
    }
 8003c5e:	4618      	mov	r0, r3
 8003c60:	3720      	adds	r7, #32
 8003c62:	46bd      	mov	sp, r7
 8003c64:	bd80      	pop	{r7, pc}
	...

08003c68 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8003c68:	b580      	push	{r7, lr}
 8003c6a:	b086      	sub	sp, #24
 8003c6c:	af00      	add	r7, sp, #0
 8003c6e:	60f8      	str	r0, [r7, #12]
 8003c70:	60b9      	str	r1, [r7, #8]
 8003c72:	607a      	str	r2, [r7, #4]
 8003c74:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8003c76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c78:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	009b      	lsls	r3, r3, #2
 8003c7e:	461a      	mov	r2, r3
 8003c80:	21a5      	movs	r1, #165	; 0xa5
 8003c82:	f000 fe23 	bl	80048cc <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003c86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c88:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003c8a:	6879      	ldr	r1, [r7, #4]
 8003c8c:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8003c90:	440b      	add	r3, r1
 8003c92:	009b      	lsls	r3, r3, #2
 8003c94:	4413      	add	r3, r2
 8003c96:	613b      	str	r3, [r7, #16]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003c98:	693b      	ldr	r3, [r7, #16]
 8003c9a:	f023 0307 	bic.w	r3, r3, #7
 8003c9e:	613b      	str	r3, [r7, #16]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003ca0:	693b      	ldr	r3, [r7, #16]
 8003ca2:	f003 0307 	and.w	r3, r3, #7
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d004      	beq.n	8003cb4 <prvInitialiseNewTask+0x4c>
 8003caa:	4937      	ldr	r1, [pc, #220]	; (8003d88 <prvInitialiseNewTask+0x120>)
 8003cac:	f240 305e 	movw	r0, #862	; 0x35e
 8003cb0:	f7fc fcc0 	bl	8000634 <vAssertCalled>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8003cb4:	68bb      	ldr	r3, [r7, #8]
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d01f      	beq.n	8003cfa <prvInitialiseNewTask+0x92>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003cba:	2300      	movs	r3, #0
 8003cbc:	617b      	str	r3, [r7, #20]
 8003cbe:	e012      	b.n	8003ce6 <prvInitialiseNewTask+0x7e>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003cc0:	68ba      	ldr	r2, [r7, #8]
 8003cc2:	697b      	ldr	r3, [r7, #20]
 8003cc4:	4413      	add	r3, r2
 8003cc6:	7819      	ldrb	r1, [r3, #0]
 8003cc8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003cca:	697b      	ldr	r3, [r7, #20]
 8003ccc:	4413      	add	r3, r2
 8003cce:	3334      	adds	r3, #52	; 0x34
 8003cd0:	460a      	mov	r2, r1
 8003cd2:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8003cd4:	68ba      	ldr	r2, [r7, #8]
 8003cd6:	697b      	ldr	r3, [r7, #20]
 8003cd8:	4413      	add	r3, r2
 8003cda:	781b      	ldrb	r3, [r3, #0]
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d006      	beq.n	8003cee <prvInitialiseNewTask+0x86>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003ce0:	697b      	ldr	r3, [r7, #20]
 8003ce2:	3301      	adds	r3, #1
 8003ce4:	617b      	str	r3, [r7, #20]
 8003ce6:	697b      	ldr	r3, [r7, #20]
 8003ce8:	2b09      	cmp	r3, #9
 8003cea:	d9e9      	bls.n	8003cc0 <prvInitialiseNewTask+0x58>
 8003cec:	e000      	b.n	8003cf0 <prvInitialiseNewTask+0x88>
            {
                break;
 8003cee:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003cf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cf2:	2200      	movs	r2, #0
 8003cf4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8003cf8:	e003      	b.n	8003d02 <prvInitialiseNewTask+0x9a>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8003cfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cfc:	2200      	movs	r2, #0
 8003cfe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large.  First
     * remove the privilege bit if one is present. */
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003d02:	6a3b      	ldr	r3, [r7, #32]
 8003d04:	2b04      	cmp	r3, #4
 8003d06:	d901      	bls.n	8003d0c <prvInitialiseNewTask+0xa4>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003d08:	2304      	movs	r3, #4
 8003d0a:	623b      	str	r3, [r7, #32]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8003d0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d0e:	6a3a      	ldr	r2, [r7, #32]
 8003d10:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 8003d12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d14:	6a3a      	ldr	r2, [r7, #32]
 8003d16:	649a      	str	r2, [r3, #72]	; 0x48
            pxNewTCB->uxMutexesHeld = 0;
 8003d18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d1a:	2200      	movs	r2, #0
 8003d1c:	64da      	str	r2, [r3, #76]	; 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003d1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d20:	3304      	adds	r3, #4
 8003d22:	4618      	mov	r0, r3
 8003d24:	f7ff ff03 	bl	8003b2e <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003d28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d2a:	3318      	adds	r3, #24
 8003d2c:	4618      	mov	r0, r3
 8003d2e:	f7ff fefe 	bl	8003b2e <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003d32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d34:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003d36:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003d38:	6a3b      	ldr	r3, [r7, #32]
 8003d3a:	f1c3 0205 	rsb	r2, r3, #5
 8003d3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d40:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003d42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d44:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003d46:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 8003d48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d4a:	3350      	adds	r3, #80	; 0x50
 8003d4c:	2204      	movs	r2, #4
 8003d4e:	2100      	movs	r1, #0
 8003d50:	4618      	mov	r0, r3
 8003d52:	f000 fdbb 	bl	80048cc <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 8003d56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d58:	3354      	adds	r3, #84	; 0x54
 8003d5a:	2201      	movs	r2, #1
 8003d5c:	2100      	movs	r1, #0
 8003d5e:	4618      	mov	r0, r3
 8003d60:	f000 fdb4 	bl	80048cc <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003d64:	683a      	ldr	r2, [r7, #0]
 8003d66:	68f9      	ldr	r1, [r7, #12]
 8003d68:	6938      	ldr	r0, [r7, #16]
 8003d6a:	f000 fa89 	bl	8004280 <pxPortInitialiseStack>
 8003d6e:	4602      	mov	r2, r0
 8003d70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d72:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8003d74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d002      	beq.n	8003d80 <prvInitialiseNewTask+0x118>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003d7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d7c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003d7e:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8003d80:	bf00      	nop
 8003d82:	3718      	adds	r7, #24
 8003d84:	46bd      	mov	sp, r7
 8003d86:	bd80      	pop	{r7, pc}
 8003d88:	0800599c 	.word	0x0800599c

08003d8c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8003d8c:	b580      	push	{r7, lr}
 8003d8e:	b082      	sub	sp, #8
 8003d90:	af00      	add	r7, sp, #0
 8003d92:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8003d94:	f000 fae8 	bl	8004368 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8003d98:	4b2c      	ldr	r3, [pc, #176]	; (8003e4c <prvAddNewTaskToReadyList+0xc0>)
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	3301      	adds	r3, #1
 8003d9e:	4a2b      	ldr	r2, [pc, #172]	; (8003e4c <prvAddNewTaskToReadyList+0xc0>)
 8003da0:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8003da2:	4b2b      	ldr	r3, [pc, #172]	; (8003e50 <prvAddNewTaskToReadyList+0xc4>)
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d109      	bne.n	8003dbe <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8003daa:	4a29      	ldr	r2, [pc, #164]	; (8003e50 <prvAddNewTaskToReadyList+0xc4>)
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003db0:	4b26      	ldr	r3, [pc, #152]	; (8003e4c <prvAddNewTaskToReadyList+0xc0>)
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	2b01      	cmp	r3, #1
 8003db6:	d110      	bne.n	8003dda <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8003db8:	f000 fa06 	bl	80041c8 <prvInitialiseTaskLists>
 8003dbc:	e00d      	b.n	8003dda <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8003dbe:	4b25      	ldr	r3, [pc, #148]	; (8003e54 <prvAddNewTaskToReadyList+0xc8>)
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d109      	bne.n	8003dda <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003dc6:	4b22      	ldr	r3, [pc, #136]	; (8003e50 <prvAddNewTaskToReadyList+0xc4>)
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dd0:	429a      	cmp	r2, r3
 8003dd2:	d802      	bhi.n	8003dda <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8003dd4:	4a1e      	ldr	r2, [pc, #120]	; (8003e50 <prvAddNewTaskToReadyList+0xc4>)
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8003dda:	4b1f      	ldr	r3, [pc, #124]	; (8003e58 <prvAddNewTaskToReadyList+0xcc>)
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	3301      	adds	r3, #1
 8003de0:	4a1d      	ldr	r2, [pc, #116]	; (8003e58 <prvAddNewTaskToReadyList+0xcc>)
 8003de2:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 8003de4:	4b1c      	ldr	r3, [pc, #112]	; (8003e58 <prvAddNewTaskToReadyList+0xcc>)
 8003de6:	681a      	ldr	r2, [r3, #0]
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	641a      	str	r2, [r3, #64]	; 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003df0:	2201      	movs	r2, #1
 8003df2:	409a      	lsls	r2, r3
 8003df4:	4b19      	ldr	r3, [pc, #100]	; (8003e5c <prvAddNewTaskToReadyList+0xd0>)
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	4313      	orrs	r3, r2
 8003dfa:	4a18      	ldr	r2, [pc, #96]	; (8003e5c <prvAddNewTaskToReadyList+0xd0>)
 8003dfc:	6013      	str	r3, [r2, #0]
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e02:	4613      	mov	r3, r2
 8003e04:	009b      	lsls	r3, r3, #2
 8003e06:	4413      	add	r3, r2
 8003e08:	009b      	lsls	r3, r3, #2
 8003e0a:	4a15      	ldr	r2, [pc, #84]	; (8003e60 <prvAddNewTaskToReadyList+0xd4>)
 8003e0c:	441a      	add	r2, r3
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	3304      	adds	r3, #4
 8003e12:	4619      	mov	r1, r3
 8003e14:	4610      	mov	r0, r2
 8003e16:	f7ff fe97 	bl	8003b48 <vListInsertEnd>

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8003e1a:	f000 fad1 	bl	80043c0 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8003e1e:	4b0d      	ldr	r3, [pc, #52]	; (8003e54 <prvAddNewTaskToReadyList+0xc8>)
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d00e      	beq.n	8003e44 <prvAddNewTaskToReadyList+0xb8>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003e26:	4b0a      	ldr	r3, [pc, #40]	; (8003e50 <prvAddNewTaskToReadyList+0xc4>)
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e30:	429a      	cmp	r2, r3
 8003e32:	d207      	bcs.n	8003e44 <prvAddNewTaskToReadyList+0xb8>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8003e34:	4b0b      	ldr	r3, [pc, #44]	; (8003e64 <prvAddNewTaskToReadyList+0xd8>)
 8003e36:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003e3a:	601a      	str	r2, [r3, #0]
 8003e3c:	f3bf 8f4f 	dsb	sy
 8003e40:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8003e44:	bf00      	nop
 8003e46:	3708      	adds	r7, #8
 8003e48:	46bd      	mov	sp, r7
 8003e4a:	bd80      	pop	{r7, pc}
 8003e4c:	2000023c 	.word	0x2000023c
 8003e50:	20000168 	.word	0x20000168
 8003e54:	20000248 	.word	0x20000248
 8003e58:	20000258 	.word	0x20000258
 8003e5c:	20000244 	.word	0x20000244
 8003e60:	2000016c 	.word	0x2000016c
 8003e64:	e000ed04 	.word	0xe000ed04

08003e68 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003e68:	b480      	push	{r7}
 8003e6a:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8003e6c:	4b04      	ldr	r3, [pc, #16]	; (8003e80 <vTaskSuspendAll+0x18>)
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	3301      	adds	r3, #1
 8003e72:	4a03      	ldr	r2, [pc, #12]	; (8003e80 <vTaskSuspendAll+0x18>)
 8003e74:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8003e76:	bf00      	nop
 8003e78:	46bd      	mov	sp, r7
 8003e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e7e:	4770      	bx	lr
 8003e80:	20000260 	.word	0x20000260

08003e84 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003e84:	b580      	push	{r7, lr}
 8003e86:	b084      	sub	sp, #16
 8003e88:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8003e8a:	2300      	movs	r3, #0
 8003e8c:	60fb      	str	r3, [r7, #12]
    BaseType_t xAlreadyYielded = pdFALSE;
 8003e8e:	2300      	movs	r3, #0
 8003e90:	60bb      	str	r3, [r7, #8]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8003e92:	4b3e      	ldr	r3, [pc, #248]	; (8003f8c <xTaskResumeAll+0x108>)
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d104      	bne.n	8003ea4 <xTaskResumeAll+0x20>
 8003e9a:	493d      	ldr	r1, [pc, #244]	; (8003f90 <xTaskResumeAll+0x10c>)
 8003e9c:	f640 00a9 	movw	r0, #2217	; 0x8a9
 8003ea0:	f7fc fbc8 	bl	8000634 <vAssertCalled>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8003ea4:	f000 fa60 	bl	8004368 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8003ea8:	4b38      	ldr	r3, [pc, #224]	; (8003f8c <xTaskResumeAll+0x108>)
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	3b01      	subs	r3, #1
 8003eae:	4a37      	ldr	r2, [pc, #220]	; (8003f8c <xTaskResumeAll+0x108>)
 8003eb0:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003eb2:	4b36      	ldr	r3, [pc, #216]	; (8003f8c <xTaskResumeAll+0x108>)
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d161      	bne.n	8003f7e <xTaskResumeAll+0xfa>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003eba:	4b36      	ldr	r3, [pc, #216]	; (8003f94 <xTaskResumeAll+0x110>)
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d05d      	beq.n	8003f7e <xTaskResumeAll+0xfa>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003ec2:	e02e      	b.n	8003f22 <xTaskResumeAll+0x9e>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003ec4:	4b34      	ldr	r3, [pc, #208]	; (8003f98 <xTaskResumeAll+0x114>)
 8003ec6:	68db      	ldr	r3, [r3, #12]
 8003ec8:	68db      	ldr	r3, [r3, #12]
 8003eca:	60fb      	str	r3, [r7, #12]
                    ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	3318      	adds	r3, #24
 8003ed0:	4618      	mov	r0, r3
 8003ed2:	f7ff fe5d 	bl	8003b90 <uxListRemove>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	3304      	adds	r3, #4
 8003eda:	4618      	mov	r0, r3
 8003edc:	f7ff fe58 	bl	8003b90 <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ee4:	2201      	movs	r2, #1
 8003ee6:	409a      	lsls	r2, r3
 8003ee8:	4b2c      	ldr	r3, [pc, #176]	; (8003f9c <xTaskResumeAll+0x118>)
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	4313      	orrs	r3, r2
 8003eee:	4a2b      	ldr	r2, [pc, #172]	; (8003f9c <xTaskResumeAll+0x118>)
 8003ef0:	6013      	str	r3, [r2, #0]
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ef6:	4613      	mov	r3, r2
 8003ef8:	009b      	lsls	r3, r3, #2
 8003efa:	4413      	add	r3, r2
 8003efc:	009b      	lsls	r3, r3, #2
 8003efe:	4a28      	ldr	r2, [pc, #160]	; (8003fa0 <xTaskResumeAll+0x11c>)
 8003f00:	441a      	add	r2, r3
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	3304      	adds	r3, #4
 8003f06:	4619      	mov	r1, r3
 8003f08:	4610      	mov	r0, r2
 8003f0a:	f7ff fe1d 	bl	8003b48 <vListInsertEnd>

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f12:	4b24      	ldr	r3, [pc, #144]	; (8003fa4 <xTaskResumeAll+0x120>)
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f18:	429a      	cmp	r2, r3
 8003f1a:	d302      	bcc.n	8003f22 <xTaskResumeAll+0x9e>
                    {
                        xYieldPending = pdTRUE;
 8003f1c:	4b22      	ldr	r3, [pc, #136]	; (8003fa8 <xTaskResumeAll+0x124>)
 8003f1e:	2201      	movs	r2, #1
 8003f20:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003f22:	4b1d      	ldr	r3, [pc, #116]	; (8003f98 <xTaskResumeAll+0x114>)
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d1cc      	bne.n	8003ec4 <xTaskResumeAll+0x40>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d001      	beq.n	8003f34 <xTaskResumeAll+0xb0>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8003f30:	f000 f98a 	bl	8004248 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8003f34:	4b1d      	ldr	r3, [pc, #116]	; (8003fac <xTaskResumeAll+0x128>)
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	607b      	str	r3, [r7, #4]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d010      	beq.n	8003f62 <xTaskResumeAll+0xde>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8003f40:	f000 f838 	bl	8003fb4 <xTaskIncrementTick>
 8003f44:	4603      	mov	r3, r0
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d002      	beq.n	8003f50 <xTaskResumeAll+0xcc>
                            {
                                xYieldPending = pdTRUE;
 8003f4a:	4b17      	ldr	r3, [pc, #92]	; (8003fa8 <xTaskResumeAll+0x124>)
 8003f4c:	2201      	movs	r2, #1
 8003f4e:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	3b01      	subs	r3, #1
 8003f54:	607b      	str	r3, [r7, #4]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d1f1      	bne.n	8003f40 <xTaskResumeAll+0xbc>

                        xPendedTicks = 0;
 8003f5c:	4b13      	ldr	r3, [pc, #76]	; (8003fac <xTaskResumeAll+0x128>)
 8003f5e:	2200      	movs	r2, #0
 8003f60:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8003f62:	4b11      	ldr	r3, [pc, #68]	; (8003fa8 <xTaskResumeAll+0x124>)
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d009      	beq.n	8003f7e <xTaskResumeAll+0xfa>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 8003f6a:	2301      	movs	r3, #1
 8003f6c:	60bb      	str	r3, [r7, #8]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8003f6e:	4b10      	ldr	r3, [pc, #64]	; (8003fb0 <xTaskResumeAll+0x12c>)
 8003f70:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003f74:	601a      	str	r2, [r3, #0]
 8003f76:	f3bf 8f4f 	dsb	sy
 8003f7a:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8003f7e:	f000 fa1f 	bl	80043c0 <vPortExitCritical>

    return xAlreadyYielded;
 8003f82:	68bb      	ldr	r3, [r7, #8]
}
 8003f84:	4618      	mov	r0, r3
 8003f86:	3710      	adds	r7, #16
 8003f88:	46bd      	mov	sp, r7
 8003f8a:	bd80      	pop	{r7, pc}
 8003f8c:	20000260 	.word	0x20000260
 8003f90:	0800599c 	.word	0x0800599c
 8003f94:	2000023c 	.word	0x2000023c
 8003f98:	20000200 	.word	0x20000200
 8003f9c:	20000244 	.word	0x20000244
 8003fa0:	2000016c 	.word	0x2000016c
 8003fa4:	20000168 	.word	0x20000168
 8003fa8:	20000250 	.word	0x20000250
 8003fac:	2000024c 	.word	0x2000024c
 8003fb0:	e000ed04 	.word	0xe000ed04

08003fb4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003fb4:	b580      	push	{r7, lr}
 8003fb6:	b086      	sub	sp, #24
 8003fb8:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8003fba:	2300      	movs	r3, #0
 8003fbc:	617b      	str	r3, [r7, #20]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003fbe:	4b4b      	ldr	r3, [pc, #300]	; (80040ec <xTaskIncrementTick+0x138>)
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	f040 8088 	bne.w	80040d8 <xTaskIncrementTick+0x124>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003fc8:	4b49      	ldr	r3, [pc, #292]	; (80040f0 <xTaskIncrementTick+0x13c>)
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	3301      	adds	r3, #1
 8003fce:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8003fd0:	4a47      	ldr	r2, [pc, #284]	; (80040f0 <xTaskIncrementTick+0x13c>)
 8003fd2:	693b      	ldr	r3, [r7, #16]
 8003fd4:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003fd6:	693b      	ldr	r3, [r7, #16]
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d11a      	bne.n	8004012 <xTaskIncrementTick+0x5e>
        {
            taskSWITCH_DELAYED_LISTS();
 8003fdc:	4b45      	ldr	r3, [pc, #276]	; (80040f4 <xTaskIncrementTick+0x140>)
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d004      	beq.n	8003ff0 <xTaskIncrementTick+0x3c>
 8003fe6:	4944      	ldr	r1, [pc, #272]	; (80040f8 <xTaskIncrementTick+0x144>)
 8003fe8:	f640 20bc 	movw	r0, #2748	; 0xabc
 8003fec:	f7fc fb22 	bl	8000634 <vAssertCalled>
 8003ff0:	4b40      	ldr	r3, [pc, #256]	; (80040f4 <xTaskIncrementTick+0x140>)
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	60fb      	str	r3, [r7, #12]
 8003ff6:	4b41      	ldr	r3, [pc, #260]	; (80040fc <xTaskIncrementTick+0x148>)
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	4a3e      	ldr	r2, [pc, #248]	; (80040f4 <xTaskIncrementTick+0x140>)
 8003ffc:	6013      	str	r3, [r2, #0]
 8003ffe:	4a3f      	ldr	r2, [pc, #252]	; (80040fc <xTaskIncrementTick+0x148>)
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	6013      	str	r3, [r2, #0]
 8004004:	4b3e      	ldr	r3, [pc, #248]	; (8004100 <xTaskIncrementTick+0x14c>)
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	3301      	adds	r3, #1
 800400a:	4a3d      	ldr	r2, [pc, #244]	; (8004100 <xTaskIncrementTick+0x14c>)
 800400c:	6013      	str	r3, [r2, #0]
 800400e:	f000 f91b 	bl	8004248 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8004012:	4b3c      	ldr	r3, [pc, #240]	; (8004104 <xTaskIncrementTick+0x150>)
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	693a      	ldr	r2, [r7, #16]
 8004018:	429a      	cmp	r2, r3
 800401a:	d348      	bcc.n	80040ae <xTaskIncrementTick+0xfa>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800401c:	4b35      	ldr	r3, [pc, #212]	; (80040f4 <xTaskIncrementTick+0x140>)
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	2b00      	cmp	r3, #0
 8004024:	d104      	bne.n	8004030 <xTaskIncrementTick+0x7c>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004026:	4b37      	ldr	r3, [pc, #220]	; (8004104 <xTaskIncrementTick+0x150>)
 8004028:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800402c:	601a      	str	r2, [r3, #0]
                    break;
 800402e:	e03e      	b.n	80040ae <xTaskIncrementTick+0xfa>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004030:	4b30      	ldr	r3, [pc, #192]	; (80040f4 <xTaskIncrementTick+0x140>)
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	68db      	ldr	r3, [r3, #12]
 8004036:	68db      	ldr	r3, [r3, #12]
 8004038:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800403a:	68bb      	ldr	r3, [r7, #8]
 800403c:	685b      	ldr	r3, [r3, #4]
 800403e:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 8004040:	693a      	ldr	r2, [r7, #16]
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	429a      	cmp	r2, r3
 8004046:	d203      	bcs.n	8004050 <xTaskIncrementTick+0x9c>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8004048:	4a2e      	ldr	r2, [pc, #184]	; (8004104 <xTaskIncrementTick+0x150>)
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800404e:	e02e      	b.n	80040ae <xTaskIncrementTick+0xfa>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004050:	68bb      	ldr	r3, [r7, #8]
 8004052:	3304      	adds	r3, #4
 8004054:	4618      	mov	r0, r3
 8004056:	f7ff fd9b 	bl	8003b90 <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800405a:	68bb      	ldr	r3, [r7, #8]
 800405c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800405e:	2b00      	cmp	r3, #0
 8004060:	d004      	beq.n	800406c <xTaskIncrementTick+0xb8>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004062:	68bb      	ldr	r3, [r7, #8]
 8004064:	3318      	adds	r3, #24
 8004066:	4618      	mov	r0, r3
 8004068:	f7ff fd92 	bl	8003b90 <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 800406c:	68bb      	ldr	r3, [r7, #8]
 800406e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004070:	2201      	movs	r2, #1
 8004072:	409a      	lsls	r2, r3
 8004074:	4b24      	ldr	r3, [pc, #144]	; (8004108 <xTaskIncrementTick+0x154>)
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	4313      	orrs	r3, r2
 800407a:	4a23      	ldr	r2, [pc, #140]	; (8004108 <xTaskIncrementTick+0x154>)
 800407c:	6013      	str	r3, [r2, #0]
 800407e:	68bb      	ldr	r3, [r7, #8]
 8004080:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004082:	4613      	mov	r3, r2
 8004084:	009b      	lsls	r3, r3, #2
 8004086:	4413      	add	r3, r2
 8004088:	009b      	lsls	r3, r3, #2
 800408a:	4a20      	ldr	r2, [pc, #128]	; (800410c <xTaskIncrementTick+0x158>)
 800408c:	441a      	add	r2, r3
 800408e:	68bb      	ldr	r3, [r7, #8]
 8004090:	3304      	adds	r3, #4
 8004092:	4619      	mov	r1, r3
 8004094:	4610      	mov	r0, r2
 8004096:	f7ff fd57 	bl	8003b48 <vListInsertEnd>
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800409a:	68bb      	ldr	r3, [r7, #8]
 800409c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800409e:	4b1c      	ldr	r3, [pc, #112]	; (8004110 <xTaskIncrementTick+0x15c>)
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040a4:	429a      	cmp	r2, r3
 80040a6:	d3b9      	bcc.n	800401c <xTaskIncrementTick+0x68>
                            {
                                xSwitchRequired = pdTRUE;
 80040a8:	2301      	movs	r3, #1
 80040aa:	617b      	str	r3, [r7, #20]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80040ac:	e7b6      	b.n	800401c <xTaskIncrementTick+0x68>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80040ae:	4b18      	ldr	r3, [pc, #96]	; (8004110 <xTaskIncrementTick+0x15c>)
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80040b4:	4915      	ldr	r1, [pc, #84]	; (800410c <xTaskIncrementTick+0x158>)
 80040b6:	4613      	mov	r3, r2
 80040b8:	009b      	lsls	r3, r3, #2
 80040ba:	4413      	add	r3, r2
 80040bc:	009b      	lsls	r3, r3, #2
 80040be:	440b      	add	r3, r1
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	2b01      	cmp	r3, #1
 80040c4:	d901      	bls.n	80040ca <xTaskIncrementTick+0x116>
                {
                    xSwitchRequired = pdTRUE;
 80040c6:	2301      	movs	r3, #1
 80040c8:	617b      	str	r3, [r7, #20]
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 80040ca:	4b12      	ldr	r3, [pc, #72]	; (8004114 <xTaskIncrementTick+0x160>)
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d007      	beq.n	80040e2 <xTaskIncrementTick+0x12e>
                {
                    xSwitchRequired = pdTRUE;
 80040d2:	2301      	movs	r3, #1
 80040d4:	617b      	str	r3, [r7, #20]
 80040d6:	e004      	b.n	80040e2 <xTaskIncrementTick+0x12e>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 80040d8:	4b0f      	ldr	r3, [pc, #60]	; (8004118 <xTaskIncrementTick+0x164>)
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	3301      	adds	r3, #1
 80040de:	4a0e      	ldr	r2, [pc, #56]	; (8004118 <xTaskIncrementTick+0x164>)
 80040e0:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 80040e2:	697b      	ldr	r3, [r7, #20]
}
 80040e4:	4618      	mov	r0, r3
 80040e6:	3718      	adds	r7, #24
 80040e8:	46bd      	mov	sp, r7
 80040ea:	bd80      	pop	{r7, pc}
 80040ec:	20000260 	.word	0x20000260
 80040f0:	20000240 	.word	0x20000240
 80040f4:	200001f8 	.word	0x200001f8
 80040f8:	0800599c 	.word	0x0800599c
 80040fc:	200001fc 	.word	0x200001fc
 8004100:	20000254 	.word	0x20000254
 8004104:	2000025c 	.word	0x2000025c
 8004108:	20000244 	.word	0x20000244
 800410c:	2000016c 	.word	0x2000016c
 8004110:	20000168 	.word	0x20000168
 8004114:	20000250 	.word	0x20000250
 8004118:	2000024c 	.word	0x2000024c

0800411c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800411c:	b580      	push	{r7, lr}
 800411e:	b084      	sub	sp, #16
 8004120:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004122:	4b23      	ldr	r3, [pc, #140]	; (80041b0 <vTaskSwitchContext+0x94>)
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	2b00      	cmp	r3, #0
 8004128:	d003      	beq.n	8004132 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 800412a:	4b22      	ldr	r3, [pc, #136]	; (80041b4 <vTaskSwitchContext+0x98>)
 800412c:	2201      	movs	r2, #1
 800412e:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 8004130:	e039      	b.n	80041a6 <vTaskSwitchContext+0x8a>
        xYieldPending = pdFALSE;
 8004132:	4b20      	ldr	r3, [pc, #128]	; (80041b4 <vTaskSwitchContext+0x98>)
 8004134:	2200      	movs	r2, #0
 8004136:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004138:	4b1f      	ldr	r3, [pc, #124]	; (80041b8 <vTaskSwitchContext+0x9c>)
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	607b      	str	r3, [r7, #4]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	fab3 f383 	clz	r3, r3
 8004144:	70fb      	strb	r3, [r7, #3]
            return ucReturn;
 8004146:	78fb      	ldrb	r3, [r7, #3]
 8004148:	f1c3 031f 	rsb	r3, r3, #31
 800414c:	60fb      	str	r3, [r7, #12]
 800414e:	491b      	ldr	r1, [pc, #108]	; (80041bc <vTaskSwitchContext+0xa0>)
 8004150:	68fa      	ldr	r2, [r7, #12]
 8004152:	4613      	mov	r3, r2
 8004154:	009b      	lsls	r3, r3, #2
 8004156:	4413      	add	r3, r2
 8004158:	009b      	lsls	r3, r3, #2
 800415a:	440b      	add	r3, r1
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	2b00      	cmp	r3, #0
 8004160:	d104      	bne.n	800416c <vTaskSwitchContext+0x50>
 8004162:	4917      	ldr	r1, [pc, #92]	; (80041c0 <vTaskSwitchContext+0xa4>)
 8004164:	f640 30f7 	movw	r0, #3063	; 0xbf7
 8004168:	f7fc fa64 	bl	8000634 <vAssertCalled>
 800416c:	68fa      	ldr	r2, [r7, #12]
 800416e:	4613      	mov	r3, r2
 8004170:	009b      	lsls	r3, r3, #2
 8004172:	4413      	add	r3, r2
 8004174:	009b      	lsls	r3, r3, #2
 8004176:	4a11      	ldr	r2, [pc, #68]	; (80041bc <vTaskSwitchContext+0xa0>)
 8004178:	4413      	add	r3, r2
 800417a:	60bb      	str	r3, [r7, #8]
 800417c:	68bb      	ldr	r3, [r7, #8]
 800417e:	685b      	ldr	r3, [r3, #4]
 8004180:	685a      	ldr	r2, [r3, #4]
 8004182:	68bb      	ldr	r3, [r7, #8]
 8004184:	605a      	str	r2, [r3, #4]
 8004186:	68bb      	ldr	r3, [r7, #8]
 8004188:	685a      	ldr	r2, [r3, #4]
 800418a:	68bb      	ldr	r3, [r7, #8]
 800418c:	3308      	adds	r3, #8
 800418e:	429a      	cmp	r2, r3
 8004190:	d104      	bne.n	800419c <vTaskSwitchContext+0x80>
 8004192:	68bb      	ldr	r3, [r7, #8]
 8004194:	685b      	ldr	r3, [r3, #4]
 8004196:	685a      	ldr	r2, [r3, #4]
 8004198:	68bb      	ldr	r3, [r7, #8]
 800419a:	605a      	str	r2, [r3, #4]
 800419c:	68bb      	ldr	r3, [r7, #8]
 800419e:	685b      	ldr	r3, [r3, #4]
 80041a0:	68db      	ldr	r3, [r3, #12]
 80041a2:	4a08      	ldr	r2, [pc, #32]	; (80041c4 <vTaskSwitchContext+0xa8>)
 80041a4:	6013      	str	r3, [r2, #0]
}
 80041a6:	bf00      	nop
 80041a8:	3710      	adds	r7, #16
 80041aa:	46bd      	mov	sp, r7
 80041ac:	bd80      	pop	{r7, pc}
 80041ae:	bf00      	nop
 80041b0:	20000260 	.word	0x20000260
 80041b4:	20000250 	.word	0x20000250
 80041b8:	20000244 	.word	0x20000244
 80041bc:	2000016c 	.word	0x2000016c
 80041c0:	0800599c 	.word	0x0800599c
 80041c4:	20000168 	.word	0x20000168

080041c8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80041c8:	b580      	push	{r7, lr}
 80041ca:	b082      	sub	sp, #8
 80041cc:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80041ce:	2300      	movs	r3, #0
 80041d0:	607b      	str	r3, [r7, #4]
 80041d2:	e00c      	b.n	80041ee <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80041d4:	687a      	ldr	r2, [r7, #4]
 80041d6:	4613      	mov	r3, r2
 80041d8:	009b      	lsls	r3, r3, #2
 80041da:	4413      	add	r3, r2
 80041dc:	009b      	lsls	r3, r3, #2
 80041de:	4a12      	ldr	r2, [pc, #72]	; (8004228 <prvInitialiseTaskLists+0x60>)
 80041e0:	4413      	add	r3, r2
 80041e2:	4618      	mov	r0, r3
 80041e4:	f7ff fc83 	bl	8003aee <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	3301      	adds	r3, #1
 80041ec:	607b      	str	r3, [r7, #4]
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	2b04      	cmp	r3, #4
 80041f2:	d9ef      	bls.n	80041d4 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 80041f4:	480d      	ldr	r0, [pc, #52]	; (800422c <prvInitialiseTaskLists+0x64>)
 80041f6:	f7ff fc7a 	bl	8003aee <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 80041fa:	480d      	ldr	r0, [pc, #52]	; (8004230 <prvInitialiseTaskLists+0x68>)
 80041fc:	f7ff fc77 	bl	8003aee <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8004200:	480c      	ldr	r0, [pc, #48]	; (8004234 <prvInitialiseTaskLists+0x6c>)
 8004202:	f7ff fc74 	bl	8003aee <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 8004206:	480c      	ldr	r0, [pc, #48]	; (8004238 <prvInitialiseTaskLists+0x70>)
 8004208:	f7ff fc71 	bl	8003aee <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 800420c:	480b      	ldr	r0, [pc, #44]	; (800423c <prvInitialiseTaskLists+0x74>)
 800420e:	f7ff fc6e 	bl	8003aee <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8004212:	4b0b      	ldr	r3, [pc, #44]	; (8004240 <prvInitialiseTaskLists+0x78>)
 8004214:	4a05      	ldr	r2, [pc, #20]	; (800422c <prvInitialiseTaskLists+0x64>)
 8004216:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004218:	4b0a      	ldr	r3, [pc, #40]	; (8004244 <prvInitialiseTaskLists+0x7c>)
 800421a:	4a05      	ldr	r2, [pc, #20]	; (8004230 <prvInitialiseTaskLists+0x68>)
 800421c:	601a      	str	r2, [r3, #0]
}
 800421e:	bf00      	nop
 8004220:	3708      	adds	r7, #8
 8004222:	46bd      	mov	sp, r7
 8004224:	bd80      	pop	{r7, pc}
 8004226:	bf00      	nop
 8004228:	2000016c 	.word	0x2000016c
 800422c:	200001d0 	.word	0x200001d0
 8004230:	200001e4 	.word	0x200001e4
 8004234:	20000200 	.word	0x20000200
 8004238:	20000214 	.word	0x20000214
 800423c:	20000228 	.word	0x20000228
 8004240:	200001f8 	.word	0x200001f8
 8004244:	200001fc 	.word	0x200001fc

08004248 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004248:	b480      	push	{r7}
 800424a:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800424c:	4b0a      	ldr	r3, [pc, #40]	; (8004278 <prvResetNextTaskUnblockTime+0x30>)
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	2b00      	cmp	r3, #0
 8004254:	d104      	bne.n	8004260 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8004256:	4b09      	ldr	r3, [pc, #36]	; (800427c <prvResetNextTaskUnblockTime+0x34>)
 8004258:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800425c:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 800425e:	e005      	b.n	800426c <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8004260:	4b05      	ldr	r3, [pc, #20]	; (8004278 <prvResetNextTaskUnblockTime+0x30>)
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	68db      	ldr	r3, [r3, #12]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	4a04      	ldr	r2, [pc, #16]	; (800427c <prvResetNextTaskUnblockTime+0x34>)
 800426a:	6013      	str	r3, [r2, #0]
}
 800426c:	bf00      	nop
 800426e:	46bd      	mov	sp, r7
 8004270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004274:	4770      	bx	lr
 8004276:	bf00      	nop
 8004278:	200001f8 	.word	0x200001f8
 800427c:	2000025c 	.word	0x2000025c

08004280 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8004280:	b480      	push	{r7}
 8004282:	b085      	sub	sp, #20
 8004284:	af00      	add	r7, sp, #0
 8004286:	60f8      	str	r0, [r7, #12]
 8004288:	60b9      	str	r1, [r7, #8]
 800428a:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	3b04      	subs	r3, #4
 8004290:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004298:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	3b04      	subs	r3, #4
 800429e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 80042a0:	68bb      	ldr	r3, [r7, #8]
 80042a2:	f023 0201 	bic.w	r2, r3, #1
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	3b04      	subs	r3, #4
 80042ae:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 80042b0:	4a0c      	ldr	r2, [pc, #48]	; (80042e4 <pxPortInitialiseStack+0x64>)
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	3b14      	subs	r3, #20
 80042ba:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 80042bc:	687a      	ldr	r2, [r7, #4]
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	3b04      	subs	r3, #4
 80042c6:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	f06f 0202 	mvn.w	r2, #2
 80042ce:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	3b20      	subs	r3, #32
 80042d4:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 80042d6:	68fb      	ldr	r3, [r7, #12]
}
 80042d8:	4618      	mov	r0, r3
 80042da:	3714      	adds	r7, #20
 80042dc:	46bd      	mov	sp, r7
 80042de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e2:	4770      	bx	lr
 80042e4:	080042e9 	.word	0x080042e9

080042e8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80042e8:	b580      	push	{r7, lr}
 80042ea:	b082      	sub	sp, #8
 80042ec:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 80042ee:	2300      	movs	r3, #0
 80042f0:	603b      	str	r3, [r7, #0]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 80042f2:	4b0f      	ldr	r3, [pc, #60]	; (8004330 <prvTaskExitError+0x48>)
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80042fa:	d003      	beq.n	8004304 <prvTaskExitError+0x1c>
 80042fc:	490d      	ldr	r1, [pc, #52]	; (8004334 <prvTaskExitError+0x4c>)
 80042fe:	20df      	movs	r0, #223	; 0xdf
 8004300:	f7fc f998 	bl	8000634 <vAssertCalled>
        __asm volatile
 8004304:	f04f 0340 	mov.w	r3, #64	; 0x40
 8004308:	b672      	cpsid	i
 800430a:	f383 8811 	msr	BASEPRI, r3
 800430e:	f3bf 8f6f 	isb	sy
 8004312:	f3bf 8f4f 	dsb	sy
 8004316:	b662      	cpsie	i
 8004318:	607b      	str	r3, [r7, #4]
    }
 800431a:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 800431c:	bf00      	nop
 800431e:	683b      	ldr	r3, [r7, #0]
 8004320:	2b00      	cmp	r3, #0
 8004322:	d0fc      	beq.n	800431e <prvTaskExitError+0x36>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8004324:	bf00      	nop
 8004326:	bf00      	nop
 8004328:	3708      	adds	r7, #8
 800432a:	46bd      	mov	sp, r7
 800432c:	bd80      	pop	{r7, pc}
 800432e:	bf00      	nop
 8004330:	2000000c 	.word	0x2000000c
 8004334:	080059d4 	.word	0x080059d4
	...

08004340 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8004340:	4b07      	ldr	r3, [pc, #28]	; (8004360 <pxCurrentTCBConst2>)
 8004342:	6819      	ldr	r1, [r3, #0]
 8004344:	6808      	ldr	r0, [r1, #0]
 8004346:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800434a:	f380 8809 	msr	PSP, r0
 800434e:	f3bf 8f6f 	isb	sy
 8004352:	f04f 0000 	mov.w	r0, #0
 8004356:	f380 8811 	msr	BASEPRI, r0
 800435a:	4770      	bx	lr
 800435c:	f3af 8000 	nop.w

08004360 <pxCurrentTCBConst2>:
 8004360:	20000168 	.word	0x20000168
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8004364:	bf00      	nop
 8004366:	bf00      	nop

08004368 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004368:	b580      	push	{r7, lr}
 800436a:	b082      	sub	sp, #8
 800436c:	af00      	add	r7, sp, #0
        __asm volatile
 800436e:	f04f 0340 	mov.w	r3, #64	; 0x40
 8004372:	b672      	cpsid	i
 8004374:	f383 8811 	msr	BASEPRI, r3
 8004378:	f3bf 8f6f 	isb	sy
 800437c:	f3bf 8f4f 	dsb	sy
 8004380:	b662      	cpsie	i
 8004382:	607b      	str	r3, [r7, #4]
    }
 8004384:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8004386:	4b0b      	ldr	r3, [pc, #44]	; (80043b4 <vPortEnterCritical+0x4c>)
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	3301      	adds	r3, #1
 800438c:	4a09      	ldr	r2, [pc, #36]	; (80043b4 <vPortEnterCritical+0x4c>)
 800438e:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8004390:	4b08      	ldr	r3, [pc, #32]	; (80043b4 <vPortEnterCritical+0x4c>)
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	2b01      	cmp	r3, #1
 8004396:	d109      	bne.n	80043ac <vPortEnterCritical+0x44>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004398:	4b07      	ldr	r3, [pc, #28]	; (80043b8 <vPortEnterCritical+0x50>)
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	b2db      	uxtb	r3, r3
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d004      	beq.n	80043ac <vPortEnterCritical+0x44>
 80043a2:	4906      	ldr	r1, [pc, #24]	; (80043bc <vPortEnterCritical+0x54>)
 80043a4:	f44f 70cc 	mov.w	r0, #408	; 0x198
 80043a8:	f7fc f944 	bl	8000634 <vAssertCalled>
    }
}
 80043ac:	bf00      	nop
 80043ae:	3708      	adds	r7, #8
 80043b0:	46bd      	mov	sp, r7
 80043b2:	bd80      	pop	{r7, pc}
 80043b4:	2000000c 	.word	0x2000000c
 80043b8:	e000ed04 	.word	0xe000ed04
 80043bc:	080059d4 	.word	0x080059d4

080043c0 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80043c0:	b580      	push	{r7, lr}
 80043c2:	b082      	sub	sp, #8
 80043c4:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 80043c6:	4b0e      	ldr	r3, [pc, #56]	; (8004400 <vPortExitCritical+0x40>)
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d104      	bne.n	80043d8 <vPortExitCritical+0x18>
 80043ce:	490d      	ldr	r1, [pc, #52]	; (8004404 <vPortExitCritical+0x44>)
 80043d0:	f240 109f 	movw	r0, #415	; 0x19f
 80043d4:	f7fc f92e 	bl	8000634 <vAssertCalled>
    uxCriticalNesting--;
 80043d8:	4b09      	ldr	r3, [pc, #36]	; (8004400 <vPortExitCritical+0x40>)
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	3b01      	subs	r3, #1
 80043de:	4a08      	ldr	r2, [pc, #32]	; (8004400 <vPortExitCritical+0x40>)
 80043e0:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 80043e2:	4b07      	ldr	r3, [pc, #28]	; (8004400 <vPortExitCritical+0x40>)
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d105      	bne.n	80043f6 <vPortExitCritical+0x36>
 80043ea:	2300      	movs	r3, #0
 80043ec:	607b      	str	r3, [r7, #4]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 80043f4:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 80043f6:	bf00      	nop
 80043f8:	3708      	adds	r7, #8
 80043fa:	46bd      	mov	sp, r7
 80043fc:	bd80      	pop	{r7, pc}
 80043fe:	bf00      	nop
 8004400:	2000000c 	.word	0x2000000c
 8004404:	080059d4 	.word	0x080059d4
	...

08004410 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8004410:	f3ef 8009 	mrs	r0, PSP
 8004414:	f3bf 8f6f 	isb	sy
 8004418:	4b15      	ldr	r3, [pc, #84]	; (8004470 <pxCurrentTCBConst>)
 800441a:	681a      	ldr	r2, [r3, #0]
 800441c:	f01e 0f10 	tst.w	lr, #16
 8004420:	bf08      	it	eq
 8004422:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004426:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800442a:	6010      	str	r0, [r2, #0]
 800442c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004430:	f04f 0040 	mov.w	r0, #64	; 0x40
 8004434:	b672      	cpsid	i
 8004436:	f380 8811 	msr	BASEPRI, r0
 800443a:	f3bf 8f4f 	dsb	sy
 800443e:	f3bf 8f6f 	isb	sy
 8004442:	b662      	cpsie	i
 8004444:	f7ff fe6a 	bl	800411c <vTaskSwitchContext>
 8004448:	f04f 0000 	mov.w	r0, #0
 800444c:	f380 8811 	msr	BASEPRI, r0
 8004450:	bc09      	pop	{r0, r3}
 8004452:	6819      	ldr	r1, [r3, #0]
 8004454:	6808      	ldr	r0, [r1, #0]
 8004456:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800445a:	f01e 0f10 	tst.w	lr, #16
 800445e:	bf08      	it	eq
 8004460:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004464:	f380 8809 	msr	PSP, r0
 8004468:	f3bf 8f6f 	isb	sy
 800446c:	4770      	bx	lr
 800446e:	bf00      	nop

08004470 <pxCurrentTCBConst>:
 8004470:	20000168 	.word	0x20000168
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8004474:	bf00      	nop
 8004476:	bf00      	nop

08004478 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004478:	b580      	push	{r7, lr}
 800447a:	b082      	sub	sp, #8
 800447c:	af00      	add	r7, sp, #0
        __asm volatile
 800447e:	f04f 0340 	mov.w	r3, #64	; 0x40
 8004482:	b672      	cpsid	i
 8004484:	f383 8811 	msr	BASEPRI, r3
 8004488:	f3bf 8f6f 	isb	sy
 800448c:	f3bf 8f4f 	dsb	sy
 8004490:	b662      	cpsie	i
 8004492:	607b      	str	r3, [r7, #4]
    }
 8004494:	bf00      	nop
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8004496:	f7ff fd8d 	bl	8003fb4 <xTaskIncrementTick>
 800449a:	4603      	mov	r3, r0
 800449c:	2b00      	cmp	r3, #0
 800449e:	d003      	beq.n	80044a8 <SysTick_Handler+0x30>
        {
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80044a0:	4b06      	ldr	r3, [pc, #24]	; (80044bc <SysTick_Handler+0x44>)
 80044a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80044a6:	601a      	str	r2, [r3, #0]
 80044a8:	2300      	movs	r3, #0
 80044aa:	603b      	str	r3, [r7, #0]
        __asm volatile
 80044ac:	683b      	ldr	r3, [r7, #0]
 80044ae:	f383 8811 	msr	BASEPRI, r3
    }
 80044b2:	bf00      	nop
        }
    }
    portENABLE_INTERRUPTS();
}
 80044b4:	bf00      	nop
 80044b6:	3708      	adds	r7, #8
 80044b8:	46bd      	mov	sp, r7
 80044ba:	bd80      	pop	{r7, pc}
 80044bc:	e000ed04 	.word	0xe000ed04

080044c0 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 80044c0:	b580      	push	{r7, lr}
 80044c2:	b086      	sub	sp, #24
 80044c4:	af00      	add	r7, sp, #0
 80044c6:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 80044c8:	2300      	movs	r3, #0
 80044ca:	60fb      	str	r3, [r7, #12]

    vTaskSuspendAll();
 80044cc:	f7ff fccc 	bl	8003e68 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 80044d0:	4b5b      	ldr	r3, [pc, #364]	; (8004640 <pvPortMalloc+0x180>)
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d101      	bne.n	80044dc <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 80044d8:	f000 f918 	bl	800470c <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80044dc:	4b59      	ldr	r3, [pc, #356]	; (8004644 <pvPortMalloc+0x184>)
 80044de:	681a      	ldr	r2, [r3, #0]
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	4013      	ands	r3, r2
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	f040 809a 	bne.w	800461e <pvPortMalloc+0x15e>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d027      	beq.n	8004540 <pvPortMalloc+0x80>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 80044f0:	2208      	movs	r2, #8
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) && 
 80044f6:	687a      	ldr	r2, [r7, #4]
 80044f8:	429a      	cmp	r2, r3
 80044fa:	d221      	bcs.n	8004540 <pvPortMalloc+0x80>
            {
                xWantedSize += xHeapStructSize;
 80044fc:	2208      	movs	r2, #8
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	4413      	add	r3, r2
 8004502:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	f003 0307 	and.w	r3, r3, #7
 800450a:	2b00      	cmp	r3, #0
 800450c:	d01b      	beq.n	8004546 <pvPortMalloc+0x86>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) 
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	f023 0307 	bic.w	r3, r3, #7
 8004514:	3308      	adds	r3, #8
 8004516:	687a      	ldr	r2, [r7, #4]
 8004518:	429a      	cmp	r2, r3
 800451a:	d20e      	bcs.n	800453a <pvPortMalloc+0x7a>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	f023 0307 	bic.w	r3, r3, #7
 8004522:	3308      	adds	r3, #8
 8004524:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	f003 0307 	and.w	r3, r3, #7
 800452c:	2b00      	cmp	r3, #0
 800452e:	d00a      	beq.n	8004546 <pvPortMalloc+0x86>
 8004530:	4945      	ldr	r1, [pc, #276]	; (8004648 <pvPortMalloc+0x188>)
 8004532:	209a      	movs	r0, #154	; 0x9a
 8004534:	f7fc f87e 	bl	8000634 <vAssertCalled>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004538:	e005      	b.n	8004546 <pvPortMalloc+0x86>
                    }
                    else
                    {
                        xWantedSize = 0;
 800453a:	2300      	movs	r3, #0
 800453c:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800453e:	e002      	b.n	8004546 <pvPortMalloc+0x86>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
 8004540:	2300      	movs	r3, #0
 8004542:	607b      	str	r3, [r7, #4]
 8004544:	e000      	b.n	8004548 <pvPortMalloc+0x88>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004546:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	2b00      	cmp	r3, #0
 800454c:	d067      	beq.n	800461e <pvPortMalloc+0x15e>
 800454e:	4b3f      	ldr	r3, [pc, #252]	; (800464c <pvPortMalloc+0x18c>)
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	687a      	ldr	r2, [r7, #4]
 8004554:	429a      	cmp	r2, r3
 8004556:	d862      	bhi.n	800461e <pvPortMalloc+0x15e>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8004558:	4b3d      	ldr	r3, [pc, #244]	; (8004650 <pvPortMalloc+0x190>)
 800455a:	613b      	str	r3, [r7, #16]
                pxBlock = xStart.pxNextFreeBlock;
 800455c:	4b3c      	ldr	r3, [pc, #240]	; (8004650 <pvPortMalloc+0x190>)
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	617b      	str	r3, [r7, #20]

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004562:	e004      	b.n	800456e <pvPortMalloc+0xae>
                {
                    pxPreviousBlock = pxBlock;
 8004564:	697b      	ldr	r3, [r7, #20]
 8004566:	613b      	str	r3, [r7, #16]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8004568:	697b      	ldr	r3, [r7, #20]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	617b      	str	r3, [r7, #20]
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800456e:	697b      	ldr	r3, [r7, #20]
 8004570:	685b      	ldr	r3, [r3, #4]
 8004572:	687a      	ldr	r2, [r7, #4]
 8004574:	429a      	cmp	r2, r3
 8004576:	d903      	bls.n	8004580 <pvPortMalloc+0xc0>
 8004578:	697b      	ldr	r3, [r7, #20]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	2b00      	cmp	r3, #0
 800457e:	d1f1      	bne.n	8004564 <pvPortMalloc+0xa4>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8004580:	4b2f      	ldr	r3, [pc, #188]	; (8004640 <pvPortMalloc+0x180>)
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	697a      	ldr	r2, [r7, #20]
 8004586:	429a      	cmp	r2, r3
 8004588:	d049      	beq.n	800461e <pvPortMalloc+0x15e>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800458a:	693b      	ldr	r3, [r7, #16]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	2208      	movs	r2, #8
 8004590:	4413      	add	r3, r2
 8004592:	60fb      	str	r3, [r7, #12]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004594:	697b      	ldr	r3, [r7, #20]
 8004596:	681a      	ldr	r2, [r3, #0]
 8004598:	693b      	ldr	r3, [r7, #16]
 800459a:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800459c:	697b      	ldr	r3, [r7, #20]
 800459e:	685a      	ldr	r2, [r3, #4]
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	1ad2      	subs	r2, r2, r3
 80045a4:	2308      	movs	r3, #8
 80045a6:	005b      	lsls	r3, r3, #1
 80045a8:	429a      	cmp	r2, r3
 80045aa:	d918      	bls.n	80045de <pvPortMalloc+0x11e>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80045ac:	697a      	ldr	r2, [r7, #20]
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	4413      	add	r3, r2
 80045b2:	60bb      	str	r3, [r7, #8]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80045b4:	68bb      	ldr	r3, [r7, #8]
 80045b6:	f003 0307 	and.w	r3, r3, #7
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d003      	beq.n	80045c6 <pvPortMalloc+0x106>
 80045be:	4922      	ldr	r1, [pc, #136]	; (8004648 <pvPortMalloc+0x188>)
 80045c0:	20cd      	movs	r0, #205	; 0xcd
 80045c2:	f7fc f837 	bl	8000634 <vAssertCalled>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80045c6:	697b      	ldr	r3, [r7, #20]
 80045c8:	685a      	ldr	r2, [r3, #4]
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	1ad2      	subs	r2, r2, r3
 80045ce:	68bb      	ldr	r3, [r7, #8]
 80045d0:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 80045d2:	697b      	ldr	r3, [r7, #20]
 80045d4:	687a      	ldr	r2, [r7, #4]
 80045d6:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 80045d8:	68b8      	ldr	r0, [r7, #8]
 80045da:	f000 f8f9 	bl	80047d0 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 80045de:	4b1b      	ldr	r3, [pc, #108]	; (800464c <pvPortMalloc+0x18c>)
 80045e0:	681a      	ldr	r2, [r3, #0]
 80045e2:	697b      	ldr	r3, [r7, #20]
 80045e4:	685b      	ldr	r3, [r3, #4]
 80045e6:	1ad3      	subs	r3, r2, r3
 80045e8:	4a18      	ldr	r2, [pc, #96]	; (800464c <pvPortMalloc+0x18c>)
 80045ea:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80045ec:	4b17      	ldr	r3, [pc, #92]	; (800464c <pvPortMalloc+0x18c>)
 80045ee:	681a      	ldr	r2, [r3, #0]
 80045f0:	4b18      	ldr	r3, [pc, #96]	; (8004654 <pvPortMalloc+0x194>)
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	429a      	cmp	r2, r3
 80045f6:	d203      	bcs.n	8004600 <pvPortMalloc+0x140>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80045f8:	4b14      	ldr	r3, [pc, #80]	; (800464c <pvPortMalloc+0x18c>)
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	4a15      	ldr	r2, [pc, #84]	; (8004654 <pvPortMalloc+0x194>)
 80045fe:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004600:	697b      	ldr	r3, [r7, #20]
 8004602:	685a      	ldr	r2, [r3, #4]
 8004604:	4b0f      	ldr	r3, [pc, #60]	; (8004644 <pvPortMalloc+0x184>)
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	431a      	orrs	r2, r3
 800460a:	697b      	ldr	r3, [r7, #20]
 800460c:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 800460e:	697b      	ldr	r3, [r7, #20]
 8004610:	2200      	movs	r2, #0
 8004612:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8004614:	4b10      	ldr	r3, [pc, #64]	; (8004658 <pvPortMalloc+0x198>)
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	3301      	adds	r3, #1
 800461a:	4a0f      	ldr	r2, [pc, #60]	; (8004658 <pvPortMalloc+0x198>)
 800461c:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 800461e:	f7ff fc31 	bl	8003e84 <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	f003 0307 	and.w	r3, r3, #7
 8004628:	2b00      	cmp	r3, #0
 800462a:	d004      	beq.n	8004636 <pvPortMalloc+0x176>
 800462c:	4906      	ldr	r1, [pc, #24]	; (8004648 <pvPortMalloc+0x188>)
 800462e:	f44f 7087 	mov.w	r0, #270	; 0x10e
 8004632:	f7fb ffff 	bl	8000634 <vAssertCalled>
    return pvReturn;
 8004636:	68fb      	ldr	r3, [r7, #12]
}
 8004638:	4618      	mov	r0, r3
 800463a:	3718      	adds	r7, #24
 800463c:	46bd      	mov	sp, r7
 800463e:	bd80      	pop	{r7, pc}
 8004640:	2000ba6c 	.word	0x2000ba6c
 8004644:	2000ba80 	.word	0x2000ba80
 8004648:	08005a0c 	.word	0x08005a0c
 800464c:	2000ba70 	.word	0x2000ba70
 8004650:	2000ba64 	.word	0x2000ba64
 8004654:	2000ba74 	.word	0x2000ba74
 8004658:	2000ba78 	.word	0x2000ba78

0800465c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 800465c:	b580      	push	{r7, lr}
 800465e:	b084      	sub	sp, #16
 8004660:	af00      	add	r7, sp, #0
 8004662:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	60fb      	str	r3, [r7, #12]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	2b00      	cmp	r3, #0
 800466c:	d041      	beq.n	80046f2 <vPortFree+0x96>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 800466e:	2308      	movs	r3, #8
 8004670:	425b      	negs	r3, r3
 8004672:	68fa      	ldr	r2, [r7, #12]
 8004674:	4413      	add	r3, r2
 8004676:	60fb      	str	r3, [r7, #12]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	60bb      	str	r3, [r7, #8]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800467c:	68bb      	ldr	r3, [r7, #8]
 800467e:	685a      	ldr	r2, [r3, #4]
 8004680:	4b1e      	ldr	r3, [pc, #120]	; (80046fc <vPortFree+0xa0>)
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	4013      	ands	r3, r2
 8004686:	2b00      	cmp	r3, #0
 8004688:	d104      	bne.n	8004694 <vPortFree+0x38>
 800468a:	491d      	ldr	r1, [pc, #116]	; (8004700 <vPortFree+0xa4>)
 800468c:	f44f 7091 	mov.w	r0, #290	; 0x122
 8004690:	f7fb ffd0 	bl	8000634 <vAssertCalled>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004694:	68bb      	ldr	r3, [r7, #8]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	2b00      	cmp	r3, #0
 800469a:	d004      	beq.n	80046a6 <vPortFree+0x4a>
 800469c:	4918      	ldr	r1, [pc, #96]	; (8004700 <vPortFree+0xa4>)
 800469e:	f240 1023 	movw	r0, #291	; 0x123
 80046a2:	f7fb ffc7 	bl	8000634 <vAssertCalled>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80046a6:	68bb      	ldr	r3, [r7, #8]
 80046a8:	685a      	ldr	r2, [r3, #4]
 80046aa:	4b14      	ldr	r3, [pc, #80]	; (80046fc <vPortFree+0xa0>)
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	4013      	ands	r3, r2
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d01e      	beq.n	80046f2 <vPortFree+0x96>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 80046b4:	68bb      	ldr	r3, [r7, #8]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d11a      	bne.n	80046f2 <vPortFree+0x96>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80046bc:	68bb      	ldr	r3, [r7, #8]
 80046be:	685a      	ldr	r2, [r3, #4]
 80046c0:	4b0e      	ldr	r3, [pc, #56]	; (80046fc <vPortFree+0xa0>)
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	43db      	mvns	r3, r3
 80046c6:	401a      	ands	r2, r3
 80046c8:	68bb      	ldr	r3, [r7, #8]
 80046ca:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 80046cc:	f7ff fbcc 	bl	8003e68 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 80046d0:	68bb      	ldr	r3, [r7, #8]
 80046d2:	685a      	ldr	r2, [r3, #4]
 80046d4:	4b0b      	ldr	r3, [pc, #44]	; (8004704 <vPortFree+0xa8>)
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	4413      	add	r3, r2
 80046da:	4a0a      	ldr	r2, [pc, #40]	; (8004704 <vPortFree+0xa8>)
 80046dc:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80046de:	68b8      	ldr	r0, [r7, #8]
 80046e0:	f000 f876 	bl	80047d0 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 80046e4:	4b08      	ldr	r3, [pc, #32]	; (8004708 <vPortFree+0xac>)
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	3301      	adds	r3, #1
 80046ea:	4a07      	ldr	r2, [pc, #28]	; (8004708 <vPortFree+0xac>)
 80046ec:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 80046ee:	f7ff fbc9 	bl	8003e84 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 80046f2:	bf00      	nop
 80046f4:	3710      	adds	r7, #16
 80046f6:	46bd      	mov	sp, r7
 80046f8:	bd80      	pop	{r7, pc}
 80046fa:	bf00      	nop
 80046fc:	2000ba80 	.word	0x2000ba80
 8004700:	08005a0c 	.word	0x08005a0c
 8004704:	2000ba70 	.word	0x2000ba70
 8004708:	2000ba7c 	.word	0x2000ba7c

0800470c <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 800470c:	b480      	push	{r7}
 800470e:	b085      	sub	sp, #20
 8004710:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004712:	f44f 4338 	mov.w	r3, #47104	; 0xb800
 8004716:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 8004718:	4b27      	ldr	r3, [pc, #156]	; (80047b8 <prvHeapInit+0xac>)
 800471a:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	f003 0307 	and.w	r3, r3, #7
 8004722:	2b00      	cmp	r3, #0
 8004724:	d00c      	beq.n	8004740 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	3307      	adds	r3, #7
 800472a:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	f023 0307 	bic.w	r3, r3, #7
 8004732:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004734:	68ba      	ldr	r2, [r7, #8]
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	1ad3      	subs	r3, r2, r3
 800473a:	4a1f      	ldr	r2, [pc, #124]	; (80047b8 <prvHeapInit+0xac>)
 800473c:	4413      	add	r3, r2
 800473e:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004744:	4a1d      	ldr	r2, [pc, #116]	; (80047bc <prvHeapInit+0xb0>)
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 800474a:	4b1c      	ldr	r3, [pc, #112]	; (80047bc <prvHeapInit+0xb0>)
 800474c:	2200      	movs	r2, #0
 800474e:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	68ba      	ldr	r2, [r7, #8]
 8004754:	4413      	add	r3, r2
 8004756:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 8004758:	2208      	movs	r2, #8
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	1a9b      	subs	r3, r3, r2
 800475e:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	f023 0307 	bic.w	r3, r3, #7
 8004766:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	4a15      	ldr	r2, [pc, #84]	; (80047c0 <prvHeapInit+0xb4>)
 800476c:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 800476e:	4b14      	ldr	r3, [pc, #80]	; (80047c0 <prvHeapInit+0xb4>)
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	2200      	movs	r2, #0
 8004774:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 8004776:	4b12      	ldr	r3, [pc, #72]	; (80047c0 <prvHeapInit+0xb4>)
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	2200      	movs	r2, #0
 800477c:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004782:	683b      	ldr	r3, [r7, #0]
 8004784:	68fa      	ldr	r2, [r7, #12]
 8004786:	1ad2      	subs	r2, r2, r3
 8004788:	683b      	ldr	r3, [r7, #0]
 800478a:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800478c:	4b0c      	ldr	r3, [pc, #48]	; (80047c0 <prvHeapInit+0xb4>)
 800478e:	681a      	ldr	r2, [r3, #0]
 8004790:	683b      	ldr	r3, [r7, #0]
 8004792:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004794:	683b      	ldr	r3, [r7, #0]
 8004796:	685b      	ldr	r3, [r3, #4]
 8004798:	4a0a      	ldr	r2, [pc, #40]	; (80047c4 <prvHeapInit+0xb8>)
 800479a:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800479c:	683b      	ldr	r3, [r7, #0]
 800479e:	685b      	ldr	r3, [r3, #4]
 80047a0:	4a09      	ldr	r2, [pc, #36]	; (80047c8 <prvHeapInit+0xbc>)
 80047a2:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80047a4:	4b09      	ldr	r3, [pc, #36]	; (80047cc <prvHeapInit+0xc0>)
 80047a6:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80047aa:	601a      	str	r2, [r3, #0]
}
 80047ac:	bf00      	nop
 80047ae:	3714      	adds	r7, #20
 80047b0:	46bd      	mov	sp, r7
 80047b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b6:	4770      	bx	lr
 80047b8:	20000264 	.word	0x20000264
 80047bc:	2000ba64 	.word	0x2000ba64
 80047c0:	2000ba6c 	.word	0x2000ba6c
 80047c4:	2000ba74 	.word	0x2000ba74
 80047c8:	2000ba70 	.word	0x2000ba70
 80047cc:	2000ba80 	.word	0x2000ba80

080047d0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 80047d0:	b480      	push	{r7}
 80047d2:	b085      	sub	sp, #20
 80047d4:	af00      	add	r7, sp, #0
 80047d6:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80047d8:	4b28      	ldr	r3, [pc, #160]	; (800487c <prvInsertBlockIntoFreeList+0xac>)
 80047da:	60fb      	str	r3, [r7, #12]
 80047dc:	e002      	b.n	80047e4 <prvInsertBlockIntoFreeList+0x14>
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	60fb      	str	r3, [r7, #12]
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	687a      	ldr	r2, [r7, #4]
 80047ea:	429a      	cmp	r2, r3
 80047ec:	d8f7      	bhi.n	80047de <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	685b      	ldr	r3, [r3, #4]
 80047f6:	68ba      	ldr	r2, [r7, #8]
 80047f8:	4413      	add	r3, r2
 80047fa:	687a      	ldr	r2, [r7, #4]
 80047fc:	429a      	cmp	r2, r3
 80047fe:	d108      	bne.n	8004812 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	685a      	ldr	r2, [r3, #4]
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	685b      	ldr	r3, [r3, #4]
 8004808:	441a      	add	r2, r3
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	685b      	ldr	r3, [r3, #4]
 800481a:	68ba      	ldr	r2, [r7, #8]
 800481c:	441a      	add	r2, r3
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	429a      	cmp	r2, r3
 8004824:	d118      	bne.n	8004858 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	681a      	ldr	r2, [r3, #0]
 800482a:	4b15      	ldr	r3, [pc, #84]	; (8004880 <prvInsertBlockIntoFreeList+0xb0>)
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	429a      	cmp	r2, r3
 8004830:	d00d      	beq.n	800484e <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	685a      	ldr	r2, [r3, #4]
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	685b      	ldr	r3, [r3, #4]
 800483c:	441a      	add	r2, r3
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	681a      	ldr	r2, [r3, #0]
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	601a      	str	r2, [r3, #0]
 800484c:	e008      	b.n	8004860 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800484e:	4b0c      	ldr	r3, [pc, #48]	; (8004880 <prvInsertBlockIntoFreeList+0xb0>)
 8004850:	681a      	ldr	r2, [r3, #0]
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	601a      	str	r2, [r3, #0]
 8004856:	e003      	b.n	8004860 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	681a      	ldr	r2, [r3, #0]
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8004860:	68fa      	ldr	r2, [r7, #12]
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	429a      	cmp	r2, r3
 8004866:	d002      	beq.n	800486e <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	687a      	ldr	r2, [r7, #4]
 800486c:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800486e:	bf00      	nop
 8004870:	3714      	adds	r7, #20
 8004872:	46bd      	mov	sp, r7
 8004874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004878:	4770      	bx	lr
 800487a:	bf00      	nop
 800487c:	2000ba64 	.word	0x2000ba64
 8004880:	2000ba6c 	.word	0x2000ba6c

08004884 <__libc_init_array>:
 8004884:	b570      	push	{r4, r5, r6, lr}
 8004886:	4d0d      	ldr	r5, [pc, #52]	; (80048bc <__libc_init_array+0x38>)
 8004888:	4c0d      	ldr	r4, [pc, #52]	; (80048c0 <__libc_init_array+0x3c>)
 800488a:	1b64      	subs	r4, r4, r5
 800488c:	10a4      	asrs	r4, r4, #2
 800488e:	2600      	movs	r6, #0
 8004890:	42a6      	cmp	r6, r4
 8004892:	d109      	bne.n	80048a8 <__libc_init_array+0x24>
 8004894:	4d0b      	ldr	r5, [pc, #44]	; (80048c4 <__libc_init_array+0x40>)
 8004896:	4c0c      	ldr	r4, [pc, #48]	; (80048c8 <__libc_init_array+0x44>)
 8004898:	f001 f832 	bl	8005900 <_init>
 800489c:	1b64      	subs	r4, r4, r5
 800489e:	10a4      	asrs	r4, r4, #2
 80048a0:	2600      	movs	r6, #0
 80048a2:	42a6      	cmp	r6, r4
 80048a4:	d105      	bne.n	80048b2 <__libc_init_array+0x2e>
 80048a6:	bd70      	pop	{r4, r5, r6, pc}
 80048a8:	f855 3b04 	ldr.w	r3, [r5], #4
 80048ac:	4798      	blx	r3
 80048ae:	3601      	adds	r6, #1
 80048b0:	e7ee      	b.n	8004890 <__libc_init_array+0xc>
 80048b2:	f855 3b04 	ldr.w	r3, [r5], #4
 80048b6:	4798      	blx	r3
 80048b8:	3601      	adds	r6, #1
 80048ba:	e7f2      	b.n	80048a2 <__libc_init_array+0x1e>
 80048bc:	08005af8 	.word	0x08005af8
 80048c0:	08005af8 	.word	0x08005af8
 80048c4:	08005af8 	.word	0x08005af8
 80048c8:	08005afc 	.word	0x08005afc

080048cc <memset>:
 80048cc:	4402      	add	r2, r0
 80048ce:	4603      	mov	r3, r0
 80048d0:	4293      	cmp	r3, r2
 80048d2:	d100      	bne.n	80048d6 <memset+0xa>
 80048d4:	4770      	bx	lr
 80048d6:	f803 1b01 	strb.w	r1, [r3], #1
 80048da:	e7f9      	b.n	80048d0 <memset+0x4>

080048dc <iprintf>:
 80048dc:	b40f      	push	{r0, r1, r2, r3}
 80048de:	4b0a      	ldr	r3, [pc, #40]	; (8004908 <iprintf+0x2c>)
 80048e0:	b513      	push	{r0, r1, r4, lr}
 80048e2:	681c      	ldr	r4, [r3, #0]
 80048e4:	b124      	cbz	r4, 80048f0 <iprintf+0x14>
 80048e6:	69a3      	ldr	r3, [r4, #24]
 80048e8:	b913      	cbnz	r3, 80048f0 <iprintf+0x14>
 80048ea:	4620      	mov	r0, r4
 80048ec:	f000 fa5e 	bl	8004dac <__sinit>
 80048f0:	ab05      	add	r3, sp, #20
 80048f2:	9a04      	ldr	r2, [sp, #16]
 80048f4:	68a1      	ldr	r1, [r4, #8]
 80048f6:	9301      	str	r3, [sp, #4]
 80048f8:	4620      	mov	r0, r4
 80048fa:	f000 fc67 	bl	80051cc <_vfiprintf_r>
 80048fe:	b002      	add	sp, #8
 8004900:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004904:	b004      	add	sp, #16
 8004906:	4770      	bx	lr
 8004908:	20000010 	.word	0x20000010

0800490c <_puts_r>:
 800490c:	b570      	push	{r4, r5, r6, lr}
 800490e:	460e      	mov	r6, r1
 8004910:	4605      	mov	r5, r0
 8004912:	b118      	cbz	r0, 800491c <_puts_r+0x10>
 8004914:	6983      	ldr	r3, [r0, #24]
 8004916:	b90b      	cbnz	r3, 800491c <_puts_r+0x10>
 8004918:	f000 fa48 	bl	8004dac <__sinit>
 800491c:	69ab      	ldr	r3, [r5, #24]
 800491e:	68ac      	ldr	r4, [r5, #8]
 8004920:	b913      	cbnz	r3, 8004928 <_puts_r+0x1c>
 8004922:	4628      	mov	r0, r5
 8004924:	f000 fa42 	bl	8004dac <__sinit>
 8004928:	4b2c      	ldr	r3, [pc, #176]	; (80049dc <_puts_r+0xd0>)
 800492a:	429c      	cmp	r4, r3
 800492c:	d120      	bne.n	8004970 <_puts_r+0x64>
 800492e:	686c      	ldr	r4, [r5, #4]
 8004930:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004932:	07db      	lsls	r3, r3, #31
 8004934:	d405      	bmi.n	8004942 <_puts_r+0x36>
 8004936:	89a3      	ldrh	r3, [r4, #12]
 8004938:	0598      	lsls	r0, r3, #22
 800493a:	d402      	bmi.n	8004942 <_puts_r+0x36>
 800493c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800493e:	f000 fad3 	bl	8004ee8 <__retarget_lock_acquire_recursive>
 8004942:	89a3      	ldrh	r3, [r4, #12]
 8004944:	0719      	lsls	r1, r3, #28
 8004946:	d51d      	bpl.n	8004984 <_puts_r+0x78>
 8004948:	6923      	ldr	r3, [r4, #16]
 800494a:	b1db      	cbz	r3, 8004984 <_puts_r+0x78>
 800494c:	3e01      	subs	r6, #1
 800494e:	68a3      	ldr	r3, [r4, #8]
 8004950:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8004954:	3b01      	subs	r3, #1
 8004956:	60a3      	str	r3, [r4, #8]
 8004958:	bb39      	cbnz	r1, 80049aa <_puts_r+0x9e>
 800495a:	2b00      	cmp	r3, #0
 800495c:	da38      	bge.n	80049d0 <_puts_r+0xc4>
 800495e:	4622      	mov	r2, r4
 8004960:	210a      	movs	r1, #10
 8004962:	4628      	mov	r0, r5
 8004964:	f000 f848 	bl	80049f8 <__swbuf_r>
 8004968:	3001      	adds	r0, #1
 800496a:	d011      	beq.n	8004990 <_puts_r+0x84>
 800496c:	250a      	movs	r5, #10
 800496e:	e011      	b.n	8004994 <_puts_r+0x88>
 8004970:	4b1b      	ldr	r3, [pc, #108]	; (80049e0 <_puts_r+0xd4>)
 8004972:	429c      	cmp	r4, r3
 8004974:	d101      	bne.n	800497a <_puts_r+0x6e>
 8004976:	68ac      	ldr	r4, [r5, #8]
 8004978:	e7da      	b.n	8004930 <_puts_r+0x24>
 800497a:	4b1a      	ldr	r3, [pc, #104]	; (80049e4 <_puts_r+0xd8>)
 800497c:	429c      	cmp	r4, r3
 800497e:	bf08      	it	eq
 8004980:	68ec      	ldreq	r4, [r5, #12]
 8004982:	e7d5      	b.n	8004930 <_puts_r+0x24>
 8004984:	4621      	mov	r1, r4
 8004986:	4628      	mov	r0, r5
 8004988:	f000 f888 	bl	8004a9c <__swsetup_r>
 800498c:	2800      	cmp	r0, #0
 800498e:	d0dd      	beq.n	800494c <_puts_r+0x40>
 8004990:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8004994:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004996:	07da      	lsls	r2, r3, #31
 8004998:	d405      	bmi.n	80049a6 <_puts_r+0x9a>
 800499a:	89a3      	ldrh	r3, [r4, #12]
 800499c:	059b      	lsls	r3, r3, #22
 800499e:	d402      	bmi.n	80049a6 <_puts_r+0x9a>
 80049a0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80049a2:	f000 faa2 	bl	8004eea <__retarget_lock_release_recursive>
 80049a6:	4628      	mov	r0, r5
 80049a8:	bd70      	pop	{r4, r5, r6, pc}
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	da04      	bge.n	80049b8 <_puts_r+0xac>
 80049ae:	69a2      	ldr	r2, [r4, #24]
 80049b0:	429a      	cmp	r2, r3
 80049b2:	dc06      	bgt.n	80049c2 <_puts_r+0xb6>
 80049b4:	290a      	cmp	r1, #10
 80049b6:	d004      	beq.n	80049c2 <_puts_r+0xb6>
 80049b8:	6823      	ldr	r3, [r4, #0]
 80049ba:	1c5a      	adds	r2, r3, #1
 80049bc:	6022      	str	r2, [r4, #0]
 80049be:	7019      	strb	r1, [r3, #0]
 80049c0:	e7c5      	b.n	800494e <_puts_r+0x42>
 80049c2:	4622      	mov	r2, r4
 80049c4:	4628      	mov	r0, r5
 80049c6:	f000 f817 	bl	80049f8 <__swbuf_r>
 80049ca:	3001      	adds	r0, #1
 80049cc:	d1bf      	bne.n	800494e <_puts_r+0x42>
 80049ce:	e7df      	b.n	8004990 <_puts_r+0x84>
 80049d0:	6823      	ldr	r3, [r4, #0]
 80049d2:	250a      	movs	r5, #10
 80049d4:	1c5a      	adds	r2, r3, #1
 80049d6:	6022      	str	r2, [r4, #0]
 80049d8:	701d      	strb	r5, [r3, #0]
 80049da:	e7db      	b.n	8004994 <_puts_r+0x88>
 80049dc:	08005a7c 	.word	0x08005a7c
 80049e0:	08005a9c 	.word	0x08005a9c
 80049e4:	08005a5c 	.word	0x08005a5c

080049e8 <puts>:
 80049e8:	4b02      	ldr	r3, [pc, #8]	; (80049f4 <puts+0xc>)
 80049ea:	4601      	mov	r1, r0
 80049ec:	6818      	ldr	r0, [r3, #0]
 80049ee:	f7ff bf8d 	b.w	800490c <_puts_r>
 80049f2:	bf00      	nop
 80049f4:	20000010 	.word	0x20000010

080049f8 <__swbuf_r>:
 80049f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80049fa:	460e      	mov	r6, r1
 80049fc:	4614      	mov	r4, r2
 80049fe:	4605      	mov	r5, r0
 8004a00:	b118      	cbz	r0, 8004a0a <__swbuf_r+0x12>
 8004a02:	6983      	ldr	r3, [r0, #24]
 8004a04:	b90b      	cbnz	r3, 8004a0a <__swbuf_r+0x12>
 8004a06:	f000 f9d1 	bl	8004dac <__sinit>
 8004a0a:	4b21      	ldr	r3, [pc, #132]	; (8004a90 <__swbuf_r+0x98>)
 8004a0c:	429c      	cmp	r4, r3
 8004a0e:	d12b      	bne.n	8004a68 <__swbuf_r+0x70>
 8004a10:	686c      	ldr	r4, [r5, #4]
 8004a12:	69a3      	ldr	r3, [r4, #24]
 8004a14:	60a3      	str	r3, [r4, #8]
 8004a16:	89a3      	ldrh	r3, [r4, #12]
 8004a18:	071a      	lsls	r2, r3, #28
 8004a1a:	d52f      	bpl.n	8004a7c <__swbuf_r+0x84>
 8004a1c:	6923      	ldr	r3, [r4, #16]
 8004a1e:	b36b      	cbz	r3, 8004a7c <__swbuf_r+0x84>
 8004a20:	6923      	ldr	r3, [r4, #16]
 8004a22:	6820      	ldr	r0, [r4, #0]
 8004a24:	1ac0      	subs	r0, r0, r3
 8004a26:	6963      	ldr	r3, [r4, #20]
 8004a28:	b2f6      	uxtb	r6, r6
 8004a2a:	4283      	cmp	r3, r0
 8004a2c:	4637      	mov	r7, r6
 8004a2e:	dc04      	bgt.n	8004a3a <__swbuf_r+0x42>
 8004a30:	4621      	mov	r1, r4
 8004a32:	4628      	mov	r0, r5
 8004a34:	f000 f926 	bl	8004c84 <_fflush_r>
 8004a38:	bb30      	cbnz	r0, 8004a88 <__swbuf_r+0x90>
 8004a3a:	68a3      	ldr	r3, [r4, #8]
 8004a3c:	3b01      	subs	r3, #1
 8004a3e:	60a3      	str	r3, [r4, #8]
 8004a40:	6823      	ldr	r3, [r4, #0]
 8004a42:	1c5a      	adds	r2, r3, #1
 8004a44:	6022      	str	r2, [r4, #0]
 8004a46:	701e      	strb	r6, [r3, #0]
 8004a48:	6963      	ldr	r3, [r4, #20]
 8004a4a:	3001      	adds	r0, #1
 8004a4c:	4283      	cmp	r3, r0
 8004a4e:	d004      	beq.n	8004a5a <__swbuf_r+0x62>
 8004a50:	89a3      	ldrh	r3, [r4, #12]
 8004a52:	07db      	lsls	r3, r3, #31
 8004a54:	d506      	bpl.n	8004a64 <__swbuf_r+0x6c>
 8004a56:	2e0a      	cmp	r6, #10
 8004a58:	d104      	bne.n	8004a64 <__swbuf_r+0x6c>
 8004a5a:	4621      	mov	r1, r4
 8004a5c:	4628      	mov	r0, r5
 8004a5e:	f000 f911 	bl	8004c84 <_fflush_r>
 8004a62:	b988      	cbnz	r0, 8004a88 <__swbuf_r+0x90>
 8004a64:	4638      	mov	r0, r7
 8004a66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004a68:	4b0a      	ldr	r3, [pc, #40]	; (8004a94 <__swbuf_r+0x9c>)
 8004a6a:	429c      	cmp	r4, r3
 8004a6c:	d101      	bne.n	8004a72 <__swbuf_r+0x7a>
 8004a6e:	68ac      	ldr	r4, [r5, #8]
 8004a70:	e7cf      	b.n	8004a12 <__swbuf_r+0x1a>
 8004a72:	4b09      	ldr	r3, [pc, #36]	; (8004a98 <__swbuf_r+0xa0>)
 8004a74:	429c      	cmp	r4, r3
 8004a76:	bf08      	it	eq
 8004a78:	68ec      	ldreq	r4, [r5, #12]
 8004a7a:	e7ca      	b.n	8004a12 <__swbuf_r+0x1a>
 8004a7c:	4621      	mov	r1, r4
 8004a7e:	4628      	mov	r0, r5
 8004a80:	f000 f80c 	bl	8004a9c <__swsetup_r>
 8004a84:	2800      	cmp	r0, #0
 8004a86:	d0cb      	beq.n	8004a20 <__swbuf_r+0x28>
 8004a88:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8004a8c:	e7ea      	b.n	8004a64 <__swbuf_r+0x6c>
 8004a8e:	bf00      	nop
 8004a90:	08005a7c 	.word	0x08005a7c
 8004a94:	08005a9c 	.word	0x08005a9c
 8004a98:	08005a5c 	.word	0x08005a5c

08004a9c <__swsetup_r>:
 8004a9c:	4b32      	ldr	r3, [pc, #200]	; (8004b68 <__swsetup_r+0xcc>)
 8004a9e:	b570      	push	{r4, r5, r6, lr}
 8004aa0:	681d      	ldr	r5, [r3, #0]
 8004aa2:	4606      	mov	r6, r0
 8004aa4:	460c      	mov	r4, r1
 8004aa6:	b125      	cbz	r5, 8004ab2 <__swsetup_r+0x16>
 8004aa8:	69ab      	ldr	r3, [r5, #24]
 8004aaa:	b913      	cbnz	r3, 8004ab2 <__swsetup_r+0x16>
 8004aac:	4628      	mov	r0, r5
 8004aae:	f000 f97d 	bl	8004dac <__sinit>
 8004ab2:	4b2e      	ldr	r3, [pc, #184]	; (8004b6c <__swsetup_r+0xd0>)
 8004ab4:	429c      	cmp	r4, r3
 8004ab6:	d10f      	bne.n	8004ad8 <__swsetup_r+0x3c>
 8004ab8:	686c      	ldr	r4, [r5, #4]
 8004aba:	89a3      	ldrh	r3, [r4, #12]
 8004abc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004ac0:	0719      	lsls	r1, r3, #28
 8004ac2:	d42c      	bmi.n	8004b1e <__swsetup_r+0x82>
 8004ac4:	06dd      	lsls	r5, r3, #27
 8004ac6:	d411      	bmi.n	8004aec <__swsetup_r+0x50>
 8004ac8:	2309      	movs	r3, #9
 8004aca:	6033      	str	r3, [r6, #0]
 8004acc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004ad0:	81a3      	strh	r3, [r4, #12]
 8004ad2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004ad6:	e03e      	b.n	8004b56 <__swsetup_r+0xba>
 8004ad8:	4b25      	ldr	r3, [pc, #148]	; (8004b70 <__swsetup_r+0xd4>)
 8004ada:	429c      	cmp	r4, r3
 8004adc:	d101      	bne.n	8004ae2 <__swsetup_r+0x46>
 8004ade:	68ac      	ldr	r4, [r5, #8]
 8004ae0:	e7eb      	b.n	8004aba <__swsetup_r+0x1e>
 8004ae2:	4b24      	ldr	r3, [pc, #144]	; (8004b74 <__swsetup_r+0xd8>)
 8004ae4:	429c      	cmp	r4, r3
 8004ae6:	bf08      	it	eq
 8004ae8:	68ec      	ldreq	r4, [r5, #12]
 8004aea:	e7e6      	b.n	8004aba <__swsetup_r+0x1e>
 8004aec:	0758      	lsls	r0, r3, #29
 8004aee:	d512      	bpl.n	8004b16 <__swsetup_r+0x7a>
 8004af0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004af2:	b141      	cbz	r1, 8004b06 <__swsetup_r+0x6a>
 8004af4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004af8:	4299      	cmp	r1, r3
 8004afa:	d002      	beq.n	8004b02 <__swsetup_r+0x66>
 8004afc:	4630      	mov	r0, r6
 8004afe:	f000 fa5b 	bl	8004fb8 <_free_r>
 8004b02:	2300      	movs	r3, #0
 8004b04:	6363      	str	r3, [r4, #52]	; 0x34
 8004b06:	89a3      	ldrh	r3, [r4, #12]
 8004b08:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004b0c:	81a3      	strh	r3, [r4, #12]
 8004b0e:	2300      	movs	r3, #0
 8004b10:	6063      	str	r3, [r4, #4]
 8004b12:	6923      	ldr	r3, [r4, #16]
 8004b14:	6023      	str	r3, [r4, #0]
 8004b16:	89a3      	ldrh	r3, [r4, #12]
 8004b18:	f043 0308 	orr.w	r3, r3, #8
 8004b1c:	81a3      	strh	r3, [r4, #12]
 8004b1e:	6923      	ldr	r3, [r4, #16]
 8004b20:	b94b      	cbnz	r3, 8004b36 <__swsetup_r+0x9a>
 8004b22:	89a3      	ldrh	r3, [r4, #12]
 8004b24:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004b28:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004b2c:	d003      	beq.n	8004b36 <__swsetup_r+0x9a>
 8004b2e:	4621      	mov	r1, r4
 8004b30:	4630      	mov	r0, r6
 8004b32:	f000 fa01 	bl	8004f38 <__smakebuf_r>
 8004b36:	89a0      	ldrh	r0, [r4, #12]
 8004b38:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004b3c:	f010 0301 	ands.w	r3, r0, #1
 8004b40:	d00a      	beq.n	8004b58 <__swsetup_r+0xbc>
 8004b42:	2300      	movs	r3, #0
 8004b44:	60a3      	str	r3, [r4, #8]
 8004b46:	6963      	ldr	r3, [r4, #20]
 8004b48:	425b      	negs	r3, r3
 8004b4a:	61a3      	str	r3, [r4, #24]
 8004b4c:	6923      	ldr	r3, [r4, #16]
 8004b4e:	b943      	cbnz	r3, 8004b62 <__swsetup_r+0xc6>
 8004b50:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004b54:	d1ba      	bne.n	8004acc <__swsetup_r+0x30>
 8004b56:	bd70      	pop	{r4, r5, r6, pc}
 8004b58:	0781      	lsls	r1, r0, #30
 8004b5a:	bf58      	it	pl
 8004b5c:	6963      	ldrpl	r3, [r4, #20]
 8004b5e:	60a3      	str	r3, [r4, #8]
 8004b60:	e7f4      	b.n	8004b4c <__swsetup_r+0xb0>
 8004b62:	2000      	movs	r0, #0
 8004b64:	e7f7      	b.n	8004b56 <__swsetup_r+0xba>
 8004b66:	bf00      	nop
 8004b68:	20000010 	.word	0x20000010
 8004b6c:	08005a7c 	.word	0x08005a7c
 8004b70:	08005a9c 	.word	0x08005a9c
 8004b74:	08005a5c 	.word	0x08005a5c

08004b78 <__sflush_r>:
 8004b78:	898a      	ldrh	r2, [r1, #12]
 8004b7a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004b7e:	4605      	mov	r5, r0
 8004b80:	0710      	lsls	r0, r2, #28
 8004b82:	460c      	mov	r4, r1
 8004b84:	d458      	bmi.n	8004c38 <__sflush_r+0xc0>
 8004b86:	684b      	ldr	r3, [r1, #4]
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	dc05      	bgt.n	8004b98 <__sflush_r+0x20>
 8004b8c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	dc02      	bgt.n	8004b98 <__sflush_r+0x20>
 8004b92:	2000      	movs	r0, #0
 8004b94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004b98:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004b9a:	2e00      	cmp	r6, #0
 8004b9c:	d0f9      	beq.n	8004b92 <__sflush_r+0x1a>
 8004b9e:	2300      	movs	r3, #0
 8004ba0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004ba4:	682f      	ldr	r7, [r5, #0]
 8004ba6:	602b      	str	r3, [r5, #0]
 8004ba8:	d032      	beq.n	8004c10 <__sflush_r+0x98>
 8004baa:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004bac:	89a3      	ldrh	r3, [r4, #12]
 8004bae:	075a      	lsls	r2, r3, #29
 8004bb0:	d505      	bpl.n	8004bbe <__sflush_r+0x46>
 8004bb2:	6863      	ldr	r3, [r4, #4]
 8004bb4:	1ac0      	subs	r0, r0, r3
 8004bb6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004bb8:	b10b      	cbz	r3, 8004bbe <__sflush_r+0x46>
 8004bba:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004bbc:	1ac0      	subs	r0, r0, r3
 8004bbe:	2300      	movs	r3, #0
 8004bc0:	4602      	mov	r2, r0
 8004bc2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004bc4:	6a21      	ldr	r1, [r4, #32]
 8004bc6:	4628      	mov	r0, r5
 8004bc8:	47b0      	blx	r6
 8004bca:	1c43      	adds	r3, r0, #1
 8004bcc:	89a3      	ldrh	r3, [r4, #12]
 8004bce:	d106      	bne.n	8004bde <__sflush_r+0x66>
 8004bd0:	6829      	ldr	r1, [r5, #0]
 8004bd2:	291d      	cmp	r1, #29
 8004bd4:	d82c      	bhi.n	8004c30 <__sflush_r+0xb8>
 8004bd6:	4a2a      	ldr	r2, [pc, #168]	; (8004c80 <__sflush_r+0x108>)
 8004bd8:	40ca      	lsrs	r2, r1
 8004bda:	07d6      	lsls	r6, r2, #31
 8004bdc:	d528      	bpl.n	8004c30 <__sflush_r+0xb8>
 8004bde:	2200      	movs	r2, #0
 8004be0:	6062      	str	r2, [r4, #4]
 8004be2:	04d9      	lsls	r1, r3, #19
 8004be4:	6922      	ldr	r2, [r4, #16]
 8004be6:	6022      	str	r2, [r4, #0]
 8004be8:	d504      	bpl.n	8004bf4 <__sflush_r+0x7c>
 8004bea:	1c42      	adds	r2, r0, #1
 8004bec:	d101      	bne.n	8004bf2 <__sflush_r+0x7a>
 8004bee:	682b      	ldr	r3, [r5, #0]
 8004bf0:	b903      	cbnz	r3, 8004bf4 <__sflush_r+0x7c>
 8004bf2:	6560      	str	r0, [r4, #84]	; 0x54
 8004bf4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004bf6:	602f      	str	r7, [r5, #0]
 8004bf8:	2900      	cmp	r1, #0
 8004bfa:	d0ca      	beq.n	8004b92 <__sflush_r+0x1a>
 8004bfc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004c00:	4299      	cmp	r1, r3
 8004c02:	d002      	beq.n	8004c0a <__sflush_r+0x92>
 8004c04:	4628      	mov	r0, r5
 8004c06:	f000 f9d7 	bl	8004fb8 <_free_r>
 8004c0a:	2000      	movs	r0, #0
 8004c0c:	6360      	str	r0, [r4, #52]	; 0x34
 8004c0e:	e7c1      	b.n	8004b94 <__sflush_r+0x1c>
 8004c10:	6a21      	ldr	r1, [r4, #32]
 8004c12:	2301      	movs	r3, #1
 8004c14:	4628      	mov	r0, r5
 8004c16:	47b0      	blx	r6
 8004c18:	1c41      	adds	r1, r0, #1
 8004c1a:	d1c7      	bne.n	8004bac <__sflush_r+0x34>
 8004c1c:	682b      	ldr	r3, [r5, #0]
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d0c4      	beq.n	8004bac <__sflush_r+0x34>
 8004c22:	2b1d      	cmp	r3, #29
 8004c24:	d001      	beq.n	8004c2a <__sflush_r+0xb2>
 8004c26:	2b16      	cmp	r3, #22
 8004c28:	d101      	bne.n	8004c2e <__sflush_r+0xb6>
 8004c2a:	602f      	str	r7, [r5, #0]
 8004c2c:	e7b1      	b.n	8004b92 <__sflush_r+0x1a>
 8004c2e:	89a3      	ldrh	r3, [r4, #12]
 8004c30:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004c34:	81a3      	strh	r3, [r4, #12]
 8004c36:	e7ad      	b.n	8004b94 <__sflush_r+0x1c>
 8004c38:	690f      	ldr	r7, [r1, #16]
 8004c3a:	2f00      	cmp	r7, #0
 8004c3c:	d0a9      	beq.n	8004b92 <__sflush_r+0x1a>
 8004c3e:	0793      	lsls	r3, r2, #30
 8004c40:	680e      	ldr	r6, [r1, #0]
 8004c42:	bf08      	it	eq
 8004c44:	694b      	ldreq	r3, [r1, #20]
 8004c46:	600f      	str	r7, [r1, #0]
 8004c48:	bf18      	it	ne
 8004c4a:	2300      	movne	r3, #0
 8004c4c:	eba6 0807 	sub.w	r8, r6, r7
 8004c50:	608b      	str	r3, [r1, #8]
 8004c52:	f1b8 0f00 	cmp.w	r8, #0
 8004c56:	dd9c      	ble.n	8004b92 <__sflush_r+0x1a>
 8004c58:	6a21      	ldr	r1, [r4, #32]
 8004c5a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004c5c:	4643      	mov	r3, r8
 8004c5e:	463a      	mov	r2, r7
 8004c60:	4628      	mov	r0, r5
 8004c62:	47b0      	blx	r6
 8004c64:	2800      	cmp	r0, #0
 8004c66:	dc06      	bgt.n	8004c76 <__sflush_r+0xfe>
 8004c68:	89a3      	ldrh	r3, [r4, #12]
 8004c6a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004c6e:	81a3      	strh	r3, [r4, #12]
 8004c70:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004c74:	e78e      	b.n	8004b94 <__sflush_r+0x1c>
 8004c76:	4407      	add	r7, r0
 8004c78:	eba8 0800 	sub.w	r8, r8, r0
 8004c7c:	e7e9      	b.n	8004c52 <__sflush_r+0xda>
 8004c7e:	bf00      	nop
 8004c80:	20400001 	.word	0x20400001

08004c84 <_fflush_r>:
 8004c84:	b538      	push	{r3, r4, r5, lr}
 8004c86:	690b      	ldr	r3, [r1, #16]
 8004c88:	4605      	mov	r5, r0
 8004c8a:	460c      	mov	r4, r1
 8004c8c:	b913      	cbnz	r3, 8004c94 <_fflush_r+0x10>
 8004c8e:	2500      	movs	r5, #0
 8004c90:	4628      	mov	r0, r5
 8004c92:	bd38      	pop	{r3, r4, r5, pc}
 8004c94:	b118      	cbz	r0, 8004c9e <_fflush_r+0x1a>
 8004c96:	6983      	ldr	r3, [r0, #24]
 8004c98:	b90b      	cbnz	r3, 8004c9e <_fflush_r+0x1a>
 8004c9a:	f000 f887 	bl	8004dac <__sinit>
 8004c9e:	4b14      	ldr	r3, [pc, #80]	; (8004cf0 <_fflush_r+0x6c>)
 8004ca0:	429c      	cmp	r4, r3
 8004ca2:	d11b      	bne.n	8004cdc <_fflush_r+0x58>
 8004ca4:	686c      	ldr	r4, [r5, #4]
 8004ca6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d0ef      	beq.n	8004c8e <_fflush_r+0xa>
 8004cae:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004cb0:	07d0      	lsls	r0, r2, #31
 8004cb2:	d404      	bmi.n	8004cbe <_fflush_r+0x3a>
 8004cb4:	0599      	lsls	r1, r3, #22
 8004cb6:	d402      	bmi.n	8004cbe <_fflush_r+0x3a>
 8004cb8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004cba:	f000 f915 	bl	8004ee8 <__retarget_lock_acquire_recursive>
 8004cbe:	4628      	mov	r0, r5
 8004cc0:	4621      	mov	r1, r4
 8004cc2:	f7ff ff59 	bl	8004b78 <__sflush_r>
 8004cc6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004cc8:	07da      	lsls	r2, r3, #31
 8004cca:	4605      	mov	r5, r0
 8004ccc:	d4e0      	bmi.n	8004c90 <_fflush_r+0xc>
 8004cce:	89a3      	ldrh	r3, [r4, #12]
 8004cd0:	059b      	lsls	r3, r3, #22
 8004cd2:	d4dd      	bmi.n	8004c90 <_fflush_r+0xc>
 8004cd4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004cd6:	f000 f908 	bl	8004eea <__retarget_lock_release_recursive>
 8004cda:	e7d9      	b.n	8004c90 <_fflush_r+0xc>
 8004cdc:	4b05      	ldr	r3, [pc, #20]	; (8004cf4 <_fflush_r+0x70>)
 8004cde:	429c      	cmp	r4, r3
 8004ce0:	d101      	bne.n	8004ce6 <_fflush_r+0x62>
 8004ce2:	68ac      	ldr	r4, [r5, #8]
 8004ce4:	e7df      	b.n	8004ca6 <_fflush_r+0x22>
 8004ce6:	4b04      	ldr	r3, [pc, #16]	; (8004cf8 <_fflush_r+0x74>)
 8004ce8:	429c      	cmp	r4, r3
 8004cea:	bf08      	it	eq
 8004cec:	68ec      	ldreq	r4, [r5, #12]
 8004cee:	e7da      	b.n	8004ca6 <_fflush_r+0x22>
 8004cf0:	08005a7c 	.word	0x08005a7c
 8004cf4:	08005a9c 	.word	0x08005a9c
 8004cf8:	08005a5c 	.word	0x08005a5c

08004cfc <std>:
 8004cfc:	2300      	movs	r3, #0
 8004cfe:	b510      	push	{r4, lr}
 8004d00:	4604      	mov	r4, r0
 8004d02:	e9c0 3300 	strd	r3, r3, [r0]
 8004d06:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004d0a:	6083      	str	r3, [r0, #8]
 8004d0c:	8181      	strh	r1, [r0, #12]
 8004d0e:	6643      	str	r3, [r0, #100]	; 0x64
 8004d10:	81c2      	strh	r2, [r0, #14]
 8004d12:	6183      	str	r3, [r0, #24]
 8004d14:	4619      	mov	r1, r3
 8004d16:	2208      	movs	r2, #8
 8004d18:	305c      	adds	r0, #92	; 0x5c
 8004d1a:	f7ff fdd7 	bl	80048cc <memset>
 8004d1e:	4b05      	ldr	r3, [pc, #20]	; (8004d34 <std+0x38>)
 8004d20:	6263      	str	r3, [r4, #36]	; 0x24
 8004d22:	4b05      	ldr	r3, [pc, #20]	; (8004d38 <std+0x3c>)
 8004d24:	62a3      	str	r3, [r4, #40]	; 0x28
 8004d26:	4b05      	ldr	r3, [pc, #20]	; (8004d3c <std+0x40>)
 8004d28:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004d2a:	4b05      	ldr	r3, [pc, #20]	; (8004d40 <std+0x44>)
 8004d2c:	6224      	str	r4, [r4, #32]
 8004d2e:	6323      	str	r3, [r4, #48]	; 0x30
 8004d30:	bd10      	pop	{r4, pc}
 8004d32:	bf00      	nop
 8004d34:	08005775 	.word	0x08005775
 8004d38:	08005797 	.word	0x08005797
 8004d3c:	080057cf 	.word	0x080057cf
 8004d40:	080057f3 	.word	0x080057f3

08004d44 <_cleanup_r>:
 8004d44:	4901      	ldr	r1, [pc, #4]	; (8004d4c <_cleanup_r+0x8>)
 8004d46:	f000 b8af 	b.w	8004ea8 <_fwalk_reent>
 8004d4a:	bf00      	nop
 8004d4c:	08004c85 	.word	0x08004c85

08004d50 <__sfmoreglue>:
 8004d50:	b570      	push	{r4, r5, r6, lr}
 8004d52:	2268      	movs	r2, #104	; 0x68
 8004d54:	1e4d      	subs	r5, r1, #1
 8004d56:	4355      	muls	r5, r2
 8004d58:	460e      	mov	r6, r1
 8004d5a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8004d5e:	f000 f997 	bl	8005090 <_malloc_r>
 8004d62:	4604      	mov	r4, r0
 8004d64:	b140      	cbz	r0, 8004d78 <__sfmoreglue+0x28>
 8004d66:	2100      	movs	r1, #0
 8004d68:	e9c0 1600 	strd	r1, r6, [r0]
 8004d6c:	300c      	adds	r0, #12
 8004d6e:	60a0      	str	r0, [r4, #8]
 8004d70:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004d74:	f7ff fdaa 	bl	80048cc <memset>
 8004d78:	4620      	mov	r0, r4
 8004d7a:	bd70      	pop	{r4, r5, r6, pc}

08004d7c <__sfp_lock_acquire>:
 8004d7c:	4801      	ldr	r0, [pc, #4]	; (8004d84 <__sfp_lock_acquire+0x8>)
 8004d7e:	f000 b8b3 	b.w	8004ee8 <__retarget_lock_acquire_recursive>
 8004d82:	bf00      	nop
 8004d84:	2000ba85 	.word	0x2000ba85

08004d88 <__sfp_lock_release>:
 8004d88:	4801      	ldr	r0, [pc, #4]	; (8004d90 <__sfp_lock_release+0x8>)
 8004d8a:	f000 b8ae 	b.w	8004eea <__retarget_lock_release_recursive>
 8004d8e:	bf00      	nop
 8004d90:	2000ba85 	.word	0x2000ba85

08004d94 <__sinit_lock_acquire>:
 8004d94:	4801      	ldr	r0, [pc, #4]	; (8004d9c <__sinit_lock_acquire+0x8>)
 8004d96:	f000 b8a7 	b.w	8004ee8 <__retarget_lock_acquire_recursive>
 8004d9a:	bf00      	nop
 8004d9c:	2000ba86 	.word	0x2000ba86

08004da0 <__sinit_lock_release>:
 8004da0:	4801      	ldr	r0, [pc, #4]	; (8004da8 <__sinit_lock_release+0x8>)
 8004da2:	f000 b8a2 	b.w	8004eea <__retarget_lock_release_recursive>
 8004da6:	bf00      	nop
 8004da8:	2000ba86 	.word	0x2000ba86

08004dac <__sinit>:
 8004dac:	b510      	push	{r4, lr}
 8004dae:	4604      	mov	r4, r0
 8004db0:	f7ff fff0 	bl	8004d94 <__sinit_lock_acquire>
 8004db4:	69a3      	ldr	r3, [r4, #24]
 8004db6:	b11b      	cbz	r3, 8004dc0 <__sinit+0x14>
 8004db8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004dbc:	f7ff bff0 	b.w	8004da0 <__sinit_lock_release>
 8004dc0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8004dc4:	6523      	str	r3, [r4, #80]	; 0x50
 8004dc6:	4b13      	ldr	r3, [pc, #76]	; (8004e14 <__sinit+0x68>)
 8004dc8:	4a13      	ldr	r2, [pc, #76]	; (8004e18 <__sinit+0x6c>)
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	62a2      	str	r2, [r4, #40]	; 0x28
 8004dce:	42a3      	cmp	r3, r4
 8004dd0:	bf04      	itt	eq
 8004dd2:	2301      	moveq	r3, #1
 8004dd4:	61a3      	streq	r3, [r4, #24]
 8004dd6:	4620      	mov	r0, r4
 8004dd8:	f000 f820 	bl	8004e1c <__sfp>
 8004ddc:	6060      	str	r0, [r4, #4]
 8004dde:	4620      	mov	r0, r4
 8004de0:	f000 f81c 	bl	8004e1c <__sfp>
 8004de4:	60a0      	str	r0, [r4, #8]
 8004de6:	4620      	mov	r0, r4
 8004de8:	f000 f818 	bl	8004e1c <__sfp>
 8004dec:	2200      	movs	r2, #0
 8004dee:	60e0      	str	r0, [r4, #12]
 8004df0:	2104      	movs	r1, #4
 8004df2:	6860      	ldr	r0, [r4, #4]
 8004df4:	f7ff ff82 	bl	8004cfc <std>
 8004df8:	68a0      	ldr	r0, [r4, #8]
 8004dfa:	2201      	movs	r2, #1
 8004dfc:	2109      	movs	r1, #9
 8004dfe:	f7ff ff7d 	bl	8004cfc <std>
 8004e02:	68e0      	ldr	r0, [r4, #12]
 8004e04:	2202      	movs	r2, #2
 8004e06:	2112      	movs	r1, #18
 8004e08:	f7ff ff78 	bl	8004cfc <std>
 8004e0c:	2301      	movs	r3, #1
 8004e0e:	61a3      	str	r3, [r4, #24]
 8004e10:	e7d2      	b.n	8004db8 <__sinit+0xc>
 8004e12:	bf00      	nop
 8004e14:	08005a58 	.word	0x08005a58
 8004e18:	08004d45 	.word	0x08004d45

08004e1c <__sfp>:
 8004e1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e1e:	4607      	mov	r7, r0
 8004e20:	f7ff ffac 	bl	8004d7c <__sfp_lock_acquire>
 8004e24:	4b1e      	ldr	r3, [pc, #120]	; (8004ea0 <__sfp+0x84>)
 8004e26:	681e      	ldr	r6, [r3, #0]
 8004e28:	69b3      	ldr	r3, [r6, #24]
 8004e2a:	b913      	cbnz	r3, 8004e32 <__sfp+0x16>
 8004e2c:	4630      	mov	r0, r6
 8004e2e:	f7ff ffbd 	bl	8004dac <__sinit>
 8004e32:	3648      	adds	r6, #72	; 0x48
 8004e34:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8004e38:	3b01      	subs	r3, #1
 8004e3a:	d503      	bpl.n	8004e44 <__sfp+0x28>
 8004e3c:	6833      	ldr	r3, [r6, #0]
 8004e3e:	b30b      	cbz	r3, 8004e84 <__sfp+0x68>
 8004e40:	6836      	ldr	r6, [r6, #0]
 8004e42:	e7f7      	b.n	8004e34 <__sfp+0x18>
 8004e44:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004e48:	b9d5      	cbnz	r5, 8004e80 <__sfp+0x64>
 8004e4a:	4b16      	ldr	r3, [pc, #88]	; (8004ea4 <__sfp+0x88>)
 8004e4c:	60e3      	str	r3, [r4, #12]
 8004e4e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8004e52:	6665      	str	r5, [r4, #100]	; 0x64
 8004e54:	f000 f847 	bl	8004ee6 <__retarget_lock_init_recursive>
 8004e58:	f7ff ff96 	bl	8004d88 <__sfp_lock_release>
 8004e5c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8004e60:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8004e64:	6025      	str	r5, [r4, #0]
 8004e66:	61a5      	str	r5, [r4, #24]
 8004e68:	2208      	movs	r2, #8
 8004e6a:	4629      	mov	r1, r5
 8004e6c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004e70:	f7ff fd2c 	bl	80048cc <memset>
 8004e74:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8004e78:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8004e7c:	4620      	mov	r0, r4
 8004e7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004e80:	3468      	adds	r4, #104	; 0x68
 8004e82:	e7d9      	b.n	8004e38 <__sfp+0x1c>
 8004e84:	2104      	movs	r1, #4
 8004e86:	4638      	mov	r0, r7
 8004e88:	f7ff ff62 	bl	8004d50 <__sfmoreglue>
 8004e8c:	4604      	mov	r4, r0
 8004e8e:	6030      	str	r0, [r6, #0]
 8004e90:	2800      	cmp	r0, #0
 8004e92:	d1d5      	bne.n	8004e40 <__sfp+0x24>
 8004e94:	f7ff ff78 	bl	8004d88 <__sfp_lock_release>
 8004e98:	230c      	movs	r3, #12
 8004e9a:	603b      	str	r3, [r7, #0]
 8004e9c:	e7ee      	b.n	8004e7c <__sfp+0x60>
 8004e9e:	bf00      	nop
 8004ea0:	08005a58 	.word	0x08005a58
 8004ea4:	ffff0001 	.word	0xffff0001

08004ea8 <_fwalk_reent>:
 8004ea8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004eac:	4606      	mov	r6, r0
 8004eae:	4688      	mov	r8, r1
 8004eb0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8004eb4:	2700      	movs	r7, #0
 8004eb6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004eba:	f1b9 0901 	subs.w	r9, r9, #1
 8004ebe:	d505      	bpl.n	8004ecc <_fwalk_reent+0x24>
 8004ec0:	6824      	ldr	r4, [r4, #0]
 8004ec2:	2c00      	cmp	r4, #0
 8004ec4:	d1f7      	bne.n	8004eb6 <_fwalk_reent+0xe>
 8004ec6:	4638      	mov	r0, r7
 8004ec8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004ecc:	89ab      	ldrh	r3, [r5, #12]
 8004ece:	2b01      	cmp	r3, #1
 8004ed0:	d907      	bls.n	8004ee2 <_fwalk_reent+0x3a>
 8004ed2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004ed6:	3301      	adds	r3, #1
 8004ed8:	d003      	beq.n	8004ee2 <_fwalk_reent+0x3a>
 8004eda:	4629      	mov	r1, r5
 8004edc:	4630      	mov	r0, r6
 8004ede:	47c0      	blx	r8
 8004ee0:	4307      	orrs	r7, r0
 8004ee2:	3568      	adds	r5, #104	; 0x68
 8004ee4:	e7e9      	b.n	8004eba <_fwalk_reent+0x12>

08004ee6 <__retarget_lock_init_recursive>:
 8004ee6:	4770      	bx	lr

08004ee8 <__retarget_lock_acquire_recursive>:
 8004ee8:	4770      	bx	lr

08004eea <__retarget_lock_release_recursive>:
 8004eea:	4770      	bx	lr

08004eec <__swhatbuf_r>:
 8004eec:	b570      	push	{r4, r5, r6, lr}
 8004eee:	460e      	mov	r6, r1
 8004ef0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004ef4:	2900      	cmp	r1, #0
 8004ef6:	b096      	sub	sp, #88	; 0x58
 8004ef8:	4614      	mov	r4, r2
 8004efa:	461d      	mov	r5, r3
 8004efc:	da08      	bge.n	8004f10 <__swhatbuf_r+0x24>
 8004efe:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8004f02:	2200      	movs	r2, #0
 8004f04:	602a      	str	r2, [r5, #0]
 8004f06:	061a      	lsls	r2, r3, #24
 8004f08:	d410      	bmi.n	8004f2c <__swhatbuf_r+0x40>
 8004f0a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004f0e:	e00e      	b.n	8004f2e <__swhatbuf_r+0x42>
 8004f10:	466a      	mov	r2, sp
 8004f12:	f000 fc95 	bl	8005840 <_fstat_r>
 8004f16:	2800      	cmp	r0, #0
 8004f18:	dbf1      	blt.n	8004efe <__swhatbuf_r+0x12>
 8004f1a:	9a01      	ldr	r2, [sp, #4]
 8004f1c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8004f20:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8004f24:	425a      	negs	r2, r3
 8004f26:	415a      	adcs	r2, r3
 8004f28:	602a      	str	r2, [r5, #0]
 8004f2a:	e7ee      	b.n	8004f0a <__swhatbuf_r+0x1e>
 8004f2c:	2340      	movs	r3, #64	; 0x40
 8004f2e:	2000      	movs	r0, #0
 8004f30:	6023      	str	r3, [r4, #0]
 8004f32:	b016      	add	sp, #88	; 0x58
 8004f34:	bd70      	pop	{r4, r5, r6, pc}
	...

08004f38 <__smakebuf_r>:
 8004f38:	898b      	ldrh	r3, [r1, #12]
 8004f3a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004f3c:	079d      	lsls	r5, r3, #30
 8004f3e:	4606      	mov	r6, r0
 8004f40:	460c      	mov	r4, r1
 8004f42:	d507      	bpl.n	8004f54 <__smakebuf_r+0x1c>
 8004f44:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004f48:	6023      	str	r3, [r4, #0]
 8004f4a:	6123      	str	r3, [r4, #16]
 8004f4c:	2301      	movs	r3, #1
 8004f4e:	6163      	str	r3, [r4, #20]
 8004f50:	b002      	add	sp, #8
 8004f52:	bd70      	pop	{r4, r5, r6, pc}
 8004f54:	ab01      	add	r3, sp, #4
 8004f56:	466a      	mov	r2, sp
 8004f58:	f7ff ffc8 	bl	8004eec <__swhatbuf_r>
 8004f5c:	9900      	ldr	r1, [sp, #0]
 8004f5e:	4605      	mov	r5, r0
 8004f60:	4630      	mov	r0, r6
 8004f62:	f000 f895 	bl	8005090 <_malloc_r>
 8004f66:	b948      	cbnz	r0, 8004f7c <__smakebuf_r+0x44>
 8004f68:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004f6c:	059a      	lsls	r2, r3, #22
 8004f6e:	d4ef      	bmi.n	8004f50 <__smakebuf_r+0x18>
 8004f70:	f023 0303 	bic.w	r3, r3, #3
 8004f74:	f043 0302 	orr.w	r3, r3, #2
 8004f78:	81a3      	strh	r3, [r4, #12]
 8004f7a:	e7e3      	b.n	8004f44 <__smakebuf_r+0xc>
 8004f7c:	4b0d      	ldr	r3, [pc, #52]	; (8004fb4 <__smakebuf_r+0x7c>)
 8004f7e:	62b3      	str	r3, [r6, #40]	; 0x28
 8004f80:	89a3      	ldrh	r3, [r4, #12]
 8004f82:	6020      	str	r0, [r4, #0]
 8004f84:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004f88:	81a3      	strh	r3, [r4, #12]
 8004f8a:	9b00      	ldr	r3, [sp, #0]
 8004f8c:	6163      	str	r3, [r4, #20]
 8004f8e:	9b01      	ldr	r3, [sp, #4]
 8004f90:	6120      	str	r0, [r4, #16]
 8004f92:	b15b      	cbz	r3, 8004fac <__smakebuf_r+0x74>
 8004f94:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004f98:	4630      	mov	r0, r6
 8004f9a:	f000 fc63 	bl	8005864 <_isatty_r>
 8004f9e:	b128      	cbz	r0, 8004fac <__smakebuf_r+0x74>
 8004fa0:	89a3      	ldrh	r3, [r4, #12]
 8004fa2:	f023 0303 	bic.w	r3, r3, #3
 8004fa6:	f043 0301 	orr.w	r3, r3, #1
 8004faa:	81a3      	strh	r3, [r4, #12]
 8004fac:	89a0      	ldrh	r0, [r4, #12]
 8004fae:	4305      	orrs	r5, r0
 8004fb0:	81a5      	strh	r5, [r4, #12]
 8004fb2:	e7cd      	b.n	8004f50 <__smakebuf_r+0x18>
 8004fb4:	08004d45 	.word	0x08004d45

08004fb8 <_free_r>:
 8004fb8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004fba:	2900      	cmp	r1, #0
 8004fbc:	d044      	beq.n	8005048 <_free_r+0x90>
 8004fbe:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004fc2:	9001      	str	r0, [sp, #4]
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	f1a1 0404 	sub.w	r4, r1, #4
 8004fca:	bfb8      	it	lt
 8004fcc:	18e4      	addlt	r4, r4, r3
 8004fce:	f000 fc6b 	bl	80058a8 <__malloc_lock>
 8004fd2:	4a1e      	ldr	r2, [pc, #120]	; (800504c <_free_r+0x94>)
 8004fd4:	9801      	ldr	r0, [sp, #4]
 8004fd6:	6813      	ldr	r3, [r2, #0]
 8004fd8:	b933      	cbnz	r3, 8004fe8 <_free_r+0x30>
 8004fda:	6063      	str	r3, [r4, #4]
 8004fdc:	6014      	str	r4, [r2, #0]
 8004fde:	b003      	add	sp, #12
 8004fe0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004fe4:	f000 bc66 	b.w	80058b4 <__malloc_unlock>
 8004fe8:	42a3      	cmp	r3, r4
 8004fea:	d908      	bls.n	8004ffe <_free_r+0x46>
 8004fec:	6825      	ldr	r5, [r4, #0]
 8004fee:	1961      	adds	r1, r4, r5
 8004ff0:	428b      	cmp	r3, r1
 8004ff2:	bf01      	itttt	eq
 8004ff4:	6819      	ldreq	r1, [r3, #0]
 8004ff6:	685b      	ldreq	r3, [r3, #4]
 8004ff8:	1949      	addeq	r1, r1, r5
 8004ffa:	6021      	streq	r1, [r4, #0]
 8004ffc:	e7ed      	b.n	8004fda <_free_r+0x22>
 8004ffe:	461a      	mov	r2, r3
 8005000:	685b      	ldr	r3, [r3, #4]
 8005002:	b10b      	cbz	r3, 8005008 <_free_r+0x50>
 8005004:	42a3      	cmp	r3, r4
 8005006:	d9fa      	bls.n	8004ffe <_free_r+0x46>
 8005008:	6811      	ldr	r1, [r2, #0]
 800500a:	1855      	adds	r5, r2, r1
 800500c:	42a5      	cmp	r5, r4
 800500e:	d10b      	bne.n	8005028 <_free_r+0x70>
 8005010:	6824      	ldr	r4, [r4, #0]
 8005012:	4421      	add	r1, r4
 8005014:	1854      	adds	r4, r2, r1
 8005016:	42a3      	cmp	r3, r4
 8005018:	6011      	str	r1, [r2, #0]
 800501a:	d1e0      	bne.n	8004fde <_free_r+0x26>
 800501c:	681c      	ldr	r4, [r3, #0]
 800501e:	685b      	ldr	r3, [r3, #4]
 8005020:	6053      	str	r3, [r2, #4]
 8005022:	4421      	add	r1, r4
 8005024:	6011      	str	r1, [r2, #0]
 8005026:	e7da      	b.n	8004fde <_free_r+0x26>
 8005028:	d902      	bls.n	8005030 <_free_r+0x78>
 800502a:	230c      	movs	r3, #12
 800502c:	6003      	str	r3, [r0, #0]
 800502e:	e7d6      	b.n	8004fde <_free_r+0x26>
 8005030:	6825      	ldr	r5, [r4, #0]
 8005032:	1961      	adds	r1, r4, r5
 8005034:	428b      	cmp	r3, r1
 8005036:	bf04      	itt	eq
 8005038:	6819      	ldreq	r1, [r3, #0]
 800503a:	685b      	ldreq	r3, [r3, #4]
 800503c:	6063      	str	r3, [r4, #4]
 800503e:	bf04      	itt	eq
 8005040:	1949      	addeq	r1, r1, r5
 8005042:	6021      	streq	r1, [r4, #0]
 8005044:	6054      	str	r4, [r2, #4]
 8005046:	e7ca      	b.n	8004fde <_free_r+0x26>
 8005048:	b003      	add	sp, #12
 800504a:	bd30      	pop	{r4, r5, pc}
 800504c:	2000ba88 	.word	0x2000ba88

08005050 <sbrk_aligned>:
 8005050:	b570      	push	{r4, r5, r6, lr}
 8005052:	4e0e      	ldr	r6, [pc, #56]	; (800508c <sbrk_aligned+0x3c>)
 8005054:	460c      	mov	r4, r1
 8005056:	6831      	ldr	r1, [r6, #0]
 8005058:	4605      	mov	r5, r0
 800505a:	b911      	cbnz	r1, 8005062 <sbrk_aligned+0x12>
 800505c:	f000 fb7a 	bl	8005754 <_sbrk_r>
 8005060:	6030      	str	r0, [r6, #0]
 8005062:	4621      	mov	r1, r4
 8005064:	4628      	mov	r0, r5
 8005066:	f000 fb75 	bl	8005754 <_sbrk_r>
 800506a:	1c43      	adds	r3, r0, #1
 800506c:	d00a      	beq.n	8005084 <sbrk_aligned+0x34>
 800506e:	1cc4      	adds	r4, r0, #3
 8005070:	f024 0403 	bic.w	r4, r4, #3
 8005074:	42a0      	cmp	r0, r4
 8005076:	d007      	beq.n	8005088 <sbrk_aligned+0x38>
 8005078:	1a21      	subs	r1, r4, r0
 800507a:	4628      	mov	r0, r5
 800507c:	f000 fb6a 	bl	8005754 <_sbrk_r>
 8005080:	3001      	adds	r0, #1
 8005082:	d101      	bne.n	8005088 <sbrk_aligned+0x38>
 8005084:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8005088:	4620      	mov	r0, r4
 800508a:	bd70      	pop	{r4, r5, r6, pc}
 800508c:	2000ba8c 	.word	0x2000ba8c

08005090 <_malloc_r>:
 8005090:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005094:	1ccd      	adds	r5, r1, #3
 8005096:	f025 0503 	bic.w	r5, r5, #3
 800509a:	3508      	adds	r5, #8
 800509c:	2d0c      	cmp	r5, #12
 800509e:	bf38      	it	cc
 80050a0:	250c      	movcc	r5, #12
 80050a2:	2d00      	cmp	r5, #0
 80050a4:	4607      	mov	r7, r0
 80050a6:	db01      	blt.n	80050ac <_malloc_r+0x1c>
 80050a8:	42a9      	cmp	r1, r5
 80050aa:	d905      	bls.n	80050b8 <_malloc_r+0x28>
 80050ac:	230c      	movs	r3, #12
 80050ae:	603b      	str	r3, [r7, #0]
 80050b0:	2600      	movs	r6, #0
 80050b2:	4630      	mov	r0, r6
 80050b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80050b8:	4e2e      	ldr	r6, [pc, #184]	; (8005174 <_malloc_r+0xe4>)
 80050ba:	f000 fbf5 	bl	80058a8 <__malloc_lock>
 80050be:	6833      	ldr	r3, [r6, #0]
 80050c0:	461c      	mov	r4, r3
 80050c2:	bb34      	cbnz	r4, 8005112 <_malloc_r+0x82>
 80050c4:	4629      	mov	r1, r5
 80050c6:	4638      	mov	r0, r7
 80050c8:	f7ff ffc2 	bl	8005050 <sbrk_aligned>
 80050cc:	1c43      	adds	r3, r0, #1
 80050ce:	4604      	mov	r4, r0
 80050d0:	d14d      	bne.n	800516e <_malloc_r+0xde>
 80050d2:	6834      	ldr	r4, [r6, #0]
 80050d4:	4626      	mov	r6, r4
 80050d6:	2e00      	cmp	r6, #0
 80050d8:	d140      	bne.n	800515c <_malloc_r+0xcc>
 80050da:	6823      	ldr	r3, [r4, #0]
 80050dc:	4631      	mov	r1, r6
 80050de:	4638      	mov	r0, r7
 80050e0:	eb04 0803 	add.w	r8, r4, r3
 80050e4:	f000 fb36 	bl	8005754 <_sbrk_r>
 80050e8:	4580      	cmp	r8, r0
 80050ea:	d13a      	bne.n	8005162 <_malloc_r+0xd2>
 80050ec:	6821      	ldr	r1, [r4, #0]
 80050ee:	3503      	adds	r5, #3
 80050f0:	1a6d      	subs	r5, r5, r1
 80050f2:	f025 0503 	bic.w	r5, r5, #3
 80050f6:	3508      	adds	r5, #8
 80050f8:	2d0c      	cmp	r5, #12
 80050fa:	bf38      	it	cc
 80050fc:	250c      	movcc	r5, #12
 80050fe:	4629      	mov	r1, r5
 8005100:	4638      	mov	r0, r7
 8005102:	f7ff ffa5 	bl	8005050 <sbrk_aligned>
 8005106:	3001      	adds	r0, #1
 8005108:	d02b      	beq.n	8005162 <_malloc_r+0xd2>
 800510a:	6823      	ldr	r3, [r4, #0]
 800510c:	442b      	add	r3, r5
 800510e:	6023      	str	r3, [r4, #0]
 8005110:	e00e      	b.n	8005130 <_malloc_r+0xa0>
 8005112:	6822      	ldr	r2, [r4, #0]
 8005114:	1b52      	subs	r2, r2, r5
 8005116:	d41e      	bmi.n	8005156 <_malloc_r+0xc6>
 8005118:	2a0b      	cmp	r2, #11
 800511a:	d916      	bls.n	800514a <_malloc_r+0xba>
 800511c:	1961      	adds	r1, r4, r5
 800511e:	42a3      	cmp	r3, r4
 8005120:	6025      	str	r5, [r4, #0]
 8005122:	bf18      	it	ne
 8005124:	6059      	strne	r1, [r3, #4]
 8005126:	6863      	ldr	r3, [r4, #4]
 8005128:	bf08      	it	eq
 800512a:	6031      	streq	r1, [r6, #0]
 800512c:	5162      	str	r2, [r4, r5]
 800512e:	604b      	str	r3, [r1, #4]
 8005130:	4638      	mov	r0, r7
 8005132:	f104 060b 	add.w	r6, r4, #11
 8005136:	f000 fbbd 	bl	80058b4 <__malloc_unlock>
 800513a:	f026 0607 	bic.w	r6, r6, #7
 800513e:	1d23      	adds	r3, r4, #4
 8005140:	1af2      	subs	r2, r6, r3
 8005142:	d0b6      	beq.n	80050b2 <_malloc_r+0x22>
 8005144:	1b9b      	subs	r3, r3, r6
 8005146:	50a3      	str	r3, [r4, r2]
 8005148:	e7b3      	b.n	80050b2 <_malloc_r+0x22>
 800514a:	6862      	ldr	r2, [r4, #4]
 800514c:	42a3      	cmp	r3, r4
 800514e:	bf0c      	ite	eq
 8005150:	6032      	streq	r2, [r6, #0]
 8005152:	605a      	strne	r2, [r3, #4]
 8005154:	e7ec      	b.n	8005130 <_malloc_r+0xa0>
 8005156:	4623      	mov	r3, r4
 8005158:	6864      	ldr	r4, [r4, #4]
 800515a:	e7b2      	b.n	80050c2 <_malloc_r+0x32>
 800515c:	4634      	mov	r4, r6
 800515e:	6876      	ldr	r6, [r6, #4]
 8005160:	e7b9      	b.n	80050d6 <_malloc_r+0x46>
 8005162:	230c      	movs	r3, #12
 8005164:	603b      	str	r3, [r7, #0]
 8005166:	4638      	mov	r0, r7
 8005168:	f000 fba4 	bl	80058b4 <__malloc_unlock>
 800516c:	e7a1      	b.n	80050b2 <_malloc_r+0x22>
 800516e:	6025      	str	r5, [r4, #0]
 8005170:	e7de      	b.n	8005130 <_malloc_r+0xa0>
 8005172:	bf00      	nop
 8005174:	2000ba88 	.word	0x2000ba88

08005178 <__sfputc_r>:
 8005178:	6893      	ldr	r3, [r2, #8]
 800517a:	3b01      	subs	r3, #1
 800517c:	2b00      	cmp	r3, #0
 800517e:	b410      	push	{r4}
 8005180:	6093      	str	r3, [r2, #8]
 8005182:	da08      	bge.n	8005196 <__sfputc_r+0x1e>
 8005184:	6994      	ldr	r4, [r2, #24]
 8005186:	42a3      	cmp	r3, r4
 8005188:	db01      	blt.n	800518e <__sfputc_r+0x16>
 800518a:	290a      	cmp	r1, #10
 800518c:	d103      	bne.n	8005196 <__sfputc_r+0x1e>
 800518e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005192:	f7ff bc31 	b.w	80049f8 <__swbuf_r>
 8005196:	6813      	ldr	r3, [r2, #0]
 8005198:	1c58      	adds	r0, r3, #1
 800519a:	6010      	str	r0, [r2, #0]
 800519c:	7019      	strb	r1, [r3, #0]
 800519e:	4608      	mov	r0, r1
 80051a0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80051a4:	4770      	bx	lr

080051a6 <__sfputs_r>:
 80051a6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80051a8:	4606      	mov	r6, r0
 80051aa:	460f      	mov	r7, r1
 80051ac:	4614      	mov	r4, r2
 80051ae:	18d5      	adds	r5, r2, r3
 80051b0:	42ac      	cmp	r4, r5
 80051b2:	d101      	bne.n	80051b8 <__sfputs_r+0x12>
 80051b4:	2000      	movs	r0, #0
 80051b6:	e007      	b.n	80051c8 <__sfputs_r+0x22>
 80051b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80051bc:	463a      	mov	r2, r7
 80051be:	4630      	mov	r0, r6
 80051c0:	f7ff ffda 	bl	8005178 <__sfputc_r>
 80051c4:	1c43      	adds	r3, r0, #1
 80051c6:	d1f3      	bne.n	80051b0 <__sfputs_r+0xa>
 80051c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080051cc <_vfiprintf_r>:
 80051cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80051d0:	460d      	mov	r5, r1
 80051d2:	b09d      	sub	sp, #116	; 0x74
 80051d4:	4614      	mov	r4, r2
 80051d6:	4698      	mov	r8, r3
 80051d8:	4606      	mov	r6, r0
 80051da:	b118      	cbz	r0, 80051e4 <_vfiprintf_r+0x18>
 80051dc:	6983      	ldr	r3, [r0, #24]
 80051de:	b90b      	cbnz	r3, 80051e4 <_vfiprintf_r+0x18>
 80051e0:	f7ff fde4 	bl	8004dac <__sinit>
 80051e4:	4b89      	ldr	r3, [pc, #548]	; (800540c <_vfiprintf_r+0x240>)
 80051e6:	429d      	cmp	r5, r3
 80051e8:	d11b      	bne.n	8005222 <_vfiprintf_r+0x56>
 80051ea:	6875      	ldr	r5, [r6, #4]
 80051ec:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80051ee:	07d9      	lsls	r1, r3, #31
 80051f0:	d405      	bmi.n	80051fe <_vfiprintf_r+0x32>
 80051f2:	89ab      	ldrh	r3, [r5, #12]
 80051f4:	059a      	lsls	r2, r3, #22
 80051f6:	d402      	bmi.n	80051fe <_vfiprintf_r+0x32>
 80051f8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80051fa:	f7ff fe75 	bl	8004ee8 <__retarget_lock_acquire_recursive>
 80051fe:	89ab      	ldrh	r3, [r5, #12]
 8005200:	071b      	lsls	r3, r3, #28
 8005202:	d501      	bpl.n	8005208 <_vfiprintf_r+0x3c>
 8005204:	692b      	ldr	r3, [r5, #16]
 8005206:	b9eb      	cbnz	r3, 8005244 <_vfiprintf_r+0x78>
 8005208:	4629      	mov	r1, r5
 800520a:	4630      	mov	r0, r6
 800520c:	f7ff fc46 	bl	8004a9c <__swsetup_r>
 8005210:	b1c0      	cbz	r0, 8005244 <_vfiprintf_r+0x78>
 8005212:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005214:	07dc      	lsls	r4, r3, #31
 8005216:	d50e      	bpl.n	8005236 <_vfiprintf_r+0x6a>
 8005218:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800521c:	b01d      	add	sp, #116	; 0x74
 800521e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005222:	4b7b      	ldr	r3, [pc, #492]	; (8005410 <_vfiprintf_r+0x244>)
 8005224:	429d      	cmp	r5, r3
 8005226:	d101      	bne.n	800522c <_vfiprintf_r+0x60>
 8005228:	68b5      	ldr	r5, [r6, #8]
 800522a:	e7df      	b.n	80051ec <_vfiprintf_r+0x20>
 800522c:	4b79      	ldr	r3, [pc, #484]	; (8005414 <_vfiprintf_r+0x248>)
 800522e:	429d      	cmp	r5, r3
 8005230:	bf08      	it	eq
 8005232:	68f5      	ldreq	r5, [r6, #12]
 8005234:	e7da      	b.n	80051ec <_vfiprintf_r+0x20>
 8005236:	89ab      	ldrh	r3, [r5, #12]
 8005238:	0598      	lsls	r0, r3, #22
 800523a:	d4ed      	bmi.n	8005218 <_vfiprintf_r+0x4c>
 800523c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800523e:	f7ff fe54 	bl	8004eea <__retarget_lock_release_recursive>
 8005242:	e7e9      	b.n	8005218 <_vfiprintf_r+0x4c>
 8005244:	2300      	movs	r3, #0
 8005246:	9309      	str	r3, [sp, #36]	; 0x24
 8005248:	2320      	movs	r3, #32
 800524a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800524e:	f8cd 800c 	str.w	r8, [sp, #12]
 8005252:	2330      	movs	r3, #48	; 0x30
 8005254:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8005418 <_vfiprintf_r+0x24c>
 8005258:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800525c:	f04f 0901 	mov.w	r9, #1
 8005260:	4623      	mov	r3, r4
 8005262:	469a      	mov	sl, r3
 8005264:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005268:	b10a      	cbz	r2, 800526e <_vfiprintf_r+0xa2>
 800526a:	2a25      	cmp	r2, #37	; 0x25
 800526c:	d1f9      	bne.n	8005262 <_vfiprintf_r+0x96>
 800526e:	ebba 0b04 	subs.w	fp, sl, r4
 8005272:	d00b      	beq.n	800528c <_vfiprintf_r+0xc0>
 8005274:	465b      	mov	r3, fp
 8005276:	4622      	mov	r2, r4
 8005278:	4629      	mov	r1, r5
 800527a:	4630      	mov	r0, r6
 800527c:	f7ff ff93 	bl	80051a6 <__sfputs_r>
 8005280:	3001      	adds	r0, #1
 8005282:	f000 80aa 	beq.w	80053da <_vfiprintf_r+0x20e>
 8005286:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005288:	445a      	add	r2, fp
 800528a:	9209      	str	r2, [sp, #36]	; 0x24
 800528c:	f89a 3000 	ldrb.w	r3, [sl]
 8005290:	2b00      	cmp	r3, #0
 8005292:	f000 80a2 	beq.w	80053da <_vfiprintf_r+0x20e>
 8005296:	2300      	movs	r3, #0
 8005298:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800529c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80052a0:	f10a 0a01 	add.w	sl, sl, #1
 80052a4:	9304      	str	r3, [sp, #16]
 80052a6:	9307      	str	r3, [sp, #28]
 80052a8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80052ac:	931a      	str	r3, [sp, #104]	; 0x68
 80052ae:	4654      	mov	r4, sl
 80052b0:	2205      	movs	r2, #5
 80052b2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80052b6:	4858      	ldr	r0, [pc, #352]	; (8005418 <_vfiprintf_r+0x24c>)
 80052b8:	f7fa ffc2 	bl	8000240 <memchr>
 80052bc:	9a04      	ldr	r2, [sp, #16]
 80052be:	b9d8      	cbnz	r0, 80052f8 <_vfiprintf_r+0x12c>
 80052c0:	06d1      	lsls	r1, r2, #27
 80052c2:	bf44      	itt	mi
 80052c4:	2320      	movmi	r3, #32
 80052c6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80052ca:	0713      	lsls	r3, r2, #28
 80052cc:	bf44      	itt	mi
 80052ce:	232b      	movmi	r3, #43	; 0x2b
 80052d0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80052d4:	f89a 3000 	ldrb.w	r3, [sl]
 80052d8:	2b2a      	cmp	r3, #42	; 0x2a
 80052da:	d015      	beq.n	8005308 <_vfiprintf_r+0x13c>
 80052dc:	9a07      	ldr	r2, [sp, #28]
 80052de:	4654      	mov	r4, sl
 80052e0:	2000      	movs	r0, #0
 80052e2:	f04f 0c0a 	mov.w	ip, #10
 80052e6:	4621      	mov	r1, r4
 80052e8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80052ec:	3b30      	subs	r3, #48	; 0x30
 80052ee:	2b09      	cmp	r3, #9
 80052f0:	d94e      	bls.n	8005390 <_vfiprintf_r+0x1c4>
 80052f2:	b1b0      	cbz	r0, 8005322 <_vfiprintf_r+0x156>
 80052f4:	9207      	str	r2, [sp, #28]
 80052f6:	e014      	b.n	8005322 <_vfiprintf_r+0x156>
 80052f8:	eba0 0308 	sub.w	r3, r0, r8
 80052fc:	fa09 f303 	lsl.w	r3, r9, r3
 8005300:	4313      	orrs	r3, r2
 8005302:	9304      	str	r3, [sp, #16]
 8005304:	46a2      	mov	sl, r4
 8005306:	e7d2      	b.n	80052ae <_vfiprintf_r+0xe2>
 8005308:	9b03      	ldr	r3, [sp, #12]
 800530a:	1d19      	adds	r1, r3, #4
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	9103      	str	r1, [sp, #12]
 8005310:	2b00      	cmp	r3, #0
 8005312:	bfbb      	ittet	lt
 8005314:	425b      	neglt	r3, r3
 8005316:	f042 0202 	orrlt.w	r2, r2, #2
 800531a:	9307      	strge	r3, [sp, #28]
 800531c:	9307      	strlt	r3, [sp, #28]
 800531e:	bfb8      	it	lt
 8005320:	9204      	strlt	r2, [sp, #16]
 8005322:	7823      	ldrb	r3, [r4, #0]
 8005324:	2b2e      	cmp	r3, #46	; 0x2e
 8005326:	d10c      	bne.n	8005342 <_vfiprintf_r+0x176>
 8005328:	7863      	ldrb	r3, [r4, #1]
 800532a:	2b2a      	cmp	r3, #42	; 0x2a
 800532c:	d135      	bne.n	800539a <_vfiprintf_r+0x1ce>
 800532e:	9b03      	ldr	r3, [sp, #12]
 8005330:	1d1a      	adds	r2, r3, #4
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	9203      	str	r2, [sp, #12]
 8005336:	2b00      	cmp	r3, #0
 8005338:	bfb8      	it	lt
 800533a:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800533e:	3402      	adds	r4, #2
 8005340:	9305      	str	r3, [sp, #20]
 8005342:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8005428 <_vfiprintf_r+0x25c>
 8005346:	7821      	ldrb	r1, [r4, #0]
 8005348:	2203      	movs	r2, #3
 800534a:	4650      	mov	r0, sl
 800534c:	f7fa ff78 	bl	8000240 <memchr>
 8005350:	b140      	cbz	r0, 8005364 <_vfiprintf_r+0x198>
 8005352:	2340      	movs	r3, #64	; 0x40
 8005354:	eba0 000a 	sub.w	r0, r0, sl
 8005358:	fa03 f000 	lsl.w	r0, r3, r0
 800535c:	9b04      	ldr	r3, [sp, #16]
 800535e:	4303      	orrs	r3, r0
 8005360:	3401      	adds	r4, #1
 8005362:	9304      	str	r3, [sp, #16]
 8005364:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005368:	482c      	ldr	r0, [pc, #176]	; (800541c <_vfiprintf_r+0x250>)
 800536a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800536e:	2206      	movs	r2, #6
 8005370:	f7fa ff66 	bl	8000240 <memchr>
 8005374:	2800      	cmp	r0, #0
 8005376:	d03f      	beq.n	80053f8 <_vfiprintf_r+0x22c>
 8005378:	4b29      	ldr	r3, [pc, #164]	; (8005420 <_vfiprintf_r+0x254>)
 800537a:	bb1b      	cbnz	r3, 80053c4 <_vfiprintf_r+0x1f8>
 800537c:	9b03      	ldr	r3, [sp, #12]
 800537e:	3307      	adds	r3, #7
 8005380:	f023 0307 	bic.w	r3, r3, #7
 8005384:	3308      	adds	r3, #8
 8005386:	9303      	str	r3, [sp, #12]
 8005388:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800538a:	443b      	add	r3, r7
 800538c:	9309      	str	r3, [sp, #36]	; 0x24
 800538e:	e767      	b.n	8005260 <_vfiprintf_r+0x94>
 8005390:	fb0c 3202 	mla	r2, ip, r2, r3
 8005394:	460c      	mov	r4, r1
 8005396:	2001      	movs	r0, #1
 8005398:	e7a5      	b.n	80052e6 <_vfiprintf_r+0x11a>
 800539a:	2300      	movs	r3, #0
 800539c:	3401      	adds	r4, #1
 800539e:	9305      	str	r3, [sp, #20]
 80053a0:	4619      	mov	r1, r3
 80053a2:	f04f 0c0a 	mov.w	ip, #10
 80053a6:	4620      	mov	r0, r4
 80053a8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80053ac:	3a30      	subs	r2, #48	; 0x30
 80053ae:	2a09      	cmp	r2, #9
 80053b0:	d903      	bls.n	80053ba <_vfiprintf_r+0x1ee>
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d0c5      	beq.n	8005342 <_vfiprintf_r+0x176>
 80053b6:	9105      	str	r1, [sp, #20]
 80053b8:	e7c3      	b.n	8005342 <_vfiprintf_r+0x176>
 80053ba:	fb0c 2101 	mla	r1, ip, r1, r2
 80053be:	4604      	mov	r4, r0
 80053c0:	2301      	movs	r3, #1
 80053c2:	e7f0      	b.n	80053a6 <_vfiprintf_r+0x1da>
 80053c4:	ab03      	add	r3, sp, #12
 80053c6:	9300      	str	r3, [sp, #0]
 80053c8:	462a      	mov	r2, r5
 80053ca:	4b16      	ldr	r3, [pc, #88]	; (8005424 <_vfiprintf_r+0x258>)
 80053cc:	a904      	add	r1, sp, #16
 80053ce:	4630      	mov	r0, r6
 80053d0:	f3af 8000 	nop.w
 80053d4:	4607      	mov	r7, r0
 80053d6:	1c78      	adds	r0, r7, #1
 80053d8:	d1d6      	bne.n	8005388 <_vfiprintf_r+0x1bc>
 80053da:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80053dc:	07d9      	lsls	r1, r3, #31
 80053de:	d405      	bmi.n	80053ec <_vfiprintf_r+0x220>
 80053e0:	89ab      	ldrh	r3, [r5, #12]
 80053e2:	059a      	lsls	r2, r3, #22
 80053e4:	d402      	bmi.n	80053ec <_vfiprintf_r+0x220>
 80053e6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80053e8:	f7ff fd7f 	bl	8004eea <__retarget_lock_release_recursive>
 80053ec:	89ab      	ldrh	r3, [r5, #12]
 80053ee:	065b      	lsls	r3, r3, #25
 80053f0:	f53f af12 	bmi.w	8005218 <_vfiprintf_r+0x4c>
 80053f4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80053f6:	e711      	b.n	800521c <_vfiprintf_r+0x50>
 80053f8:	ab03      	add	r3, sp, #12
 80053fa:	9300      	str	r3, [sp, #0]
 80053fc:	462a      	mov	r2, r5
 80053fe:	4b09      	ldr	r3, [pc, #36]	; (8005424 <_vfiprintf_r+0x258>)
 8005400:	a904      	add	r1, sp, #16
 8005402:	4630      	mov	r0, r6
 8005404:	f000 f880 	bl	8005508 <_printf_i>
 8005408:	e7e4      	b.n	80053d4 <_vfiprintf_r+0x208>
 800540a:	bf00      	nop
 800540c:	08005a7c 	.word	0x08005a7c
 8005410:	08005a9c 	.word	0x08005a9c
 8005414:	08005a5c 	.word	0x08005a5c
 8005418:	08005abc 	.word	0x08005abc
 800541c:	08005ac6 	.word	0x08005ac6
 8005420:	00000000 	.word	0x00000000
 8005424:	080051a7 	.word	0x080051a7
 8005428:	08005ac2 	.word	0x08005ac2

0800542c <_printf_common>:
 800542c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005430:	4616      	mov	r6, r2
 8005432:	4699      	mov	r9, r3
 8005434:	688a      	ldr	r2, [r1, #8]
 8005436:	690b      	ldr	r3, [r1, #16]
 8005438:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800543c:	4293      	cmp	r3, r2
 800543e:	bfb8      	it	lt
 8005440:	4613      	movlt	r3, r2
 8005442:	6033      	str	r3, [r6, #0]
 8005444:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005448:	4607      	mov	r7, r0
 800544a:	460c      	mov	r4, r1
 800544c:	b10a      	cbz	r2, 8005452 <_printf_common+0x26>
 800544e:	3301      	adds	r3, #1
 8005450:	6033      	str	r3, [r6, #0]
 8005452:	6823      	ldr	r3, [r4, #0]
 8005454:	0699      	lsls	r1, r3, #26
 8005456:	bf42      	ittt	mi
 8005458:	6833      	ldrmi	r3, [r6, #0]
 800545a:	3302      	addmi	r3, #2
 800545c:	6033      	strmi	r3, [r6, #0]
 800545e:	6825      	ldr	r5, [r4, #0]
 8005460:	f015 0506 	ands.w	r5, r5, #6
 8005464:	d106      	bne.n	8005474 <_printf_common+0x48>
 8005466:	f104 0a19 	add.w	sl, r4, #25
 800546a:	68e3      	ldr	r3, [r4, #12]
 800546c:	6832      	ldr	r2, [r6, #0]
 800546e:	1a9b      	subs	r3, r3, r2
 8005470:	42ab      	cmp	r3, r5
 8005472:	dc26      	bgt.n	80054c2 <_printf_common+0x96>
 8005474:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005478:	1e13      	subs	r3, r2, #0
 800547a:	6822      	ldr	r2, [r4, #0]
 800547c:	bf18      	it	ne
 800547e:	2301      	movne	r3, #1
 8005480:	0692      	lsls	r2, r2, #26
 8005482:	d42b      	bmi.n	80054dc <_printf_common+0xb0>
 8005484:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005488:	4649      	mov	r1, r9
 800548a:	4638      	mov	r0, r7
 800548c:	47c0      	blx	r8
 800548e:	3001      	adds	r0, #1
 8005490:	d01e      	beq.n	80054d0 <_printf_common+0xa4>
 8005492:	6823      	ldr	r3, [r4, #0]
 8005494:	68e5      	ldr	r5, [r4, #12]
 8005496:	6832      	ldr	r2, [r6, #0]
 8005498:	f003 0306 	and.w	r3, r3, #6
 800549c:	2b04      	cmp	r3, #4
 800549e:	bf08      	it	eq
 80054a0:	1aad      	subeq	r5, r5, r2
 80054a2:	68a3      	ldr	r3, [r4, #8]
 80054a4:	6922      	ldr	r2, [r4, #16]
 80054a6:	bf0c      	ite	eq
 80054a8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80054ac:	2500      	movne	r5, #0
 80054ae:	4293      	cmp	r3, r2
 80054b0:	bfc4      	itt	gt
 80054b2:	1a9b      	subgt	r3, r3, r2
 80054b4:	18ed      	addgt	r5, r5, r3
 80054b6:	2600      	movs	r6, #0
 80054b8:	341a      	adds	r4, #26
 80054ba:	42b5      	cmp	r5, r6
 80054bc:	d11a      	bne.n	80054f4 <_printf_common+0xc8>
 80054be:	2000      	movs	r0, #0
 80054c0:	e008      	b.n	80054d4 <_printf_common+0xa8>
 80054c2:	2301      	movs	r3, #1
 80054c4:	4652      	mov	r2, sl
 80054c6:	4649      	mov	r1, r9
 80054c8:	4638      	mov	r0, r7
 80054ca:	47c0      	blx	r8
 80054cc:	3001      	adds	r0, #1
 80054ce:	d103      	bne.n	80054d8 <_printf_common+0xac>
 80054d0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80054d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80054d8:	3501      	adds	r5, #1
 80054da:	e7c6      	b.n	800546a <_printf_common+0x3e>
 80054dc:	18e1      	adds	r1, r4, r3
 80054de:	1c5a      	adds	r2, r3, #1
 80054e0:	2030      	movs	r0, #48	; 0x30
 80054e2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80054e6:	4422      	add	r2, r4
 80054e8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80054ec:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80054f0:	3302      	adds	r3, #2
 80054f2:	e7c7      	b.n	8005484 <_printf_common+0x58>
 80054f4:	2301      	movs	r3, #1
 80054f6:	4622      	mov	r2, r4
 80054f8:	4649      	mov	r1, r9
 80054fa:	4638      	mov	r0, r7
 80054fc:	47c0      	blx	r8
 80054fe:	3001      	adds	r0, #1
 8005500:	d0e6      	beq.n	80054d0 <_printf_common+0xa4>
 8005502:	3601      	adds	r6, #1
 8005504:	e7d9      	b.n	80054ba <_printf_common+0x8e>
	...

08005508 <_printf_i>:
 8005508:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800550c:	7e0f      	ldrb	r7, [r1, #24]
 800550e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005510:	2f78      	cmp	r7, #120	; 0x78
 8005512:	4691      	mov	r9, r2
 8005514:	4680      	mov	r8, r0
 8005516:	460c      	mov	r4, r1
 8005518:	469a      	mov	sl, r3
 800551a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800551e:	d807      	bhi.n	8005530 <_printf_i+0x28>
 8005520:	2f62      	cmp	r7, #98	; 0x62
 8005522:	d80a      	bhi.n	800553a <_printf_i+0x32>
 8005524:	2f00      	cmp	r7, #0
 8005526:	f000 80d8 	beq.w	80056da <_printf_i+0x1d2>
 800552a:	2f58      	cmp	r7, #88	; 0x58
 800552c:	f000 80a3 	beq.w	8005676 <_printf_i+0x16e>
 8005530:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005534:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005538:	e03a      	b.n	80055b0 <_printf_i+0xa8>
 800553a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800553e:	2b15      	cmp	r3, #21
 8005540:	d8f6      	bhi.n	8005530 <_printf_i+0x28>
 8005542:	a101      	add	r1, pc, #4	; (adr r1, 8005548 <_printf_i+0x40>)
 8005544:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005548:	080055a1 	.word	0x080055a1
 800554c:	080055b5 	.word	0x080055b5
 8005550:	08005531 	.word	0x08005531
 8005554:	08005531 	.word	0x08005531
 8005558:	08005531 	.word	0x08005531
 800555c:	08005531 	.word	0x08005531
 8005560:	080055b5 	.word	0x080055b5
 8005564:	08005531 	.word	0x08005531
 8005568:	08005531 	.word	0x08005531
 800556c:	08005531 	.word	0x08005531
 8005570:	08005531 	.word	0x08005531
 8005574:	080056c1 	.word	0x080056c1
 8005578:	080055e5 	.word	0x080055e5
 800557c:	080056a3 	.word	0x080056a3
 8005580:	08005531 	.word	0x08005531
 8005584:	08005531 	.word	0x08005531
 8005588:	080056e3 	.word	0x080056e3
 800558c:	08005531 	.word	0x08005531
 8005590:	080055e5 	.word	0x080055e5
 8005594:	08005531 	.word	0x08005531
 8005598:	08005531 	.word	0x08005531
 800559c:	080056ab 	.word	0x080056ab
 80055a0:	682b      	ldr	r3, [r5, #0]
 80055a2:	1d1a      	adds	r2, r3, #4
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	602a      	str	r2, [r5, #0]
 80055a8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80055ac:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80055b0:	2301      	movs	r3, #1
 80055b2:	e0a3      	b.n	80056fc <_printf_i+0x1f4>
 80055b4:	6820      	ldr	r0, [r4, #0]
 80055b6:	6829      	ldr	r1, [r5, #0]
 80055b8:	0606      	lsls	r6, r0, #24
 80055ba:	f101 0304 	add.w	r3, r1, #4
 80055be:	d50a      	bpl.n	80055d6 <_printf_i+0xce>
 80055c0:	680e      	ldr	r6, [r1, #0]
 80055c2:	602b      	str	r3, [r5, #0]
 80055c4:	2e00      	cmp	r6, #0
 80055c6:	da03      	bge.n	80055d0 <_printf_i+0xc8>
 80055c8:	232d      	movs	r3, #45	; 0x2d
 80055ca:	4276      	negs	r6, r6
 80055cc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80055d0:	485e      	ldr	r0, [pc, #376]	; (800574c <_printf_i+0x244>)
 80055d2:	230a      	movs	r3, #10
 80055d4:	e019      	b.n	800560a <_printf_i+0x102>
 80055d6:	680e      	ldr	r6, [r1, #0]
 80055d8:	602b      	str	r3, [r5, #0]
 80055da:	f010 0f40 	tst.w	r0, #64	; 0x40
 80055de:	bf18      	it	ne
 80055e0:	b236      	sxthne	r6, r6
 80055e2:	e7ef      	b.n	80055c4 <_printf_i+0xbc>
 80055e4:	682b      	ldr	r3, [r5, #0]
 80055e6:	6820      	ldr	r0, [r4, #0]
 80055e8:	1d19      	adds	r1, r3, #4
 80055ea:	6029      	str	r1, [r5, #0]
 80055ec:	0601      	lsls	r1, r0, #24
 80055ee:	d501      	bpl.n	80055f4 <_printf_i+0xec>
 80055f0:	681e      	ldr	r6, [r3, #0]
 80055f2:	e002      	b.n	80055fa <_printf_i+0xf2>
 80055f4:	0646      	lsls	r6, r0, #25
 80055f6:	d5fb      	bpl.n	80055f0 <_printf_i+0xe8>
 80055f8:	881e      	ldrh	r6, [r3, #0]
 80055fa:	4854      	ldr	r0, [pc, #336]	; (800574c <_printf_i+0x244>)
 80055fc:	2f6f      	cmp	r7, #111	; 0x6f
 80055fe:	bf0c      	ite	eq
 8005600:	2308      	moveq	r3, #8
 8005602:	230a      	movne	r3, #10
 8005604:	2100      	movs	r1, #0
 8005606:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800560a:	6865      	ldr	r5, [r4, #4]
 800560c:	60a5      	str	r5, [r4, #8]
 800560e:	2d00      	cmp	r5, #0
 8005610:	bfa2      	ittt	ge
 8005612:	6821      	ldrge	r1, [r4, #0]
 8005614:	f021 0104 	bicge.w	r1, r1, #4
 8005618:	6021      	strge	r1, [r4, #0]
 800561a:	b90e      	cbnz	r6, 8005620 <_printf_i+0x118>
 800561c:	2d00      	cmp	r5, #0
 800561e:	d04d      	beq.n	80056bc <_printf_i+0x1b4>
 8005620:	4615      	mov	r5, r2
 8005622:	fbb6 f1f3 	udiv	r1, r6, r3
 8005626:	fb03 6711 	mls	r7, r3, r1, r6
 800562a:	5dc7      	ldrb	r7, [r0, r7]
 800562c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005630:	4637      	mov	r7, r6
 8005632:	42bb      	cmp	r3, r7
 8005634:	460e      	mov	r6, r1
 8005636:	d9f4      	bls.n	8005622 <_printf_i+0x11a>
 8005638:	2b08      	cmp	r3, #8
 800563a:	d10b      	bne.n	8005654 <_printf_i+0x14c>
 800563c:	6823      	ldr	r3, [r4, #0]
 800563e:	07de      	lsls	r6, r3, #31
 8005640:	d508      	bpl.n	8005654 <_printf_i+0x14c>
 8005642:	6923      	ldr	r3, [r4, #16]
 8005644:	6861      	ldr	r1, [r4, #4]
 8005646:	4299      	cmp	r1, r3
 8005648:	bfde      	ittt	le
 800564a:	2330      	movle	r3, #48	; 0x30
 800564c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005650:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8005654:	1b52      	subs	r2, r2, r5
 8005656:	6122      	str	r2, [r4, #16]
 8005658:	f8cd a000 	str.w	sl, [sp]
 800565c:	464b      	mov	r3, r9
 800565e:	aa03      	add	r2, sp, #12
 8005660:	4621      	mov	r1, r4
 8005662:	4640      	mov	r0, r8
 8005664:	f7ff fee2 	bl	800542c <_printf_common>
 8005668:	3001      	adds	r0, #1
 800566a:	d14c      	bne.n	8005706 <_printf_i+0x1fe>
 800566c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005670:	b004      	add	sp, #16
 8005672:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005676:	4835      	ldr	r0, [pc, #212]	; (800574c <_printf_i+0x244>)
 8005678:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800567c:	6829      	ldr	r1, [r5, #0]
 800567e:	6823      	ldr	r3, [r4, #0]
 8005680:	f851 6b04 	ldr.w	r6, [r1], #4
 8005684:	6029      	str	r1, [r5, #0]
 8005686:	061d      	lsls	r5, r3, #24
 8005688:	d514      	bpl.n	80056b4 <_printf_i+0x1ac>
 800568a:	07df      	lsls	r7, r3, #31
 800568c:	bf44      	itt	mi
 800568e:	f043 0320 	orrmi.w	r3, r3, #32
 8005692:	6023      	strmi	r3, [r4, #0]
 8005694:	b91e      	cbnz	r6, 800569e <_printf_i+0x196>
 8005696:	6823      	ldr	r3, [r4, #0]
 8005698:	f023 0320 	bic.w	r3, r3, #32
 800569c:	6023      	str	r3, [r4, #0]
 800569e:	2310      	movs	r3, #16
 80056a0:	e7b0      	b.n	8005604 <_printf_i+0xfc>
 80056a2:	6823      	ldr	r3, [r4, #0]
 80056a4:	f043 0320 	orr.w	r3, r3, #32
 80056a8:	6023      	str	r3, [r4, #0]
 80056aa:	2378      	movs	r3, #120	; 0x78
 80056ac:	4828      	ldr	r0, [pc, #160]	; (8005750 <_printf_i+0x248>)
 80056ae:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80056b2:	e7e3      	b.n	800567c <_printf_i+0x174>
 80056b4:	0659      	lsls	r1, r3, #25
 80056b6:	bf48      	it	mi
 80056b8:	b2b6      	uxthmi	r6, r6
 80056ba:	e7e6      	b.n	800568a <_printf_i+0x182>
 80056bc:	4615      	mov	r5, r2
 80056be:	e7bb      	b.n	8005638 <_printf_i+0x130>
 80056c0:	682b      	ldr	r3, [r5, #0]
 80056c2:	6826      	ldr	r6, [r4, #0]
 80056c4:	6961      	ldr	r1, [r4, #20]
 80056c6:	1d18      	adds	r0, r3, #4
 80056c8:	6028      	str	r0, [r5, #0]
 80056ca:	0635      	lsls	r5, r6, #24
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	d501      	bpl.n	80056d4 <_printf_i+0x1cc>
 80056d0:	6019      	str	r1, [r3, #0]
 80056d2:	e002      	b.n	80056da <_printf_i+0x1d2>
 80056d4:	0670      	lsls	r0, r6, #25
 80056d6:	d5fb      	bpl.n	80056d0 <_printf_i+0x1c8>
 80056d8:	8019      	strh	r1, [r3, #0]
 80056da:	2300      	movs	r3, #0
 80056dc:	6123      	str	r3, [r4, #16]
 80056de:	4615      	mov	r5, r2
 80056e0:	e7ba      	b.n	8005658 <_printf_i+0x150>
 80056e2:	682b      	ldr	r3, [r5, #0]
 80056e4:	1d1a      	adds	r2, r3, #4
 80056e6:	602a      	str	r2, [r5, #0]
 80056e8:	681d      	ldr	r5, [r3, #0]
 80056ea:	6862      	ldr	r2, [r4, #4]
 80056ec:	2100      	movs	r1, #0
 80056ee:	4628      	mov	r0, r5
 80056f0:	f7fa fda6 	bl	8000240 <memchr>
 80056f4:	b108      	cbz	r0, 80056fa <_printf_i+0x1f2>
 80056f6:	1b40      	subs	r0, r0, r5
 80056f8:	6060      	str	r0, [r4, #4]
 80056fa:	6863      	ldr	r3, [r4, #4]
 80056fc:	6123      	str	r3, [r4, #16]
 80056fe:	2300      	movs	r3, #0
 8005700:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005704:	e7a8      	b.n	8005658 <_printf_i+0x150>
 8005706:	6923      	ldr	r3, [r4, #16]
 8005708:	462a      	mov	r2, r5
 800570a:	4649      	mov	r1, r9
 800570c:	4640      	mov	r0, r8
 800570e:	47d0      	blx	sl
 8005710:	3001      	adds	r0, #1
 8005712:	d0ab      	beq.n	800566c <_printf_i+0x164>
 8005714:	6823      	ldr	r3, [r4, #0]
 8005716:	079b      	lsls	r3, r3, #30
 8005718:	d413      	bmi.n	8005742 <_printf_i+0x23a>
 800571a:	68e0      	ldr	r0, [r4, #12]
 800571c:	9b03      	ldr	r3, [sp, #12]
 800571e:	4298      	cmp	r0, r3
 8005720:	bfb8      	it	lt
 8005722:	4618      	movlt	r0, r3
 8005724:	e7a4      	b.n	8005670 <_printf_i+0x168>
 8005726:	2301      	movs	r3, #1
 8005728:	4632      	mov	r2, r6
 800572a:	4649      	mov	r1, r9
 800572c:	4640      	mov	r0, r8
 800572e:	47d0      	blx	sl
 8005730:	3001      	adds	r0, #1
 8005732:	d09b      	beq.n	800566c <_printf_i+0x164>
 8005734:	3501      	adds	r5, #1
 8005736:	68e3      	ldr	r3, [r4, #12]
 8005738:	9903      	ldr	r1, [sp, #12]
 800573a:	1a5b      	subs	r3, r3, r1
 800573c:	42ab      	cmp	r3, r5
 800573e:	dcf2      	bgt.n	8005726 <_printf_i+0x21e>
 8005740:	e7eb      	b.n	800571a <_printf_i+0x212>
 8005742:	2500      	movs	r5, #0
 8005744:	f104 0619 	add.w	r6, r4, #25
 8005748:	e7f5      	b.n	8005736 <_printf_i+0x22e>
 800574a:	bf00      	nop
 800574c:	08005acd 	.word	0x08005acd
 8005750:	08005ade 	.word	0x08005ade

08005754 <_sbrk_r>:
 8005754:	b538      	push	{r3, r4, r5, lr}
 8005756:	4d06      	ldr	r5, [pc, #24]	; (8005770 <_sbrk_r+0x1c>)
 8005758:	2300      	movs	r3, #0
 800575a:	4604      	mov	r4, r0
 800575c:	4608      	mov	r0, r1
 800575e:	602b      	str	r3, [r5, #0]
 8005760:	f000 f8c0 	bl	80058e4 <_sbrk>
 8005764:	1c43      	adds	r3, r0, #1
 8005766:	d102      	bne.n	800576e <_sbrk_r+0x1a>
 8005768:	682b      	ldr	r3, [r5, #0]
 800576a:	b103      	cbz	r3, 800576e <_sbrk_r+0x1a>
 800576c:	6023      	str	r3, [r4, #0]
 800576e:	bd38      	pop	{r3, r4, r5, pc}
 8005770:	2000ba90 	.word	0x2000ba90

08005774 <__sread>:
 8005774:	b510      	push	{r4, lr}
 8005776:	460c      	mov	r4, r1
 8005778:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800577c:	f000 f8a0 	bl	80058c0 <_read_r>
 8005780:	2800      	cmp	r0, #0
 8005782:	bfab      	itete	ge
 8005784:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005786:	89a3      	ldrhlt	r3, [r4, #12]
 8005788:	181b      	addge	r3, r3, r0
 800578a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800578e:	bfac      	ite	ge
 8005790:	6563      	strge	r3, [r4, #84]	; 0x54
 8005792:	81a3      	strhlt	r3, [r4, #12]
 8005794:	bd10      	pop	{r4, pc}

08005796 <__swrite>:
 8005796:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800579a:	461f      	mov	r7, r3
 800579c:	898b      	ldrh	r3, [r1, #12]
 800579e:	05db      	lsls	r3, r3, #23
 80057a0:	4605      	mov	r5, r0
 80057a2:	460c      	mov	r4, r1
 80057a4:	4616      	mov	r6, r2
 80057a6:	d505      	bpl.n	80057b4 <__swrite+0x1e>
 80057a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80057ac:	2302      	movs	r3, #2
 80057ae:	2200      	movs	r2, #0
 80057b0:	f000 f868 	bl	8005884 <_lseek_r>
 80057b4:	89a3      	ldrh	r3, [r4, #12]
 80057b6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80057ba:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80057be:	81a3      	strh	r3, [r4, #12]
 80057c0:	4632      	mov	r2, r6
 80057c2:	463b      	mov	r3, r7
 80057c4:	4628      	mov	r0, r5
 80057c6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80057ca:	f000 b817 	b.w	80057fc <_write_r>

080057ce <__sseek>:
 80057ce:	b510      	push	{r4, lr}
 80057d0:	460c      	mov	r4, r1
 80057d2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80057d6:	f000 f855 	bl	8005884 <_lseek_r>
 80057da:	1c43      	adds	r3, r0, #1
 80057dc:	89a3      	ldrh	r3, [r4, #12]
 80057de:	bf15      	itete	ne
 80057e0:	6560      	strne	r0, [r4, #84]	; 0x54
 80057e2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80057e6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80057ea:	81a3      	strheq	r3, [r4, #12]
 80057ec:	bf18      	it	ne
 80057ee:	81a3      	strhne	r3, [r4, #12]
 80057f0:	bd10      	pop	{r4, pc}

080057f2 <__sclose>:
 80057f2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80057f6:	f000 b813 	b.w	8005820 <_close_r>
	...

080057fc <_write_r>:
 80057fc:	b538      	push	{r3, r4, r5, lr}
 80057fe:	4d07      	ldr	r5, [pc, #28]	; (800581c <_write_r+0x20>)
 8005800:	4604      	mov	r4, r0
 8005802:	4608      	mov	r0, r1
 8005804:	4611      	mov	r1, r2
 8005806:	2200      	movs	r2, #0
 8005808:	602a      	str	r2, [r5, #0]
 800580a:	461a      	mov	r2, r3
 800580c:	f7fb fdd9 	bl	80013c2 <_write>
 8005810:	1c43      	adds	r3, r0, #1
 8005812:	d102      	bne.n	800581a <_write_r+0x1e>
 8005814:	682b      	ldr	r3, [r5, #0]
 8005816:	b103      	cbz	r3, 800581a <_write_r+0x1e>
 8005818:	6023      	str	r3, [r4, #0]
 800581a:	bd38      	pop	{r3, r4, r5, pc}
 800581c:	2000ba90 	.word	0x2000ba90

08005820 <_close_r>:
 8005820:	b538      	push	{r3, r4, r5, lr}
 8005822:	4d06      	ldr	r5, [pc, #24]	; (800583c <_close_r+0x1c>)
 8005824:	2300      	movs	r3, #0
 8005826:	4604      	mov	r4, r0
 8005828:	4608      	mov	r0, r1
 800582a:	602b      	str	r3, [r5, #0]
 800582c:	f7fb fde5 	bl	80013fa <_close>
 8005830:	1c43      	adds	r3, r0, #1
 8005832:	d102      	bne.n	800583a <_close_r+0x1a>
 8005834:	682b      	ldr	r3, [r5, #0]
 8005836:	b103      	cbz	r3, 800583a <_close_r+0x1a>
 8005838:	6023      	str	r3, [r4, #0]
 800583a:	bd38      	pop	{r3, r4, r5, pc}
 800583c:	2000ba90 	.word	0x2000ba90

08005840 <_fstat_r>:
 8005840:	b538      	push	{r3, r4, r5, lr}
 8005842:	4d07      	ldr	r5, [pc, #28]	; (8005860 <_fstat_r+0x20>)
 8005844:	2300      	movs	r3, #0
 8005846:	4604      	mov	r4, r0
 8005848:	4608      	mov	r0, r1
 800584a:	4611      	mov	r1, r2
 800584c:	602b      	str	r3, [r5, #0]
 800584e:	f7fb fde0 	bl	8001412 <_fstat>
 8005852:	1c43      	adds	r3, r0, #1
 8005854:	d102      	bne.n	800585c <_fstat_r+0x1c>
 8005856:	682b      	ldr	r3, [r5, #0]
 8005858:	b103      	cbz	r3, 800585c <_fstat_r+0x1c>
 800585a:	6023      	str	r3, [r4, #0]
 800585c:	bd38      	pop	{r3, r4, r5, pc}
 800585e:	bf00      	nop
 8005860:	2000ba90 	.word	0x2000ba90

08005864 <_isatty_r>:
 8005864:	b538      	push	{r3, r4, r5, lr}
 8005866:	4d06      	ldr	r5, [pc, #24]	; (8005880 <_isatty_r+0x1c>)
 8005868:	2300      	movs	r3, #0
 800586a:	4604      	mov	r4, r0
 800586c:	4608      	mov	r0, r1
 800586e:	602b      	str	r3, [r5, #0]
 8005870:	f7fb fddf 	bl	8001432 <_isatty>
 8005874:	1c43      	adds	r3, r0, #1
 8005876:	d102      	bne.n	800587e <_isatty_r+0x1a>
 8005878:	682b      	ldr	r3, [r5, #0]
 800587a:	b103      	cbz	r3, 800587e <_isatty_r+0x1a>
 800587c:	6023      	str	r3, [r4, #0]
 800587e:	bd38      	pop	{r3, r4, r5, pc}
 8005880:	2000ba90 	.word	0x2000ba90

08005884 <_lseek_r>:
 8005884:	b538      	push	{r3, r4, r5, lr}
 8005886:	4d07      	ldr	r5, [pc, #28]	; (80058a4 <_lseek_r+0x20>)
 8005888:	4604      	mov	r4, r0
 800588a:	4608      	mov	r0, r1
 800588c:	4611      	mov	r1, r2
 800588e:	2200      	movs	r2, #0
 8005890:	602a      	str	r2, [r5, #0]
 8005892:	461a      	mov	r2, r3
 8005894:	f7fb fdd8 	bl	8001448 <_lseek>
 8005898:	1c43      	adds	r3, r0, #1
 800589a:	d102      	bne.n	80058a2 <_lseek_r+0x1e>
 800589c:	682b      	ldr	r3, [r5, #0]
 800589e:	b103      	cbz	r3, 80058a2 <_lseek_r+0x1e>
 80058a0:	6023      	str	r3, [r4, #0]
 80058a2:	bd38      	pop	{r3, r4, r5, pc}
 80058a4:	2000ba90 	.word	0x2000ba90

080058a8 <__malloc_lock>:
 80058a8:	4801      	ldr	r0, [pc, #4]	; (80058b0 <__malloc_lock+0x8>)
 80058aa:	f7ff bb1d 	b.w	8004ee8 <__retarget_lock_acquire_recursive>
 80058ae:	bf00      	nop
 80058b0:	2000ba84 	.word	0x2000ba84

080058b4 <__malloc_unlock>:
 80058b4:	4801      	ldr	r0, [pc, #4]	; (80058bc <__malloc_unlock+0x8>)
 80058b6:	f7ff bb18 	b.w	8004eea <__retarget_lock_release_recursive>
 80058ba:	bf00      	nop
 80058bc:	2000ba84 	.word	0x2000ba84

080058c0 <_read_r>:
 80058c0:	b538      	push	{r3, r4, r5, lr}
 80058c2:	4d07      	ldr	r5, [pc, #28]	; (80058e0 <_read_r+0x20>)
 80058c4:	4604      	mov	r4, r0
 80058c6:	4608      	mov	r0, r1
 80058c8:	4611      	mov	r1, r2
 80058ca:	2200      	movs	r2, #0
 80058cc:	602a      	str	r2, [r5, #0]
 80058ce:	461a      	mov	r2, r3
 80058d0:	f7fb fd5a 	bl	8001388 <_read>
 80058d4:	1c43      	adds	r3, r0, #1
 80058d6:	d102      	bne.n	80058de <_read_r+0x1e>
 80058d8:	682b      	ldr	r3, [r5, #0]
 80058da:	b103      	cbz	r3, 80058de <_read_r+0x1e>
 80058dc:	6023      	str	r3, [r4, #0]
 80058de:	bd38      	pop	{r3, r4, r5, pc}
 80058e0:	2000ba90 	.word	0x2000ba90

080058e4 <_sbrk>:
 80058e4:	4a04      	ldr	r2, [pc, #16]	; (80058f8 <_sbrk+0x14>)
 80058e6:	6811      	ldr	r1, [r2, #0]
 80058e8:	4603      	mov	r3, r0
 80058ea:	b909      	cbnz	r1, 80058f0 <_sbrk+0xc>
 80058ec:	4903      	ldr	r1, [pc, #12]	; (80058fc <_sbrk+0x18>)
 80058ee:	6011      	str	r1, [r2, #0]
 80058f0:	6810      	ldr	r0, [r2, #0]
 80058f2:	4403      	add	r3, r0
 80058f4:	6013      	str	r3, [r2, #0]
 80058f6:	4770      	bx	lr
 80058f8:	2000ba94 	.word	0x2000ba94
 80058fc:	2000ba98 	.word	0x2000ba98

08005900 <_init>:
 8005900:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005902:	bf00      	nop
 8005904:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005906:	bc08      	pop	{r3}
 8005908:	469e      	mov	lr, r3
 800590a:	4770      	bx	lr

0800590c <_fini>:
 800590c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800590e:	bf00      	nop
 8005910:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005912:	bc08      	pop	{r3}
 8005914:	469e      	mov	lr, r3
 8005916:	4770      	bx	lr
